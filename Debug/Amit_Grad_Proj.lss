
Amit_Grad_Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00003b42  00003bd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800178  00800178  00003cee  2**0
                  ALLOC
  3 .stab         000027f0  00000000  00000000  00003cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c1d  00000000  00000000  000064e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000070fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000729d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000748f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000989a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ac20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bdf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bfb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c2ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e2 e4       	ldi	r30, 0x42	; 66
     162:	fb e3       	ldi	r31, 0x3B	; 59
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a8 37       	cpi	r26, 0x78	; 120
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a8 e7       	ldi	r26, 0x78	; 120
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a4 38       	cpi	r26, 0x84	; 132
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <main>
     184:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	af e6       	ldi	r26, 0x6F	; 111
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 17 1b 	jmp	0x362e	; 0x362e <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8f e6       	ldi	r24, 0x6F	; 111
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 17 1b 	jmp	0x362e	; 0x362e <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6f e6       	ldi	r22, 0x6F	; 111
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 27 1b 	jmp	0x364e	; 0x364e <__epilogue_restores__+0x20>

00000a4c <__floatunsisf>:
     a4c:	a8 e0       	ldi	r26, 0x08	; 8
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ec e2       	ldi	r30, 0x2C	; 44
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__prologue_saves__+0x10>
     a58:	7b 01       	movw	r14, r22
     a5a:	8c 01       	movw	r16, r24
     a5c:	61 15       	cp	r22, r1
     a5e:	71 05       	cpc	r23, r1
     a60:	81 05       	cpc	r24, r1
     a62:	91 05       	cpc	r25, r1
     a64:	19 f4       	brne	.+6      	; 0xa6c <__floatunsisf+0x20>
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	60 c0       	rjmp	.+192    	; 0xb2c <__floatunsisf+0xe0>
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	dc 82       	std	Y+4, r13	; 0x04
     a78:	cb 82       	std	Y+3, r12	; 0x03
     a7a:	ed 82       	std	Y+5, r14	; 0x05
     a7c:	fe 82       	std	Y+6, r15	; 0x06
     a7e:	0f 83       	std	Y+7, r16	; 0x07
     a80:	18 87       	std	Y+8, r17	; 0x08
     a82:	c8 01       	movw	r24, r16
     a84:	b7 01       	movw	r22, r14
     a86:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__clzsi2>
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	f7 ff       	sbrs	r31, 7
     a90:	3b c0       	rjmp	.+118    	; 0xb08 <__floatunsisf+0xbc>
     a92:	22 27       	eor	r18, r18
     a94:	33 27       	eor	r19, r19
     a96:	2e 1b       	sub	r18, r30
     a98:	3f 0b       	sbc	r19, r31
     a9a:	57 01       	movw	r10, r14
     a9c:	68 01       	movw	r12, r16
     a9e:	02 2e       	mov	r0, r18
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__floatunsisf+0x5e>
     aa2:	d6 94       	lsr	r13
     aa4:	c7 94       	ror	r12
     aa6:	b7 94       	ror	r11
     aa8:	a7 94       	ror	r10
     aaa:	0a 94       	dec	r0
     aac:	d2 f7       	brpl	.-12     	; 0xaa2 <__floatunsisf+0x56>
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__floatunsisf+0x7c>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	2a 95       	dec	r18
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__floatunsisf+0x74>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	a1 09       	sbc	r26, r1
     ad0:	b1 09       	sbc	r27, r1
     ad2:	8e 21       	and	r24, r14
     ad4:	9f 21       	and	r25, r15
     ad6:	a0 23       	and	r26, r16
     ad8:	b1 23       	and	r27, r17
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	a1 05       	cpc	r26, r1
     ade:	b1 05       	cpc	r27, r1
     ae0:	21 f0       	breq	.+8      	; 0xaea <__floatunsisf+0x9e>
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	4a 29       	or	r20, r10
     aec:	5b 29       	or	r21, r11
     aee:	6c 29       	or	r22, r12
     af0:	7d 29       	or	r23, r13
     af2:	4d 83       	std	Y+5, r20	; 0x05
     af4:	5e 83       	std	Y+6, r21	; 0x06
     af6:	6f 83       	std	Y+7, r22	; 0x07
     af8:	78 87       	std	Y+8, r23	; 0x08
     afa:	8e e1       	ldi	r24, 0x1E	; 30
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	8e 1b       	sub	r24, r30
     b00:	9f 0b       	sbc	r25, r31
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	12 c0       	rjmp	.+36     	; 0xb2c <__floatunsisf+0xe0>
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	81 f0       	breq	.+32     	; 0xb2c <__floatunsisf+0xe0>
     b0c:	0e 2e       	mov	r0, r30
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__floatunsisf+0xcc>
     b10:	ee 0c       	add	r14, r14
     b12:	ff 1c       	adc	r15, r15
     b14:	00 1f       	adc	r16, r16
     b16:	11 1f       	adc	r17, r17
     b18:	0a 94       	dec	r0
     b1a:	d2 f7       	brpl	.-12     	; 0xb10 <__floatunsisf+0xc4>
     b1c:	ed 82       	std	Y+5, r14	; 0x05
     b1e:	fe 82       	std	Y+6, r15	; 0x06
     b20:	0f 83       	std	Y+7, r16	; 0x07
     b22:	18 87       	std	Y+8, r17	; 0x08
     b24:	ce 1a       	sub	r12, r30
     b26:	df 0a       	sbc	r13, r31
     b28:	dc 82       	std	Y+4, r13	; 0x04
     b2a:	cb 82       	std	Y+3, r12	; 0x03
     b2c:	1a 82       	std	Y+2, r1	; 0x02
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     b36:	28 96       	adiw	r28, 0x08	; 8
     b38:	ea e0       	ldi	r30, 0x0A	; 10
     b3a:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__epilogue_restores__+0x10>

00000b3e <__clzsi2>:
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	7b 01       	movw	r14, r22
     b48:	8c 01       	movw	r16, r24
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	e8 16       	cp	r14, r24
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	f8 06       	cpc	r15, r24
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 07       	cpc	r16, r24
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	18 07       	cpc	r17, r24
     b5a:	88 f4       	brcc	.+34     	; 0xb7e <__clzsi2+0x40>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	e8 16       	cp	r14, r24
     b60:	f1 04       	cpc	r15, r1
     b62:	01 05       	cpc	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	31 f0       	breq	.+12     	; 0xb74 <__clzsi2+0x36>
     b68:	28 f0       	brcs	.+10     	; 0xb74 <__clzsi2+0x36>
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	17 c0       	rjmp	.+46     	; 0xba2 <__clzsi2+0x64>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <__clzsi2+0x64>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	e8 16       	cp	r14, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	f8 06       	cpc	r15, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	08 07       	cpc	r16, r24
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	18 07       	cpc	r17, r24
     b8e:	28 f0       	brcs	.+10     	; 0xb9a <__clzsi2+0x5c>
     b90:	88 e1       	ldi	r24, 0x18	; 24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__clzsi2+0x64>
     b9a:	80 e1       	ldi	r24, 0x10	; 16
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	20 e2       	ldi	r18, 0x20	; 32
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	28 1b       	sub	r18, r24
     bac:	39 0b       	sbc	r19, r25
     bae:	4a 0b       	sbc	r20, r26
     bb0:	5b 0b       	sbc	r21, r27
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__clzsi2+0x7e>
     bb4:	16 95       	lsr	r17
     bb6:	07 95       	ror	r16
     bb8:	f7 94       	ror	r15
     bba:	e7 94       	ror	r14
     bbc:	8a 95       	dec	r24
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__clzsi2+0x76>
     bc0:	f7 01       	movw	r30, r14
     bc2:	e9 58       	subi	r30, 0x89	; 137
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	80 81       	ld	r24, Z
     bc8:	28 1b       	sub	r18, r24
     bca:	31 09       	sbc	r19, r1
     bcc:	41 09       	sbc	r20, r1
     bce:	51 09       	sbc	r21, r1
     bd0:	c9 01       	movw	r24, r18
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	08 95       	ret

00000bdc <__pack_f>:
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	fc 01       	movw	r30, r24
     be8:	e4 80       	ldd	r14, Z+4	; 0x04
     bea:	f5 80       	ldd	r15, Z+5	; 0x05
     bec:	06 81       	ldd	r16, Z+6	; 0x06
     bee:	17 81       	ldd	r17, Z+7	; 0x07
     bf0:	d1 80       	ldd	r13, Z+1	; 0x01
     bf2:	80 81       	ld	r24, Z
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	48 f4       	brcc	.+18     	; 0xc0a <__pack_f+0x2e>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e1       	ldi	r26, 0x10	; 16
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e8 2a       	or	r14, r24
     c02:	f9 2a       	or	r15, r25
     c04:	0a 2b       	or	r16, r26
     c06:	1b 2b       	or	r17, r27
     c08:	a5 c0       	rjmp	.+330    	; 0xd54 <__pack_f+0x178>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__pack_f+0x34>
     c0e:	9f c0       	rjmp	.+318    	; 0xd4e <__pack_f+0x172>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	21 f4       	brne	.+8      	; 0xc1c <__pack_f+0x40>
     c14:	ee 24       	eor	r14, r14
     c16:	ff 24       	eor	r15, r15
     c18:	87 01       	movw	r16, r14
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <__pack_f+0x4a>
     c1c:	e1 14       	cp	r14, r1
     c1e:	f1 04       	cpc	r15, r1
     c20:	01 05       	cpc	r16, r1
     c22:	11 05       	cpc	r17, r1
     c24:	19 f4       	brne	.+6      	; 0xc2c <__pack_f+0x50>
     c26:	e0 e0       	ldi	r30, 0x00	; 0
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	96 c0       	rjmp	.+300    	; 0xd58 <__pack_f+0x17c>
     c2c:	62 81       	ldd	r22, Z+2	; 0x02
     c2e:	73 81       	ldd	r23, Z+3	; 0x03
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	62 38       	cpi	r22, 0x82	; 130
     c34:	79 07       	cpc	r23, r25
     c36:	0c f0       	brlt	.+2      	; 0xc3a <__pack_f+0x5e>
     c38:	5b c0       	rjmp	.+182    	; 0xcf0 <__pack_f+0x114>
     c3a:	22 e8       	ldi	r18, 0x82	; 130
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	26 1b       	sub	r18, r22
     c40:	37 0b       	sbc	r19, r23
     c42:	2a 31       	cpi	r18, 0x1A	; 26
     c44:	31 05       	cpc	r19, r1
     c46:	2c f0       	brlt	.+10     	; 0xc52 <__pack_f+0x76>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <__pack_f+0xca>
     c52:	b8 01       	movw	r22, r16
     c54:	a7 01       	movw	r20, r14
     c56:	02 2e       	mov	r0, r18
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__pack_f+0x86>
     c5a:	76 95       	lsr	r23
     c5c:	67 95       	ror	r22
     c5e:	57 95       	ror	r21
     c60:	47 95       	ror	r20
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__pack_f+0x7e>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__pack_f+0x9c>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	2a 95       	dec	r18
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__pack_f+0x94>
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	a1 09       	sbc	r26, r1
     c80:	b1 09       	sbc	r27, r1
     c82:	8e 21       	and	r24, r14
     c84:	9f 21       	and	r25, r15
     c86:	a0 23       	and	r26, r16
     c88:	b1 23       	and	r27, r17
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	a1 05       	cpc	r26, r1
     c8e:	b1 05       	cpc	r27, r1
     c90:	21 f0       	breq	.+8      	; 0xc9a <__pack_f+0xbe>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	9a 01       	movw	r18, r20
     c9c:	ab 01       	movw	r20, r22
     c9e:	28 2b       	or	r18, r24
     ca0:	39 2b       	or	r19, r25
     ca2:	4a 2b       	or	r20, r26
     ca4:	5b 2b       	or	r21, r27
     ca6:	da 01       	movw	r26, r20
     ca8:	c9 01       	movw	r24, r18
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	a0 70       	andi	r26, 0x00	; 0
     cb0:	b0 70       	andi	r27, 0x00	; 0
     cb2:	80 34       	cpi	r24, 0x40	; 64
     cb4:	91 05       	cpc	r25, r1
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	39 f4       	brne	.+14     	; 0xcca <__pack_f+0xee>
     cbc:	27 ff       	sbrs	r18, 7
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <__pack_f+0xf6>
     cc0:	20 5c       	subi	r18, 0xC0	; 192
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	4f 4f       	sbci	r20, 0xFF	; 255
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__pack_f+0xf6>
     cca:	21 5c       	subi	r18, 0xC1	; 193
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	4f 4f       	sbci	r20, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	3a 07       	cpc	r19, r26
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	4a 07       	cpc	r20, r26
     ce0:	a0 e4       	ldi	r26, 0x40	; 64
     ce2:	5a 07       	cpc	r21, r26
     ce4:	10 f0       	brcs	.+4      	; 0xcea <__pack_f+0x10e>
     ce6:	e1 e0       	ldi	r30, 0x01	; 1
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	79 01       	movw	r14, r18
     cec:	8a 01       	movw	r16, r20
     cee:	27 c0       	rjmp	.+78     	; 0xd3e <__pack_f+0x162>
     cf0:	60 38       	cpi	r22, 0x80	; 128
     cf2:	71 05       	cpc	r23, r1
     cf4:	64 f5       	brge	.+88     	; 0xd4e <__pack_f+0x172>
     cf6:	fb 01       	movw	r30, r22
     cf8:	e1 58       	subi	r30, 0x81	; 129
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	d8 01       	movw	r26, r16
     cfe:	c7 01       	movw	r24, r14
     d00:	8f 77       	andi	r24, 0x7F	; 127
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	a0 70       	andi	r26, 0x00	; 0
     d06:	b0 70       	andi	r27, 0x00	; 0
     d08:	80 34       	cpi	r24, 0x40	; 64
     d0a:	91 05       	cpc	r25, r1
     d0c:	a1 05       	cpc	r26, r1
     d0e:	b1 05       	cpc	r27, r1
     d10:	39 f4       	brne	.+14     	; 0xd20 <__pack_f+0x144>
     d12:	e7 fe       	sbrs	r14, 7
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <__pack_f+0x154>
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__pack_f+0x14c>
     d20:	8f e3       	ldi	r24, 0x3F	; 63
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 0e       	add	r14, r24
     d2a:	f9 1e       	adc	r15, r25
     d2c:	0a 1f       	adc	r16, r26
     d2e:	1b 1f       	adc	r17, r27
     d30:	17 ff       	sbrs	r17, 7
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <__pack_f+0x162>
     d34:	16 95       	lsr	r17
     d36:	07 95       	ror	r16
     d38:	f7 94       	ror	r15
     d3a:	e7 94       	ror	r14
     d3c:	31 96       	adiw	r30, 0x01	; 1
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	16 95       	lsr	r17
     d42:	07 95       	ror	r16
     d44:	f7 94       	ror	r15
     d46:	e7 94       	ror	r14
     d48:	8a 95       	dec	r24
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__pack_f+0x164>
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <__pack_f+0x17c>
     d4e:	ee 24       	eor	r14, r14
     d50:	ff 24       	eor	r15, r15
     d52:	87 01       	movw	r16, r14
     d54:	ef ef       	ldi	r30, 0xFF	; 255
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	6e 2f       	mov	r22, r30
     d5a:	67 95       	ror	r22
     d5c:	66 27       	eor	r22, r22
     d5e:	67 95       	ror	r22
     d60:	90 2f       	mov	r25, r16
     d62:	9f 77       	andi	r25, 0x7F	; 127
     d64:	d7 94       	ror	r13
     d66:	dd 24       	eor	r13, r13
     d68:	d7 94       	ror	r13
     d6a:	8e 2f       	mov	r24, r30
     d6c:	86 95       	lsr	r24
     d6e:	49 2f       	mov	r20, r25
     d70:	46 2b       	or	r20, r22
     d72:	58 2f       	mov	r21, r24
     d74:	5d 29       	or	r21, r13
     d76:	b7 01       	movw	r22, r14
     d78:	ca 01       	movw	r24, r20
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	08 95       	ret

00000d86 <__unpack_f>:
     d86:	fc 01       	movw	r30, r24
     d88:	db 01       	movw	r26, r22
     d8a:	40 81       	ld	r20, Z
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	22 81       	ldd	r18, Z+2	; 0x02
     d90:	62 2f       	mov	r22, r18
     d92:	6f 77       	andi	r22, 0x7F	; 127
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	22 1f       	adc	r18, r18
     d98:	22 27       	eor	r18, r18
     d9a:	22 1f       	adc	r18, r18
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	89 2f       	mov	r24, r25
     da0:	88 0f       	add	r24, r24
     da2:	82 2b       	or	r24, r18
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	99 1f       	adc	r25, r25
     daa:	99 27       	eor	r25, r25
     dac:	99 1f       	adc	r25, r25
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	9c 93       	st	X, r25
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	a9 f5       	brne	.+106    	; 0xe24 <__unpack_f+0x9e>
     dba:	41 15       	cp	r20, r1
     dbc:	51 05       	cpc	r21, r1
     dbe:	61 05       	cpc	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__unpack_f+0x42>
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	37 c0       	rjmp	.+110    	; 0xe36 <__unpack_f+0xb0>
     dc8:	82 e8       	ldi	r24, 0x82	; 130
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	9c 93       	st	X, r25
     dd0:	8e 93       	st	-X, r24
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	9a 01       	movw	r18, r20
     dd6:	ab 01       	movw	r20, r22
     dd8:	67 e0       	ldi	r22, 0x07	; 7
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	44 1f       	adc	r20, r20
     de0:	55 1f       	adc	r21, r21
     de2:	6a 95       	dec	r22
     de4:	d1 f7       	brne	.-12     	; 0xdda <__unpack_f+0x54>
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	8c 93       	st	X, r24
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <__unpack_f+0x80>
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	44 1f       	adc	r20, r20
     df2:	55 1f       	adc	r21, r21
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	13 97       	sbiw	r26, 0x03	; 3
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	9c 93       	st	X, r25
     e02:	8e 93       	st	-X, r24
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	20 30       	cpi	r18, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	38 07       	cpc	r19, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	48 07       	cpc	r20, r24
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	58 07       	cpc	r21, r24
     e14:	58 f3       	brcs	.-42     	; 0xdec <__unpack_f+0x66>
     e16:	14 96       	adiw	r26, 0x04	; 4
     e18:	2d 93       	st	X+, r18
     e1a:	3d 93       	st	X+, r19
     e1c:	4d 93       	st	X+, r20
     e1e:	5c 93       	st	X, r21
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	08 95       	ret
     e24:	2f 3f       	cpi	r18, 0xFF	; 255
     e26:	31 05       	cpc	r19, r1
     e28:	79 f4       	brne	.+30     	; 0xe48 <__unpack_f+0xc2>
     e2a:	41 15       	cp	r20, r1
     e2c:	51 05       	cpc	r21, r1
     e2e:	61 05       	cpc	r22, r1
     e30:	71 05       	cpc	r23, r1
     e32:	19 f4       	brne	.+6      	; 0xe3a <__unpack_f+0xb4>
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	8c 93       	st	X, r24
     e38:	08 95       	ret
     e3a:	64 ff       	sbrs	r22, 4
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <__unpack_f+0xbe>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	8c 93       	st	X, r24
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <__unpack_f+0xe2>
     e44:	1c 92       	st	X, r1
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <__unpack_f+0xe2>
     e48:	2f 57       	subi	r18, 0x7F	; 127
     e4a:	30 40       	sbci	r19, 0x00	; 0
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	3c 93       	st	X, r19
     e50:	2e 93       	st	-X, r18
     e52:	12 97       	sbiw	r26, 0x02	; 2
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	8c 93       	st	X, r24
     e58:	87 e0       	ldi	r24, 0x07	; 7
     e5a:	44 0f       	add	r20, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	66 1f       	adc	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	8a 95       	dec	r24
     e64:	d1 f7       	brne	.-12     	; 0xe5a <__unpack_f+0xd4>
     e66:	70 64       	ori	r23, 0x40	; 64
     e68:	14 96       	adiw	r26, 0x04	; 4
     e6a:	4d 93       	st	X+, r20
     e6c:	5d 93       	st	X+, r21
     e6e:	6d 93       	st	X+, r22
     e70:	7c 93       	st	X, r23
     e72:	17 97       	sbiw	r26, 0x07	; 7
     e74:	08 95       	ret

00000e76 <__fpcmp_parts_f>:
     e76:	1f 93       	push	r17
     e78:	dc 01       	movw	r26, r24
     e7a:	fb 01       	movw	r30, r22
     e7c:	9c 91       	ld	r25, X
     e7e:	92 30       	cpi	r25, 0x02	; 2
     e80:	08 f4       	brcc	.+2      	; 0xe84 <__fpcmp_parts_f+0xe>
     e82:	47 c0       	rjmp	.+142    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e84:	80 81       	ld	r24, Z
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	08 f4       	brcc	.+2      	; 0xe8c <__fpcmp_parts_f+0x16>
     e8a:	43 c0       	rjmp	.+134    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	51 f4       	brne	.+20     	; 0xea4 <__fpcmp_parts_f+0x2e>
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	1c 91       	ld	r17, X
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	99 f5       	brne	.+102    	; 0xefe <__fpcmp_parts_f+0x88>
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	68 2f       	mov	r22, r24
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	61 1b       	sub	r22, r17
     ea0:	71 09       	sbc	r23, r1
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <__fpcmp_parts_f+0xac>
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <__fpcmp_parts_f+0x3a>
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <__fpcmp_parts_f+0x42>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	b9 f1       	breq	.+110    	; 0xf1e <__fpcmp_parts_f+0xa8>
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	88 23       	and	r24, r24
     eb4:	89 f1       	breq	.+98     	; 0xf18 <__fpcmp_parts_f+0xa2>
     eb6:	2d c0       	rjmp	.+90     	; 0xf12 <__fpcmp_parts_f+0x9c>
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	1c 91       	ld	r17, X
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	f1 f0       	breq	.+60     	; 0xefe <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	18 17       	cp	r17, r24
     ec6:	d9 f4       	brne	.+54     	; 0xefe <__fpcmp_parts_f+0x88>
     ec8:	12 96       	adiw	r26, 0x02	; 2
     eca:	2d 91       	ld	r18, X+
     ecc:	3c 91       	ld	r19, X
     ece:	13 97       	sbiw	r26, 0x03	; 3
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	82 17       	cp	r24, r18
     ed6:	93 07       	cpc	r25, r19
     ed8:	94 f0       	brlt	.+36     	; 0xefe <__fpcmp_parts_f+0x88>
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	bc f0       	brlt	.+46     	; 0xf0e <__fpcmp_parts_f+0x98>
     ee0:	14 96       	adiw	r26, 0x04	; 4
     ee2:	8d 91       	ld	r24, X+
     ee4:	9d 91       	ld	r25, X+
     ee6:	0d 90       	ld	r0, X+
     ee8:	bc 91       	ld	r27, X
     eea:	a0 2d       	mov	r26, r0
     eec:	24 81       	ldd	r18, Z+4	; 0x04
     eee:	35 81       	ldd	r19, Z+5	; 0x05
     ef0:	46 81       	ldd	r20, Z+6	; 0x06
     ef2:	57 81       	ldd	r21, Z+7	; 0x07
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	4a 07       	cpc	r20, r26
     efa:	5b 07       	cpc	r21, r27
     efc:	18 f4       	brcc	.+6      	; 0xf04 <__fpcmp_parts_f+0x8e>
     efe:	11 23       	and	r17, r17
     f00:	41 f0       	breq	.+16     	; 0xf12 <__fpcmp_parts_f+0x9c>
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <__fpcmp_parts_f+0xa2>
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	a4 07       	cpc	r26, r20
     f0a:	b5 07       	cpc	r27, r21
     f0c:	40 f4       	brcc	.+16     	; 0xf1e <__fpcmp_parts_f+0xa8>
     f0e:	11 23       	and	r17, r17
     f10:	19 f0       	breq	.+6      	; 0xf18 <__fpcmp_parts_f+0xa2>
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <__fpcmp_parts_f+0xac>
     f18:	6f ef       	ldi	r22, 0xFF	; 255
     f1a:	7f ef       	ldi	r23, 0xFF	; 255
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <__fpcmp_parts_f+0xac>
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	cb 01       	movw	r24, r22
     f24:	1f 91       	pop	r17
     f26:	08 95       	ret

00000f28 <motors_init>:

#include <avr/io.h>
#include <util/delay.h>

void motors_init(void)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	//Back motor
	DDRB |= (1<<Back_motor_A);
     f30:	a7 e3       	ldi	r26, 0x37	; 55
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e7 e3       	ldi	r30, 0x37	; 55
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	84 60       	ori	r24, 0x04	; 4
     f3c:	8c 93       	st	X, r24
	DDRB |= (1<<Back_motor_B);
     f3e:	a7 e3       	ldi	r26, 0x37	; 55
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e7 e3       	ldi	r30, 0x37	; 55
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	88 60       	ori	r24, 0x08	; 8
     f4a:	8c 93       	st	X, r24

	//Front motor
	DDRB |= (1<<Front_motor_A);
     f4c:	a7 e3       	ldi	r26, 0x37	; 55
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e7 e3       	ldi	r30, 0x37	; 55
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	81 60       	ori	r24, 0x01	; 1
     f58:	8c 93       	st	X, r24
	DDRB |= (1<<Front_motor_B);
     f5a:	a7 e3       	ldi	r26, 0x37	; 55
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e7 e3       	ldi	r30, 0x37	; 55
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	82 60       	ori	r24, 0x02	; 2
     f66:	8c 93       	st	X, r24
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <turn_right>:

void turn_right(void)
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	2e 97       	sbiw	r28, 0x0e	; 14
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
	//Rotate left motor forward
	PORTB &= ~(1<<Back_motor_A);
     f82:	a8 e3       	ldi	r26, 0x38	; 56
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e8 e3       	ldi	r30, 0x38	; 56
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8b 7f       	andi	r24, 0xFB	; 251
     f8e:	8c 93       	st	X, r24
	PORTB |= (1<<Back_motor_B);
     f90:	a8 e3       	ldi	r26, 0x38	; 56
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e8 e3       	ldi	r30, 0x38	; 56
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 60       	ori	r24, 0x08	; 8
     f9c:	8c 93       	st	X, r24

	//Stop right motor
	PORTB |= (1<<Front_motor_A);
     f9e:	a8 e3       	ldi	r26, 0x38	; 56
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e8 e3       	ldi	r30, 0x38	; 56
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	81 60       	ori	r24, 0x01	; 1
     faa:	8c 93       	st	X, r24
	PORTB &= ~(1<<Front_motor_B);
     fac:	a8 e3       	ldi	r26, 0x38	; 56
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e8 e3       	ldi	r30, 0x38	; 56
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8d 7f       	andi	r24, 0xFD	; 253
     fb8:	8c 93       	st	X, r24
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	aa e7       	ldi	r26, 0x7A	; 122
     fc0:	b4 e4       	ldi	r27, 0x44	; 68
     fc2:	8b 87       	std	Y+11, r24	; 0x0b
     fc4:	9c 87       	std	Y+12, r25	; 0x0c
     fc6:	ad 87       	std	Y+13, r26	; 0x0d
     fc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fca:	6b 85       	ldd	r22, Y+11	; 0x0b
     fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fce:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	4a e7       	ldi	r20, 0x7A	; 122
     fd8:	55 e4       	ldi	r21, 0x45	; 69
     fda:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	8f 83       	std	Y+7, r24	; 0x07
     fe4:	98 87       	std	Y+8, r25	; 0x08
     fe6:	a9 87       	std	Y+9, r26	; 0x09
     fe8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fea:	6f 81       	ldd	r22, Y+7	; 0x07
     fec:	78 85       	ldd	r23, Y+8	; 0x08
     fee:	89 85       	ldd	r24, Y+9	; 0x09
     ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e8       	ldi	r20, 0x80	; 128
     ff8:	5f e3       	ldi	r21, 0x3F	; 63
     ffa:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
     ffe:	88 23       	and	r24, r24
    1000:	2c f4       	brge	.+10     	; 0x100c <turn_right+0x9e>
		__ticks = 1;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9e 83       	std	Y+6, r25	; 0x06
    1008:	8d 83       	std	Y+5, r24	; 0x05
    100a:	3f c0       	rjmp	.+126    	; 0x108a <turn_right+0x11c>
	else if (__tmp > 65535)
    100c:	6f 81       	ldd	r22, Y+7	; 0x07
    100e:	78 85       	ldd	r23, Y+8	; 0x08
    1010:	89 85       	ldd	r24, Y+9	; 0x09
    1012:	9a 85       	ldd	r25, Y+10	; 0x0a
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	3f ef       	ldi	r19, 0xFF	; 255
    1018:	4f e7       	ldi	r20, 0x7F	; 127
    101a:	57 e4       	ldi	r21, 0x47	; 71
    101c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1020:	18 16       	cp	r1, r24
    1022:	4c f5       	brge	.+82     	; 0x1076 <turn_right+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1024:	6b 85       	ldd	r22, Y+11	; 0x0b
    1026:	7c 85       	ldd	r23, Y+12	; 0x0c
    1028:	8d 85       	ldd	r24, Y+13	; 0x0d
    102a:	9e 85       	ldd	r25, Y+14	; 0x0e
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e2       	ldi	r20, 0x20	; 32
    1032:	51 e4       	ldi	r21, 0x41	; 65
    1034:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	9e 83       	std	Y+6, r25	; 0x06
    104a:	8d 83       	std	Y+5, r24	; 0x05
    104c:	0f c0       	rjmp	.+30     	; 0x106c <turn_right+0xfe>
    104e:	80 e9       	ldi	r24, 0x90	; 144
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	9c 83       	std	Y+4, r25	; 0x04
    1054:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <turn_right+0xec>
    105e:	9c 83       	std	Y+4, r25	; 0x04
    1060:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	69 f7       	brne	.-38     	; 0x104e <turn_right+0xe0>
    1074:	14 c0       	rjmp	.+40     	; 0x109e <turn_right+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1076:	6f 81       	ldd	r22, Y+7	; 0x07
    1078:	78 85       	ldd	r23, Y+8	; 0x08
    107a:	89 85       	ldd	r24, Y+9	; 0x09
    107c:	9a 85       	ldd	r25, Y+10	; 0x0a
    107e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	9e 83       	std	Y+6, r25	; 0x06
    1088:	8d 83       	std	Y+5, r24	; 0x05
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <turn_right+0x128>
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);
}
    109e:	2e 96       	adiw	r28, 0x0e	; 14
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <turn_left>:

void turn_left(void)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	2e 97       	sbiw	r28, 0x0e	; 14
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
	//Stop Left motor
	PORTB &= ~(1<<Back_motor_A);
    10c4:	a8 e3       	ldi	r26, 0x38	; 56
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e8 e3       	ldi	r30, 0x38	; 56
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	8b 7f       	andi	r24, 0xFB	; 251
    10d0:	8c 93       	st	X, r24
	PORTB |= (1<<Back_motor_B);
    10d2:	a8 e3       	ldi	r26, 0x38	; 56
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e3       	ldi	r30, 0x38	; 56
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	88 60       	ori	r24, 0x08	; 8
    10de:	8c 93       	st	X, r24

	//Rotate right motor forward
	PORTB &= ~(1<<Front_motor_A);
    10e0:	a8 e3       	ldi	r26, 0x38	; 56
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e8 e3       	ldi	r30, 0x38	; 56
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8e 7f       	andi	r24, 0xFE	; 254
    10ec:	8c 93       	st	X, r24
	PORTB |= (1<<Front_motor_B);
    10ee:	a8 e3       	ldi	r26, 0x38	; 56
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e3       	ldi	r30, 0x38	; 56
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	82 60       	ori	r24, 0x02	; 2
    10fa:	8c 93       	st	X, r24
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	aa e7       	ldi	r26, 0x7A	; 122
    1102:	b4 e4       	ldi	r27, 0x44	; 68
    1104:	8b 87       	std	Y+11, r24	; 0x0b
    1106:	9c 87       	std	Y+12, r25	; 0x0c
    1108:	ad 87       	std	Y+13, r26	; 0x0d
    110a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110c:	6b 85       	ldd	r22, Y+11	; 0x0b
    110e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1110:	8d 85       	ldd	r24, Y+13	; 0x0d
    1112:	9e 85       	ldd	r25, Y+14	; 0x0e
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	4a e7       	ldi	r20, 0x7A	; 122
    111a:	55 e4       	ldi	r21, 0x45	; 69
    111c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	8f 83       	std	Y+7, r24	; 0x07
    1126:	98 87       	std	Y+8, r25	; 0x08
    1128:	a9 87       	std	Y+9, r26	; 0x09
    112a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    112c:	6f 81       	ldd	r22, Y+7	; 0x07
    112e:	78 85       	ldd	r23, Y+8	; 0x08
    1130:	89 85       	ldd	r24, Y+9	; 0x09
    1132:	9a 85       	ldd	r25, Y+10	; 0x0a
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e8       	ldi	r20, 0x80	; 128
    113a:	5f e3       	ldi	r21, 0x3F	; 63
    113c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1140:	88 23       	and	r24, r24
    1142:	2c f4       	brge	.+10     	; 0x114e <turn_left+0x9e>
		__ticks = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9e 83       	std	Y+6, r25	; 0x06
    114a:	8d 83       	std	Y+5, r24	; 0x05
    114c:	3f c0       	rjmp	.+126    	; 0x11cc <turn_left+0x11c>
	else if (__tmp > 65535)
    114e:	6f 81       	ldd	r22, Y+7	; 0x07
    1150:	78 85       	ldd	r23, Y+8	; 0x08
    1152:	89 85       	ldd	r24, Y+9	; 0x09
    1154:	9a 85       	ldd	r25, Y+10	; 0x0a
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	3f ef       	ldi	r19, 0xFF	; 255
    115a:	4f e7       	ldi	r20, 0x7F	; 127
    115c:	57 e4       	ldi	r21, 0x47	; 71
    115e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1162:	18 16       	cp	r1, r24
    1164:	4c f5       	brge	.+82     	; 0x11b8 <turn_left+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1166:	6b 85       	ldd	r22, Y+11	; 0x0b
    1168:	7c 85       	ldd	r23, Y+12	; 0x0c
    116a:	8d 85       	ldd	r24, Y+13	; 0x0d
    116c:	9e 85       	ldd	r25, Y+14	; 0x0e
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e2       	ldi	r20, 0x20	; 32
    1174:	51 e4       	ldi	r21, 0x41	; 65
    1176:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	0f c0       	rjmp	.+30     	; 0x11ae <turn_left+0xfe>
    1190:	80 e9       	ldi	r24, 0x90	; 144
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	9c 83       	std	Y+4, r25	; 0x04
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <turn_left+0xec>
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	9e 81       	ldd	r25, Y+6	; 0x06
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	69 f7       	brne	.-38     	; 0x1190 <turn_left+0xe0>
    11b6:	14 c0       	rjmp	.+40     	; 0x11e0 <turn_left+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ba:	78 85       	ldd	r23, Y+8	; 0x08
    11bc:	89 85       	ldd	r24, Y+9	; 0x09
    11be:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <turn_left+0x128>
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);
}
    11e0:	2e 96       	adiw	r28, 0x0e	; 14
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <move_backward>:

void move_backward(void)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	2e 97       	sbiw	r28, 0x0e	; 14
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
	//Rotate left motor forward
	PORTB |= (1<<Back_motor_A);
    1206:	a8 e3       	ldi	r26, 0x38	; 56
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e8 e3       	ldi	r30, 0x38	; 56
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	84 60       	ori	r24, 0x04	; 4
    1212:	8c 93       	st	X, r24
	PORTB &= ~(1<<Back_motor_B);
    1214:	a8 e3       	ldi	r26, 0x38	; 56
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e8 e3       	ldi	r30, 0x38	; 56
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	87 7f       	andi	r24, 0xF7	; 247
    1220:	8c 93       	st	X, r24

	//Rotate right motor forward
	PORTB &= ~(1<<Front_motor_A);
    1222:	a8 e3       	ldi	r26, 0x38	; 56
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e8 e3       	ldi	r30, 0x38	; 56
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8e 7f       	andi	r24, 0xFE	; 254
    122e:	8c 93       	st	X, r24
	PORTB &= ~(1<<Front_motor_B);
    1230:	a8 e3       	ldi	r26, 0x38	; 56
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e8 e3       	ldi	r30, 0x38	; 56
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8d 7f       	andi	r24, 0xFD	; 253
    123c:	8c 93       	st	X, r24
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e8       	ldi	r25, 0x80	; 128
    1242:	ab e3       	ldi	r26, 0x3B	; 59
    1244:	b5 e4       	ldi	r27, 0x45	; 69
    1246:	8b 87       	std	Y+11, r24	; 0x0b
    1248:	9c 87       	std	Y+12, r25	; 0x0c
    124a:	ad 87       	std	Y+13, r26	; 0x0d
    124c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    124e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1250:	7c 85       	ldd	r23, Y+12	; 0x0c
    1252:	8d 85       	ldd	r24, Y+13	; 0x0d
    1254:	9e 85       	ldd	r25, Y+14	; 0x0e
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	4a e7       	ldi	r20, 0x7A	; 122
    125c:	55 e4       	ldi	r21, 0x45	; 69
    125e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	8f 83       	std	Y+7, r24	; 0x07
    1268:	98 87       	std	Y+8, r25	; 0x08
    126a:	a9 87       	std	Y+9, r26	; 0x09
    126c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    126e:	6f 81       	ldd	r22, Y+7	; 0x07
    1270:	78 85       	ldd	r23, Y+8	; 0x08
    1272:	89 85       	ldd	r24, Y+9	; 0x09
    1274:	9a 85       	ldd	r25, Y+10	; 0x0a
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e8       	ldi	r20, 0x80	; 128
    127c:	5f e3       	ldi	r21, 0x3F	; 63
    127e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1282:	88 23       	and	r24, r24
    1284:	2c f4       	brge	.+10     	; 0x1290 <move_backward+0x9e>
		__ticks = 1;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9e 83       	std	Y+6, r25	; 0x06
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	3f c0       	rjmp	.+126    	; 0x130e <move_backward+0x11c>
	else if (__tmp > 65535)
    1290:	6f 81       	ldd	r22, Y+7	; 0x07
    1292:	78 85       	ldd	r23, Y+8	; 0x08
    1294:	89 85       	ldd	r24, Y+9	; 0x09
    1296:	9a 85       	ldd	r25, Y+10	; 0x0a
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	3f ef       	ldi	r19, 0xFF	; 255
    129c:	4f e7       	ldi	r20, 0x7F	; 127
    129e:	57 e4       	ldi	r21, 0x47	; 71
    12a0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    12a4:	18 16       	cp	r1, r24
    12a6:	4c f5       	brge	.+82     	; 0x12fa <move_backward+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e2       	ldi	r20, 0x20	; 32
    12b6:	51 e4       	ldi	r21, 0x41	; 65
    12b8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	bc 01       	movw	r22, r24
    12c2:	cd 01       	movw	r24, r26
    12c4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
    12d0:	0f c0       	rjmp	.+30     	; 0x12f0 <move_backward+0xfe>
    12d2:	80 e9       	ldi	r24, 0x90	; 144
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	9c 83       	std	Y+4, r25	; 0x04
    12d8:	8b 83       	std	Y+3, r24	; 0x03
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	f1 f7       	brne	.-4      	; 0x12de <move_backward+0xec>
    12e2:	9c 83       	std	Y+4, r25	; 0x04
    12e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	9e 83       	std	Y+6, r25	; 0x06
    12ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	69 f7       	brne	.-38     	; 0x12d2 <move_backward+0xe0>
    12f8:	14 c0       	rjmp	.+40     	; 0x1322 <move_backward+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fa:	6f 81       	ldd	r22, Y+7	; 0x07
    12fc:	78 85       	ldd	r23, Y+8	; 0x08
    12fe:	89 85       	ldd	r24, Y+9	; 0x09
    1300:	9a 85       	ldd	r25, Y+10	; 0x0a
    1302:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 83       	std	Y+5, r24	; 0x05
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	9a 81       	ldd	r25, Y+2	; 0x02
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <move_backward+0x128>
    131e:	9a 83       	std	Y+2, r25	; 0x02
    1320:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(3000);
}
    1322:	2e 96       	adiw	r28, 0x0e	; 14
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <move_forward>:

void move_forward(void)
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	2e 97       	sbiw	r28, 0x0e	; 14
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
	//Rotate left motor backward
	PORTB &= ~(1<<Back_motor_A);
    1348:	a8 e3       	ldi	r26, 0x38	; 56
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e8 e3       	ldi	r30, 0x38	; 56
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	8b 7f       	andi	r24, 0xFB	; 251
    1354:	8c 93       	st	X, r24
	PORTB |= (1<<Back_motor_B);
    1356:	a8 e3       	ldi	r26, 0x38	; 56
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e8 e3       	ldi	r30, 0x38	; 56
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	88 60       	ori	r24, 0x08	; 8
    1362:	8c 93       	st	X, r24

	//Rotate right motor backward
	PORTB &= ~(1<<Front_motor_A);
    1364:	a8 e3       	ldi	r26, 0x38	; 56
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e8 e3       	ldi	r30, 0x38	; 56
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	8e 7f       	andi	r24, 0xFE	; 254
    1370:	8c 93       	st	X, r24
	PORTB &= ~(1<<Front_motor_B);
    1372:	a8 e3       	ldi	r26, 0x38	; 56
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e8 e3       	ldi	r30, 0x38	; 56
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8d 7f       	andi	r24, 0xFD	; 253
    137e:	8c 93       	st	X, r24
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	aa e7       	ldi	r26, 0x7A	; 122
    1386:	b4 e4       	ldi	r27, 0x44	; 68
    1388:	8b 87       	std	Y+11, r24	; 0x0b
    138a:	9c 87       	std	Y+12, r25	; 0x0c
    138c:	ad 87       	std	Y+13, r26	; 0x0d
    138e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1390:	6b 85       	ldd	r22, Y+11	; 0x0b
    1392:	7c 85       	ldd	r23, Y+12	; 0x0c
    1394:	8d 85       	ldd	r24, Y+13	; 0x0d
    1396:	9e 85       	ldd	r25, Y+14	; 0x0e
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	4a e7       	ldi	r20, 0x7A	; 122
    139e:	55 e4       	ldi	r21, 0x45	; 69
    13a0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	8f 83       	std	Y+7, r24	; 0x07
    13aa:	98 87       	std	Y+8, r25	; 0x08
    13ac:	a9 87       	std	Y+9, r26	; 0x09
    13ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13b0:	6f 81       	ldd	r22, Y+7	; 0x07
    13b2:	78 85       	ldd	r23, Y+8	; 0x08
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e8       	ldi	r20, 0x80	; 128
    13be:	5f e3       	ldi	r21, 0x3F	; 63
    13c0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    13c4:	88 23       	and	r24, r24
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <move_forward+0x9e>
		__ticks = 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	8d 83       	std	Y+5, r24	; 0x05
    13d0:	3f c0       	rjmp	.+126    	; 0x1450 <move_forward+0x11c>
	else if (__tmp > 65535)
    13d2:	6f 81       	ldd	r22, Y+7	; 0x07
    13d4:	78 85       	ldd	r23, Y+8	; 0x08
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	4f e7       	ldi	r20, 0x7F	; 127
    13e0:	57 e4       	ldi	r21, 0x47	; 71
    13e2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	4c f5       	brge	.+82     	; 0x143c <move_forward+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e2       	ldi	r20, 0x20	; 32
    13f8:	51 e4       	ldi	r21, 0x41	; 65
    13fa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	bc 01       	movw	r22, r24
    1404:	cd 01       	movw	r24, r26
    1406:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	0f c0       	rjmp	.+30     	; 0x1432 <move_forward+0xfe>
    1414:	80 e9       	ldi	r24, 0x90	; 144
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	8b 83       	std	Y+3, r24	; 0x03
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	9c 81       	ldd	r25, Y+4	; 0x04
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <move_forward+0xec>
    1424:	9c 83       	std	Y+4, r25	; 0x04
    1426:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	9e 83       	std	Y+6, r25	; 0x06
    1430:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	9e 81       	ldd	r25, Y+6	; 0x06
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	69 f7       	brne	.-38     	; 0x1414 <move_forward+0xe0>
    143a:	14 c0       	rjmp	.+40     	; 0x1464 <move_forward+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143c:	6f 81       	ldd	r22, Y+7	; 0x07
    143e:	78 85       	ldd	r23, Y+8	; 0x08
    1440:	89 85       	ldd	r24, Y+9	; 0x09
    1442:	9a 85       	ldd	r25, Y+10	; 0x0a
    1444:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 83       	std	Y+5, r24	; 0x05
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	9a 81       	ldd	r25, Y+2	; 0x02
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <move_forward+0x128>
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);
}
    1464:	2e 96       	adiw	r28, 0x0e	; 14
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <stop_motors>:

void stop_motors(void)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	2e 97       	sbiw	r28, 0x0e	; 14
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
	//Stop left motor
	PORTB &= ~(1<<Back_motor_A);
    148a:	a8 e3       	ldi	r26, 0x38	; 56
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e8 e3       	ldi	r30, 0x38	; 56
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	8b 7f       	andi	r24, 0xFB	; 251
    1496:	8c 93       	st	X, r24
	PORTB &= ~(1<<Back_motor_B);
    1498:	a8 e3       	ldi	r26, 0x38	; 56
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e8 e3       	ldi	r30, 0x38	; 56
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	87 7f       	andi	r24, 0xF7	; 247
    14a4:	8c 93       	st	X, r24

	//Stop right motor
	PORTB &= ~(1<<Front_motor_A);
    14a6:	a8 e3       	ldi	r26, 0x38	; 56
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e8 e3       	ldi	r30, 0x38	; 56
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	8e 7f       	andi	r24, 0xFE	; 254
    14b2:	8c 93       	st	X, r24
	PORTB &= ~(1<<Front_motor_B);
    14b4:	a8 e3       	ldi	r26, 0x38	; 56
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e8 e3       	ldi	r30, 0x38	; 56
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	8d 7f       	andi	r24, 0xFD	; 253
    14c0:	8c 93       	st	X, r24
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	aa e7       	ldi	r26, 0x7A	; 122
    14c8:	b4 e4       	ldi	r27, 0x44	; 68
    14ca:	8b 87       	std	Y+11, r24	; 0x0b
    14cc:	9c 87       	std	Y+12, r25	; 0x0c
    14ce:	ad 87       	std	Y+13, r26	; 0x0d
    14d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	4a e7       	ldi	r20, 0x7A	; 122
    14e0:	55 e4       	ldi	r21, 0x45	; 69
    14e2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	8f 83       	std	Y+7, r24	; 0x07
    14ec:	98 87       	std	Y+8, r25	; 0x08
    14ee:	a9 87       	std	Y+9, r26	; 0x09
    14f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14f2:	6f 81       	ldd	r22, Y+7	; 0x07
    14f4:	78 85       	ldd	r23, Y+8	; 0x08
    14f6:	89 85       	ldd	r24, Y+9	; 0x09
    14f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e8       	ldi	r20, 0x80	; 128
    1500:	5f e3       	ldi	r21, 0x3F	; 63
    1502:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1506:	88 23       	and	r24, r24
    1508:	2c f4       	brge	.+10     	; 0x1514 <stop_motors+0x9e>
		__ticks = 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9e 83       	std	Y+6, r25	; 0x06
    1510:	8d 83       	std	Y+5, r24	; 0x05
    1512:	3f c0       	rjmp	.+126    	; 0x1592 <stop_motors+0x11c>
	else if (__tmp > 65535)
    1514:	6f 81       	ldd	r22, Y+7	; 0x07
    1516:	78 85       	ldd	r23, Y+8	; 0x08
    1518:	89 85       	ldd	r24, Y+9	; 0x09
    151a:	9a 85       	ldd	r25, Y+10	; 0x0a
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	3f ef       	ldi	r19, 0xFF	; 255
    1520:	4f e7       	ldi	r20, 0x7F	; 127
    1522:	57 e4       	ldi	r21, 0x47	; 71
    1524:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1528:	18 16       	cp	r1, r24
    152a:	4c f5       	brge	.+82     	; 0x157e <stop_motors+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152c:	6b 85       	ldd	r22, Y+11	; 0x0b
    152e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1530:	8d 85       	ldd	r24, Y+13	; 0x0d
    1532:	9e 85       	ldd	r25, Y+14	; 0x0e
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e2       	ldi	r20, 0x20	; 32
    153a:	51 e4       	ldi	r21, 0x41	; 65
    153c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	9e 83       	std	Y+6, r25	; 0x06
    1552:	8d 83       	std	Y+5, r24	; 0x05
    1554:	0f c0       	rjmp	.+30     	; 0x1574 <stop_motors+0xfe>
    1556:	80 e9       	ldi	r24, 0x90	; 144
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <stop_motors+0xec>
    1566:	9c 83       	std	Y+4, r25	; 0x04
    1568:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	69 f7       	brne	.-38     	; 0x1556 <stop_motors+0xe0>
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <stop_motors+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157e:	6f 81       	ldd	r22, Y+7	; 0x07
    1580:	78 85       	ldd	r23, Y+8	; 0x08
    1582:	89 85       	ldd	r24, Y+9	; 0x09
    1584:	9a 85       	ldd	r25, Y+10	; 0x0a
    1586:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	9e 83       	std	Y+6, r25	; 0x06
    1590:	8d 83       	std	Y+5, r24	; 0x05
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	9a 81       	ldd	r25, Y+2	; 0x02
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <stop_motors+0x128>
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);
}
    15a6:	2e 96       	adiw	r28, 0x0e	; 14
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <LCD_send_command>:
#include <avr/io.h>
#include <util/delay.h>
#include "STDMACROS.h"
#include "LCD.h"
void LCD_send_command(unsigned char cmd)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	a7 97       	sbiw	r28, 0x27	; 39
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	8f a3       	std	Y+39, r24	; 0x27
	LCD_DATA_PORT = cmd;
    15ce:	eb e3       	ldi	r30, 0x3B	; 59
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	8f a1       	ldd	r24, Y+39	; 0x27
    15d4:	80 83       	st	Z, r24
	clearbit(LCD_control_PORT,RS);
    15d6:	a8 e3       	ldi	r26, 0x38	; 56
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e8 e3       	ldi	r30, 0x38	; 56
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	8d 7f       	andi	r24, 0xFD	; 253
    15e2:	8c 93       	st	X, r24
	clearbit(LCD_control_PORT,RW);
    15e4:	a8 e3       	ldi	r26, 0x38	; 56
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e8 e3       	ldi	r30, 0x38	; 56
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8b 7f       	andi	r24, 0xFB	; 251
    15f0:	8c 93       	st	X, r24
	setbit(LCD_control_PORT,EN);
    15f2:	a8 e3       	ldi	r26, 0x38	; 56
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e8 e3       	ldi	r30, 0x38	; 56
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	88 60       	ori	r24, 0x08	; 8
    15fe:	8c 93       	st	X, r24
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a0 e8       	ldi	r26, 0x80	; 128
    1606:	bf e3       	ldi	r27, 0x3F	; 63
    1608:	8b a3       	std	Y+35, r24	; 0x23
    160a:	9c a3       	std	Y+36, r25	; 0x24
    160c:	ad a3       	std	Y+37, r26	; 0x25
    160e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1610:	6b a1       	ldd	r22, Y+35	; 0x23
    1612:	7c a1       	ldd	r23, Y+36	; 0x24
    1614:	8d a1       	ldd	r24, Y+37	; 0x25
    1616:	9e a1       	ldd	r25, Y+38	; 0x26
    1618:	2b ea       	ldi	r18, 0xAB	; 171
    161a:	3a ea       	ldi	r19, 0xAA	; 170
    161c:	4a ea       	ldi	r20, 0xAA	; 170
    161e:	50 e4       	ldi	r21, 0x40	; 64
    1620:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	8f 8f       	std	Y+31, r24	; 0x1f
    162a:	98 a3       	std	Y+32, r25	; 0x20
    162c:	a9 a3       	std	Y+33, r26	; 0x21
    162e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1630:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1632:	78 a1       	ldd	r23, Y+32	; 0x20
    1634:	89 a1       	ldd	r24, Y+33	; 0x21
    1636:	9a a1       	ldd	r25, Y+34	; 0x22
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1644:	88 23       	and	r24, r24
    1646:	1c f4       	brge	.+6      	; 0x164e <LCD_send_command+0x96>
		__ticks = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	8e 8f       	std	Y+30, r24	; 0x1e
    164c:	91 c0       	rjmp	.+290    	; 0x1770 <LCD_send_command+0x1b8>
	else if (__tmp > 255)
    164e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1650:	78 a1       	ldd	r23, Y+32	; 0x20
    1652:	89 a1       	ldd	r24, Y+33	; 0x21
    1654:	9a a1       	ldd	r25, Y+34	; 0x22
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	4f e7       	ldi	r20, 0x7F	; 127
    165c:	53 e4       	ldi	r21, 0x43	; 67
    165e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1662:	18 16       	cp	r1, r24
    1664:	0c f0       	brlt	.+2      	; 0x1668 <LCD_send_command+0xb0>
    1666:	7b c0       	rjmp	.+246    	; 0x175e <LCD_send_command+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1668:	6b a1       	ldd	r22, Y+35	; 0x23
    166a:	7c a1       	ldd	r23, Y+36	; 0x24
    166c:	8d a1       	ldd	r24, Y+37	; 0x25
    166e:	9e a1       	ldd	r25, Y+38	; 0x26
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	4a e7       	ldi	r20, 0x7A	; 122
    1676:	54 e4       	ldi	r21, 0x44	; 68
    1678:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	8a 8f       	std	Y+26, r24	; 0x1a
    1682:	9b 8f       	std	Y+27, r25	; 0x1b
    1684:	ac 8f       	std	Y+28, r26	; 0x1c
    1686:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	6a 8d       	ldd	r22, Y+26	; 0x1a
    168a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    168c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    168e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a e7       	ldi	r20, 0x7A	; 122
    1696:	55 e4       	ldi	r21, 0x45	; 69
    1698:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8e 8b       	std	Y+22, r24	; 0x16
    16a2:	9f 8b       	std	Y+23, r25	; 0x17
    16a4:	a8 8f       	std	Y+24, r26	; 0x18
    16a6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    16a8:	6e 89       	ldd	r22, Y+22	; 0x16
    16aa:	7f 89       	ldd	r23, Y+23	; 0x17
    16ac:	88 8d       	ldd	r24, Y+24	; 0x18
    16ae:	99 8d       	ldd	r25, Y+25	; 0x19
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <LCD_send_command+0x112>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9d 8b       	std	Y+21, r25	; 0x15
    16c6:	8c 8b       	std	Y+20, r24	; 0x14
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <LCD_send_command+0x190>
	else if (__tmp > 65535)
    16ca:	6e 89       	ldd	r22, Y+22	; 0x16
    16cc:	7f 89       	ldd	r23, Y+23	; 0x17
    16ce:	88 8d       	ldd	r24, Y+24	; 0x18
    16d0:	99 8d       	ldd	r25, Y+25	; 0x19
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <LCD_send_command+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    16e4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    16e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9d 8b       	std	Y+21, r25	; 0x15
    1708:	8c 8b       	std	Y+20, r24	; 0x14
    170a:	0f c0       	rjmp	.+30     	; 0x172a <LCD_send_command+0x172>
    170c:	80 e9       	ldi	r24, 0x90	; 144
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	9b 8b       	std	Y+19, r25	; 0x13
    1712:	8a 8b       	std	Y+18, r24	; 0x12
    1714:	8a 89       	ldd	r24, Y+18	; 0x12
    1716:	9b 89       	ldd	r25, Y+19	; 0x13
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_send_command+0x160>
    171c:	9b 8b       	std	Y+19, r25	; 0x13
    171e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8c 89       	ldd	r24, Y+20	; 0x14
    1722:	9d 89       	ldd	r25, Y+21	; 0x15
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9d 8b       	std	Y+21, r25	; 0x15
    1728:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8c 89       	ldd	r24, Y+20	; 0x14
    172c:	9d 89       	ldd	r25, Y+21	; 0x15
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <LCD_send_command+0x154>
    1732:	24 c0       	rjmp	.+72     	; 0x177c <LCD_send_command+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	6e 89       	ldd	r22, Y+22	; 0x16
    1736:	7f 89       	ldd	r23, Y+23	; 0x17
    1738:	88 8d       	ldd	r24, Y+24	; 0x18
    173a:	99 8d       	ldd	r25, Y+25	; 0x19
    173c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9d 8b       	std	Y+21, r25	; 0x15
    1746:	8c 8b       	std	Y+20, r24	; 0x14
    1748:	8c 89       	ldd	r24, Y+20	; 0x14
    174a:	9d 89       	ldd	r25, Y+21	; 0x15
    174c:	99 8b       	std	Y+17, r25	; 0x11
    174e:	88 8b       	std	Y+16, r24	; 0x10
    1750:	88 89       	ldd	r24, Y+16	; 0x10
    1752:	99 89       	ldd	r25, Y+17	; 0x11
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <LCD_send_command+0x19c>
    1758:	99 8b       	std	Y+17, r25	; 0x11
    175a:	88 8b       	std	Y+16, r24	; 0x10
    175c:	0f c0       	rjmp	.+30     	; 0x177c <LCD_send_command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    175e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1760:	78 a1       	ldd	r23, Y+32	; 0x20
    1762:	89 a1       	ldd	r24, Y+33	; 0x21
    1764:	9a a1       	ldd	r25, Y+34	; 0x22
    1766:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	8e 8f       	std	Y+30, r24	; 0x1e
    1770:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1772:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1774:	8f 85       	ldd	r24, Y+15	; 0x0f
    1776:	8a 95       	dec	r24
    1778:	f1 f7       	brne	.-4      	; 0x1776 <LCD_send_command+0x1be>
    177a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	clearbit(LCD_control_PORT,EN);
    177c:	a8 e3       	ldi	r26, 0x38	; 56
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e8 e3       	ldi	r30, 0x38	; 56
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	87 7f       	andi	r24, 0xF7	; 247
    1788:	8c 93       	st	X, r24
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a0 e4       	ldi	r26, 0x40	; 64
    1790:	b0 e4       	ldi	r27, 0x40	; 64
    1792:	8b 87       	std	Y+11, r24	; 0x0b
    1794:	9c 87       	std	Y+12, r25	; 0x0c
    1796:	ad 87       	std	Y+13, r26	; 0x0d
    1798:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179a:	6b 85       	ldd	r22, Y+11	; 0x0b
    179c:	7c 85       	ldd	r23, Y+12	; 0x0c
    179e:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	4a e7       	ldi	r20, 0x7A	; 122
    17a8:	55 e4       	ldi	r21, 0x45	; 69
    17aa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	8f 83       	std	Y+7, r24	; 0x07
    17b4:	98 87       	std	Y+8, r25	; 0x08
    17b6:	a9 87       	std	Y+9, r26	; 0x09
    17b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ba:	6f 81       	ldd	r22, Y+7	; 0x07
    17bc:	78 85       	ldd	r23, Y+8	; 0x08
    17be:	89 85       	ldd	r24, Y+9	; 0x09
    17c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f e3       	ldi	r21, 0x3F	; 63
    17ca:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    17ce:	88 23       	and	r24, r24
    17d0:	2c f4       	brge	.+10     	; 0x17dc <LCD_send_command+0x224>
		__ticks = 1;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	8d 83       	std	Y+5, r24	; 0x05
    17da:	3f c0       	rjmp	.+126    	; 0x185a <LCD_send_command+0x2a2>
	else if (__tmp > 65535)
    17dc:	6f 81       	ldd	r22, Y+7	; 0x07
    17de:	78 85       	ldd	r23, Y+8	; 0x08
    17e0:	89 85       	ldd	r24, Y+9	; 0x09
    17e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 e4       	ldi	r21, 0x47	; 71
    17ec:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    17f0:	18 16       	cp	r1, r24
    17f2:	4c f5       	brge	.+82     	; 0x1846 <LCD_send_command+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9e 83       	std	Y+6, r25	; 0x06
    181a:	8d 83       	std	Y+5, r24	; 0x05
    181c:	0f c0       	rjmp	.+30     	; 0x183c <LCD_send_command+0x284>
    181e:	80 e9       	ldi	r24, 0x90	; 144
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	9c 83       	std	Y+4, r25	; 0x04
    1824:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <LCD_send_command+0x272>
    182e:	9c 83       	std	Y+4, r25	; 0x04
    1830:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	9e 81       	ldd	r25, Y+6	; 0x06
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	69 f7       	brne	.-38     	; 0x181e <LCD_send_command+0x266>
    1844:	14 c0       	rjmp	.+40     	; 0x186e <LCD_send_command+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1846:	6f 81       	ldd	r22, Y+7	; 0x07
    1848:	78 85       	ldd	r23, Y+8	; 0x08
    184a:	89 85       	ldd	r24, Y+9	; 0x09
    184c:	9a 85       	ldd	r25, Y+10	; 0x0a
    184e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	9e 83       	std	Y+6, r25	; 0x06
    1858:	8d 83       	std	Y+5, r24	; 0x05
    185a:	8d 81       	ldd	r24, Y+5	; 0x05
    185c:	9e 81       	ldd	r25, Y+6	; 0x06
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <LCD_send_command+0x2ae>
    186a:	9a 83       	std	Y+2, r25	; 0x02
    186c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    186e:	a7 96       	adiw	r28, 0x27	; 39
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <LCD_send_data>:
void LCD_send_data(unsigned char data)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	a7 97       	sbiw	r28, 0x27	; 39
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	8f a3       	std	Y+39, r24	; 0x27
	LCD_DATA_PORT = data ;
    1896:	eb e3       	ldi	r30, 0x3B	; 59
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	8f a1       	ldd	r24, Y+39	; 0x27
    189c:	80 83       	st	Z, r24
	setbit(LCD_control_PORT,RS);
    189e:	a8 e3       	ldi	r26, 0x38	; 56
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e8 e3       	ldi	r30, 0x38	; 56
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	82 60       	ori	r24, 0x02	; 2
    18aa:	8c 93       	st	X, r24
	clearbit(LCD_control_PORT,RW);
    18ac:	a8 e3       	ldi	r26, 0x38	; 56
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e8 e3       	ldi	r30, 0x38	; 56
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	8b 7f       	andi	r24, 0xFB	; 251
    18b8:	8c 93       	st	X, r24
	setbit(LCD_control_PORT,EN);
    18ba:	a8 e3       	ldi	r26, 0x38	; 56
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e8 e3       	ldi	r30, 0x38	; 56
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	88 60       	ori	r24, 0x08	; 8
    18c6:	8c 93       	st	X, r24
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a0 e8       	ldi	r26, 0x80	; 128
    18ce:	bf e3       	ldi	r27, 0x3F	; 63
    18d0:	8b a3       	std	Y+35, r24	; 0x23
    18d2:	9c a3       	std	Y+36, r25	; 0x24
    18d4:	ad a3       	std	Y+37, r26	; 0x25
    18d6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18d8:	6b a1       	ldd	r22, Y+35	; 0x23
    18da:	7c a1       	ldd	r23, Y+36	; 0x24
    18dc:	8d a1       	ldd	r24, Y+37	; 0x25
    18de:	9e a1       	ldd	r25, Y+38	; 0x26
    18e0:	2b ea       	ldi	r18, 0xAB	; 171
    18e2:	3a ea       	ldi	r19, 0xAA	; 170
    18e4:	4a ea       	ldi	r20, 0xAA	; 170
    18e6:	50 e4       	ldi	r21, 0x40	; 64
    18e8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	8f 8f       	std	Y+31, r24	; 0x1f
    18f2:	98 a3       	std	Y+32, r25	; 0x20
    18f4:	a9 a3       	std	Y+33, r26	; 0x21
    18f6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    18f8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18fa:	78 a1       	ldd	r23, Y+32	; 0x20
    18fc:	89 a1       	ldd	r24, Y+33	; 0x21
    18fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e8       	ldi	r20, 0x80	; 128
    1906:	5f e3       	ldi	r21, 0x3F	; 63
    1908:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    190c:	88 23       	and	r24, r24
    190e:	1c f4       	brge	.+6      	; 0x1916 <LCD_send_data+0x96>
		__ticks = 1;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	8e 8f       	std	Y+30, r24	; 0x1e
    1914:	91 c0       	rjmp	.+290    	; 0x1a38 <LCD_send_data+0x1b8>
	else if (__tmp > 255)
    1916:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1918:	78 a1       	ldd	r23, Y+32	; 0x20
    191a:	89 a1       	ldd	r24, Y+33	; 0x21
    191c:	9a a1       	ldd	r25, Y+34	; 0x22
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	4f e7       	ldi	r20, 0x7F	; 127
    1924:	53 e4       	ldi	r21, 0x43	; 67
    1926:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    192a:	18 16       	cp	r1, r24
    192c:	0c f0       	brlt	.+2      	; 0x1930 <LCD_send_data+0xb0>
    192e:	7b c0       	rjmp	.+246    	; 0x1a26 <LCD_send_data+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1930:	6b a1       	ldd	r22, Y+35	; 0x23
    1932:	7c a1       	ldd	r23, Y+36	; 0x24
    1934:	8d a1       	ldd	r24, Y+37	; 0x25
    1936:	9e a1       	ldd	r25, Y+38	; 0x26
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	4a e7       	ldi	r20, 0x7A	; 122
    193e:	54 e4       	ldi	r21, 0x44	; 68
    1940:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	8a 8f       	std	Y+26, r24	; 0x1a
    194a:	9b 8f       	std	Y+27, r25	; 0x1b
    194c:	ac 8f       	std	Y+28, r26	; 0x1c
    194e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1950:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1952:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1954:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1956:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	4a e7       	ldi	r20, 0x7A	; 122
    195e:	55 e4       	ldi	r21, 0x45	; 69
    1960:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8e 8b       	std	Y+22, r24	; 0x16
    196a:	9f 8b       	std	Y+23, r25	; 0x17
    196c:	a8 8f       	std	Y+24, r26	; 0x18
    196e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1970:	6e 89       	ldd	r22, Y+22	; 0x16
    1972:	7f 89       	ldd	r23, Y+23	; 0x17
    1974:	88 8d       	ldd	r24, Y+24	; 0x18
    1976:	99 8d       	ldd	r25, Y+25	; 0x19
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1984:	88 23       	and	r24, r24
    1986:	2c f4       	brge	.+10     	; 0x1992 <LCD_send_data+0x112>
		__ticks = 1;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9d 8b       	std	Y+21, r25	; 0x15
    198e:	8c 8b       	std	Y+20, r24	; 0x14
    1990:	3f c0       	rjmp	.+126    	; 0x1a10 <LCD_send_data+0x190>
	else if (__tmp > 65535)
    1992:	6e 89       	ldd	r22, Y+22	; 0x16
    1994:	7f 89       	ldd	r23, Y+23	; 0x17
    1996:	88 8d       	ldd	r24, Y+24	; 0x18
    1998:	99 8d       	ldd	r25, Y+25	; 0x19
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	3f ef       	ldi	r19, 0xFF	; 255
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	57 e4       	ldi	r21, 0x47	; 71
    19a2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	4c f5       	brge	.+82     	; 0x19fc <LCD_send_data+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19ac:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19b0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e2       	ldi	r20, 0x20	; 32
    19b8:	51 e4       	ldi	r21, 0x41	; 65
    19ba:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9d 8b       	std	Y+21, r25	; 0x15
    19d0:	8c 8b       	std	Y+20, r24	; 0x14
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <LCD_send_data+0x172>
    19d4:	80 e9       	ldi	r24, 0x90	; 144
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	9b 8b       	std	Y+19, r25	; 0x13
    19da:	8a 8b       	std	Y+18, r24	; 0x12
    19dc:	8a 89       	ldd	r24, Y+18	; 0x12
    19de:	9b 89       	ldd	r25, Y+19	; 0x13
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_send_data+0x160>
    19e4:	9b 8b       	std	Y+19, r25	; 0x13
    19e6:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	8c 89       	ldd	r24, Y+20	; 0x14
    19ea:	9d 89       	ldd	r25, Y+21	; 0x15
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	9d 8b       	std	Y+21, r25	; 0x15
    19f0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	8c 89       	ldd	r24, Y+20	; 0x14
    19f4:	9d 89       	ldd	r25, Y+21	; 0x15
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <LCD_send_data+0x154>
    19fa:	24 c0       	rjmp	.+72     	; 0x1a44 <LCD_send_data+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	6e 89       	ldd	r22, Y+22	; 0x16
    19fe:	7f 89       	ldd	r23, Y+23	; 0x17
    1a00:	88 8d       	ldd	r24, Y+24	; 0x18
    1a02:	99 8d       	ldd	r25, Y+25	; 0x19
    1a04:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9d 8b       	std	Y+21, r25	; 0x15
    1a0e:	8c 8b       	std	Y+20, r24	; 0x14
    1a10:	8c 89       	ldd	r24, Y+20	; 0x14
    1a12:	9d 89       	ldd	r25, Y+21	; 0x15
    1a14:	99 8b       	std	Y+17, r25	; 0x11
    1a16:	88 8b       	std	Y+16, r24	; 0x10
    1a18:	88 89       	ldd	r24, Y+16	; 0x10
    1a1a:	99 89       	ldd	r25, Y+17	; 0x11
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_send_data+0x19c>
    1a20:	99 8b       	std	Y+17, r25	; 0x11
    1a22:	88 8b       	std	Y+16, r24	; 0x10
    1a24:	0f c0       	rjmp	.+30     	; 0x1a44 <LCD_send_data+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a26:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a28:	78 a1       	ldd	r23, Y+32	; 0x20
    1a2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a2e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8e 8f       	std	Y+30, r24	; 0x1e
    1a38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a3a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a3e:	8a 95       	dec	r24
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_send_data+0x1be>
    1a42:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	clearbit(LCD_control_PORT,EN);
    1a44:	a8 e3       	ldi	r26, 0x38	; 56
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e8 e3       	ldi	r30, 0x38	; 56
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	87 7f       	andi	r24, 0xF7	; 247
    1a50:	8c 93       	st	X, r24
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a0 e8       	ldi	r26, 0x80	; 128
    1a58:	bf e3       	ldi	r27, 0x3F	; 63
    1a5a:	8b 87       	std	Y+11, r24	; 0x0b
    1a5c:	9c 87       	std	Y+12, r25	; 0x0c
    1a5e:	ad 87       	std	Y+13, r26	; 0x0d
    1a60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a e7       	ldi	r20, 0x7A	; 122
    1a70:	55 e4       	ldi	r21, 0x45	; 69
    1a72:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8f 83       	std	Y+7, r24	; 0x07
    1a7c:	98 87       	std	Y+8, r25	; 0x08
    1a7e:	a9 87       	std	Y+9, r26	; 0x09
    1a80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a82:	6f 81       	ldd	r22, Y+7	; 0x07
    1a84:	78 85       	ldd	r23, Y+8	; 0x08
    1a86:	89 85       	ldd	r24, Y+9	; 0x09
    1a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	5f e3       	ldi	r21, 0x3F	; 63
    1a92:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1a96:	88 23       	and	r24, r24
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <LCD_send_data+0x224>
		__ticks = 1;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	3f c0       	rjmp	.+126    	; 0x1b22 <LCD_send_data+0x2a2>
	else if (__tmp > 65535)
    1aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa6:	78 85       	ldd	r23, Y+8	; 0x08
    1aa8:	89 85       	ldd	r24, Y+9	; 0x09
    1aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	3f ef       	ldi	r19, 0xFF	; 255
    1ab0:	4f e7       	ldi	r20, 0x7F	; 127
    1ab2:	57 e4       	ldi	r21, 0x47	; 71
    1ab4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1ab8:	18 16       	cp	r1, r24
    1aba:	4c f5       	brge	.+82     	; 0x1b0e <LCD_send_data+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e2       	ldi	r20, 0x20	; 32
    1aca:	51 e4       	ldi	r21, 0x41	; 65
    1acc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <LCD_send_data+0x284>
    1ae6:	80 e9       	ldi	r24, 0x90	; 144
    1ae8:	91 e0       	ldi	r25, 0x01	; 1
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	9c 81       	ldd	r25, Y+4	; 0x04
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_send_data+0x272>
    1af6:	9c 83       	std	Y+4, r25	; 0x04
    1af8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	9e 81       	ldd	r25, Y+6	; 0x06
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	69 f7       	brne	.-38     	; 0x1ae6 <LCD_send_data+0x266>
    1b0c:	14 c0       	rjmp	.+40     	; 0x1b36 <LCD_send_data+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <LCD_send_data+0x2ae>
    1b32:	9a 83       	std	Y+2, r25	; 0x02
    1b34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1b36:	a7 96       	adiw	r28, 0x27	; 39
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <LCD_INIT>:
void LCD_INIT(void)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	2e 97       	sbiw	r28, 0x0e	; 14
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
	LCD_DATA_DIR =0xff;
    1b5c:	ea e3       	ldi	r30, 0x3A	; 58
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	8f ef       	ldi	r24, 0xFF	; 255
    1b62:	80 83       	st	Z, r24
	setbit(LCD_control_DIR,EN);
    1b64:	a7 e3       	ldi	r26, 0x37	; 55
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e7 e3       	ldi	r30, 0x37	; 55
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	88 60       	ori	r24, 0x08	; 8
    1b70:	8c 93       	st	X, r24
	setbit(LCD_control_DIR,RS);
    1b72:	a7 e3       	ldi	r26, 0x37	; 55
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e7 e3       	ldi	r30, 0x37	; 55
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	82 60       	ori	r24, 0x02	; 2
    1b7e:	8c 93       	st	X, r24
	setbit(LCD_control_DIR,RW);
    1b80:	a7 e3       	ldi	r26, 0x37	; 55
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e7 e3       	ldi	r30, 0x37	; 55
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	84 60       	ori	r24, 0x04	; 4
    1b8c:	8c 93       	st	X, r24
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a0 ea       	ldi	r26, 0xA0	; 160
    1b94:	b1 e4       	ldi	r27, 0x41	; 65
    1b96:	8b 87       	std	Y+11, r24	; 0x0b
    1b98:	9c 87       	std	Y+12, r25	; 0x0c
    1b9a:	ad 87       	std	Y+13, r26	; 0x0d
    1b9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	4a e7       	ldi	r20, 0x7A	; 122
    1bac:	55 e4       	ldi	r21, 0x45	; 69
    1bae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	8f 83       	std	Y+7, r24	; 0x07
    1bb8:	98 87       	std	Y+8, r25	; 0x08
    1bba:	a9 87       	std	Y+9, r26	; 0x09
    1bbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc0:	78 85       	ldd	r23, Y+8	; 0x08
    1bc2:	89 85       	ldd	r24, Y+9	; 0x09
    1bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e8       	ldi	r20, 0x80	; 128
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1bd2:	88 23       	and	r24, r24
    1bd4:	2c f4       	brge	.+10     	; 0x1be0 <LCD_INIT+0x98>
		__ticks = 1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
    1bde:	3f c0       	rjmp	.+126    	; 0x1c5e <LCD_INIT+0x116>
	else if (__tmp > 65535)
    1be0:	6f 81       	ldd	r22, Y+7	; 0x07
    1be2:	78 85       	ldd	r23, Y+8	; 0x08
    1be4:	89 85       	ldd	r24, Y+9	; 0x09
    1be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	3f ef       	ldi	r19, 0xFF	; 255
    1bec:	4f e7       	ldi	r20, 0x7F	; 127
    1bee:	57 e4       	ldi	r21, 0x47	; 71
    1bf0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1bf4:	18 16       	cp	r1, r24
    1bf6:	4c f5       	brge	.+82     	; 0x1c4a <LCD_INIT+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e2       	ldi	r20, 0x20	; 32
    1c06:	51 e4       	ldi	r21, 0x41	; 65
    1c08:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	bc 01       	movw	r22, r24
    1c12:	cd 01       	movw	r24, r26
    1c14:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
    1c20:	0f c0       	rjmp	.+30     	; 0x1c40 <LCD_INIT+0xf8>
    1c22:	80 e9       	ldi	r24, 0x90	; 144
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	9c 83       	std	Y+4, r25	; 0x04
    1c28:	8b 83       	std	Y+3, r24	; 0x03
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LCD_INIT+0xe6>
    1c32:	9c 83       	std	Y+4, r25	; 0x04
    1c34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c36:	8d 81       	ldd	r24, Y+5	; 0x05
    1c38:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	9e 81       	ldd	r25, Y+6	; 0x06
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	69 f7       	brne	.-38     	; 0x1c22 <LCD_INIT+0xda>
    1c48:	14 c0       	rjmp	.+40     	; 0x1c72 <LCD_INIT+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4c:	78 85       	ldd	r23, Y+8	; 0x08
    1c4e:	89 85       	ldd	r24, Y+9	; 0x09
    1c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c52:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	9e 83       	std	Y+6, r25	; 0x06
    1c5c:	8d 83       	std	Y+5, r24	; 0x05
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	9e 81       	ldd	r25, Y+6	; 0x06
    1c62:	9a 83       	std	Y+2, r25	; 0x02
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <LCD_INIT+0x122>
    1c6e:	9a 83       	std	Y+2, r25	; 0x02
    1c70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_send_command(0x38);// LCD in 8 bit mode 
    1c72:	88 e3       	ldi	r24, 0x38	; 56
    1c74:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_send_command>
	LCD_send_command(0x0C);// LCD DISPLY ON CURSER OFF 
    1c78:	8c e0       	ldi	r24, 0x0C	; 12
    1c7a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_send_command>
	LCD_send_command(0x06);// LCD AUTO INCRMENT 
    1c7e:	86 e0       	ldi	r24, 0x06	; 6
    1c80:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_send_command>
	LCD_send_command(0X01);// LCD CLEAR SCREAN 
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_send_command>
	LCD_send_command(0X80);// HOME POSITION 
    1c8a:	80 e8       	ldi	r24, 0x80	; 128
    1c8c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_send_command>
	
}
    1c90:	2e 96       	adiw	r28, 0x0e	; 14
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <LCD_send_string>:
void LCD_send_string( char* str)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <LCD_send_string+0x6>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <LCD_send_string+0x8>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	9c 83       	std	Y+4, r25	; 0x04
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
	int count =0;
    1cb2:	1a 82       	std	Y+2, r1	; 0x02
    1cb4:	19 82       	std	Y+1, r1	; 0x01
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <LCD_send_string+0x34>
	while(str[count]!=0)
	{
		LCD_send_data(str[count]);
    1cb8:	29 81       	ldd	r18, Y+1	; 0x01
    1cba:	3a 81       	ldd	r19, Y+2	; 0x02
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	e2 0f       	add	r30, r18
    1cc4:	f3 1f       	adc	r31, r19
    1cc6:	80 81       	ld	r24, Z
    1cc8:	0e 94 40 0c 	call	0x1880	; 0x1880 <LCD_send_data>
		count++;
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd0:	01 96       	adiw	r24, 0x01	; 1
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	89 83       	std	Y+1, r24	; 0x01
	
}
void LCD_send_string( char* str)
{
	int count =0;
	while(str[count]!=0)
    1cd6:	29 81       	ldd	r18, Y+1	; 0x01
    1cd8:	3a 81       	ldd	r19, Y+2	; 0x02
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	fc 01       	movw	r30, r24
    1ce0:	e2 0f       	add	r30, r18
    1ce2:	f3 1f       	adc	r31, r19
    1ce4:	80 81       	ld	r24, Z
    1ce6:	88 23       	and	r24, r24
    1ce8:	39 f7       	brne	.-50     	; 0x1cb8 <LCD_send_string+0x16>
	{
		LCD_send_data(str[count]);
		count++;
	}
}
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <LCD_send_data_4bit>:




void LCD_send_data_4bit(unsigned char data)
{
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	c7 55       	subi	r28, 0x57	; 87
    1d06:	d0 40       	sbci	r29, 0x00	; 0
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	fe 01       	movw	r30, r28
    1d14:	e9 5a       	subi	r30, 0xA9	; 169
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	80 83       	st	Z, r24
	LCD_DATA_PORT = (LCD_DATA_PORT &0x0f) |(data & 0xf0);//send high nibble
    1d1a:	ab e3       	ldi	r26, 0x3B	; 59
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	eb e3       	ldi	r30, 0x3B	; 59
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	98 2f       	mov	r25, r24
    1d26:	9f 70       	andi	r25, 0x0F	; 15
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e9 5a       	subi	r30, 0xA9	; 169
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	80 7f       	andi	r24, 0xF0	; 240
    1d32:	89 2b       	or	r24, r25
    1d34:	8c 93       	st	X, r24
	setbit(LCD_control_PORT,RS);
    1d36:	a8 e3       	ldi	r26, 0x38	; 56
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e8 e3       	ldi	r30, 0x38	; 56
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	82 60       	ori	r24, 0x02	; 2
    1d42:	8c 93       	st	X, r24
	clearbit(LCD_control_PORT,RW);
    1d44:	a8 e3       	ldi	r26, 0x38	; 56
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e8 e3       	ldi	r30, 0x38	; 56
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8b 7f       	andi	r24, 0xFB	; 251
    1d50:	8c 93       	st	X, r24
	setbit(LCD_control_PORT,EN);
    1d52:	a8 e3       	ldi	r26, 0x38	; 56
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e8 e3       	ldi	r30, 0x38	; 56
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	88 60       	ori	r24, 0x08	; 8
    1d5e:	8c 93       	st	X, r24
    1d60:	fe 01       	movw	r30, r28
    1d62:	ed 5a       	subi	r30, 0xAD	; 173
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a0 e8       	ldi	r26, 0x80	; 128
    1d6c:	bf e3       	ldi	r27, 0x3F	; 63
    1d6e:	80 83       	st	Z, r24
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	a2 83       	std	Z+2, r26	; 0x02
    1d74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d76:	8e 01       	movw	r16, r28
    1d78:	01 5b       	subi	r16, 0xB1	; 177
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ed 5a       	subi	r30, 0xAD	; 173
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	2b ea       	ldi	r18, 0xAB	; 171
    1d8c:	3a ea       	ldi	r19, 0xAA	; 170
    1d8e:	4a ea       	ldi	r20, 0xAA	; 170
    1d90:	50 e4       	ldi	r21, 0x40	; 64
    1d92:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	80 83       	st	Z, r24
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	a2 83       	std	Z+2, r26	; 0x02
    1da2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da4:	fe 01       	movw	r30, r28
    1da6:	e1 5b       	subi	r30, 0xB1	; 177
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	60 81       	ld	r22, Z
    1dac:	71 81       	ldd	r23, Z+1	; 0x01
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	93 81       	ldd	r25, Z+3	; 0x03
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	34 f4       	brge	.+12     	; 0x1dce <LCD_send_data_4bit+0xd6>
		__ticks = 1;
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e2 5b       	subi	r30, 0xB2	; 178
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	80 83       	st	Z, r24
    1dcc:	e0 c0       	rjmp	.+448    	; 0x1f8e <LCD_send_data_4bit+0x296>
	else if (__tmp > 255)
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e1 5b       	subi	r30, 0xB1	; 177
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	53 e4       	ldi	r21, 0x43	; 67
    1de4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	0c f0       	brlt	.+2      	; 0x1dee <LCD_send_data_4bit+0xf6>
    1dec:	c0 c0       	rjmp	.+384    	; 0x1f6e <LCD_send_data_4bit+0x276>
	{
		_delay_ms(__us / 1000.0);
    1dee:	fe 01       	movw	r30, r28
    1df0:	ed 5a       	subi	r30, 0xAD	; 173
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	60 81       	ld	r22, Z
    1df6:	71 81       	ldd	r23, Z+1	; 0x01
    1df8:	82 81       	ldd	r24, Z+2	; 0x02
    1dfa:	93 81       	ldd	r25, Z+3	; 0x03
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	4a e7       	ldi	r20, 0x7A	; 122
    1e02:	54 e4       	ldi	r21, 0x44	; 68
    1e04:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e6 5b       	subi	r30, 0xB6	; 182
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 83       	st	Z, r24
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	a2 83       	std	Z+2, r26	; 0x02
    1e18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1a:	8e 01       	movw	r16, r28
    1e1c:	0a 5b       	subi	r16, 0xBA	; 186
    1e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e20:	fe 01       	movw	r30, r28
    1e22:	e6 5b       	subi	r30, 0xB6	; 182
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	60 81       	ld	r22, Z
    1e28:	71 81       	ldd	r23, Z+1	; 0x01
    1e2a:	82 81       	ldd	r24, Z+2	; 0x02
    1e2c:	93 81       	ldd	r25, Z+3	; 0x03
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a e7       	ldi	r20, 0x7A	; 122
    1e34:	55 e4       	ldi	r21, 0x45	; 69
    1e36:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	f8 01       	movw	r30, r16
    1e40:	80 83       	st	Z, r24
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	a2 83       	std	Z+2, r26	; 0x02
    1e46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ea 5b       	subi	r30, 0xBA	; 186
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	60 81       	ld	r22, Z
    1e50:	71 81       	ldd	r23, Z+1	; 0x01
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	93 81       	ldd	r25, Z+3	; 0x03
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e8       	ldi	r20, 0x80	; 128
    1e5c:	5f e3       	ldi	r21, 0x3F	; 63
    1e5e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1e62:	88 23       	and	r24, r24
    1e64:	44 f4       	brge	.+16     	; 0x1e76 <LCD_send_data_4bit+0x17e>
		__ticks = 1;
    1e66:	fe 01       	movw	r30, r28
    1e68:	ec 5b       	subi	r30, 0xBC	; 188
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	80 83       	st	Z, r24
    1e74:	64 c0       	rjmp	.+200    	; 0x1f3e <LCD_send_data_4bit+0x246>
	else if (__tmp > 65535)
    1e76:	fe 01       	movw	r30, r28
    1e78:	ea 5b       	subi	r30, 0xBA	; 186
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	60 81       	ld	r22, Z
    1e7e:	71 81       	ldd	r23, Z+1	; 0x01
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	93 81       	ldd	r25, Z+3	; 0x03
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	3f ef       	ldi	r19, 0xFF	; 255
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	57 e4       	ldi	r21, 0x47	; 71
    1e8c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1e90:	18 16       	cp	r1, r24
    1e92:	0c f0       	brlt	.+2      	; 0x1e96 <LCD_send_data_4bit+0x19e>
    1e94:	43 c0       	rjmp	.+134    	; 0x1f1c <LCD_send_data_4bit+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e96:	fe 01       	movw	r30, r28
    1e98:	e6 5b       	subi	r30, 0xB6	; 182
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e2       	ldi	r20, 0x20	; 32
    1eaa:	51 e4       	ldi	r21, 0x41	; 65
    1eac:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	8e 01       	movw	r16, r28
    1eb6:	0c 5b       	subi	r16, 0xBC	; 188
    1eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	80 83       	st	Z, r24
    1ecc:	1f c0       	rjmp	.+62     	; 0x1f0c <LCD_send_data_4bit+0x214>
    1ece:	fe 01       	movw	r30, r28
    1ed0:	ee 5b       	subi	r30, 0xBE	; 190
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 e9       	ldi	r24, 0x90	; 144
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	80 83       	st	Z, r24
    1edc:	fe 01       	movw	r30, r28
    1ede:	ee 5b       	subi	r30, 0xBE	; 190
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <LCD_send_data_4bit+0x1ee>
    1eea:	fe 01       	movw	r30, r28
    1eec:	ee 5b       	subi	r30, 0xBE	; 190
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	91 83       	std	Z+1, r25	; 0x01
    1ef2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef4:	de 01       	movw	r26, r28
    1ef6:	ac 5b       	subi	r26, 0xBC	; 188
    1ef8:	bf 4f       	sbci	r27, 0xFF	; 255
    1efa:	fe 01       	movw	r30, r28
    1efc:	ec 5b       	subi	r30, 0xBC	; 188
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 81       	ld	r24, Z
    1f02:	91 81       	ldd	r25, Z+1	; 0x01
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	11 96       	adiw	r26, 0x01	; 1
    1f08:	9c 93       	st	X, r25
    1f0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ec 5b       	subi	r30, 0xBC	; 188
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	80 81       	ld	r24, Z
    1f14:	91 81       	ldd	r25, Z+1	; 0x01
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	d1 f6       	brne	.-76     	; 0x1ece <LCD_send_data_4bit+0x1d6>
    1f1a:	42 c0       	rjmp	.+132    	; 0x1fa0 <LCD_send_data_4bit+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1c:	8e 01       	movw	r16, r28
    1f1e:	0c 5b       	subi	r16, 0xBC	; 188
    1f20:	1f 4f       	sbci	r17, 0xFF	; 255
    1f22:	fe 01       	movw	r30, r28
    1f24:	ea 5b       	subi	r30, 0xBA	; 186
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	60 81       	ld	r22, Z
    1f2a:	71 81       	ldd	r23, Z+1	; 0x01
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	f8 01       	movw	r30, r16
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	80 83       	st	Z, r24
    1f3e:	de 01       	movw	r26, r28
    1f40:	a0 5c       	subi	r26, 0xC0	; 192
    1f42:	bf 4f       	sbci	r27, 0xFF	; 255
    1f44:	fe 01       	movw	r30, r28
    1f46:	ec 5b       	subi	r30, 0xBC	; 188
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	80 81       	ld	r24, Z
    1f4c:	91 81       	ldd	r25, Z+1	; 0x01
    1f4e:	11 96       	adiw	r26, 0x01	; 1
    1f50:	9c 93       	st	X, r25
    1f52:	8e 93       	st	-X, r24
    1f54:	fe 01       	movw	r30, r28
    1f56:	e0 5c       	subi	r30, 0xC0	; 192
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	80 81       	ld	r24, Z
    1f5c:	91 81       	ldd	r25, Z+1	; 0x01
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD_send_data_4bit+0x266>
    1f62:	fe 01       	movw	r30, r28
    1f64:	e0 5c       	subi	r30, 0xC0	; 192
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	80 83       	st	Z, r24
    1f6c:	19 c0       	rjmp	.+50     	; 0x1fa0 <LCD_send_data_4bit+0x2a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f6e:	8e 01       	movw	r16, r28
    1f70:	02 5b       	subi	r16, 0xB2	; 178
    1f72:	1f 4f       	sbci	r17, 0xFF	; 255
    1f74:	fe 01       	movw	r30, r28
    1f76:	e1 5b       	subi	r30, 0xB1	; 177
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	60 81       	ld	r22, Z
    1f7c:	71 81       	ldd	r23, Z+1	; 0x01
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	80 83       	st	Z, r24
    1f8e:	fe 01       	movw	r30, r28
    1f90:	e2 5b       	subi	r30, 0xB2	; 178
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	80 81       	ld	r24, Z
    1f96:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f98:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f9a:	8a 95       	dec	r24
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <LCD_send_data_4bit+0x2a2>
    1f9e:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	clearbit(LCD_control_PORT,EN);
    1fa0:	a8 e3       	ldi	r26, 0x38	; 56
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e8 e3       	ldi	r30, 0x38	; 56
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	87 7f       	andi	r24, 0xF7	; 247
    1fac:	8c 93       	st	X, r24
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a8 e4       	ldi	r26, 0x48	; 72
    1fb4:	b3 e4       	ldi	r27, 0x43	; 67
    1fb6:	8b af       	std	Y+59, r24	; 0x3b
    1fb8:	9c af       	std	Y+60, r25	; 0x3c
    1fba:	ad af       	std	Y+61, r26	; 0x3d
    1fbc:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fbe:	6b ad       	ldd	r22, Y+59	; 0x3b
    1fc0:	7c ad       	ldd	r23, Y+60	; 0x3c
    1fc2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fc4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fc6:	2b ea       	ldi	r18, 0xAB	; 171
    1fc8:	3a ea       	ldi	r19, 0xAA	; 170
    1fca:	4a ea       	ldi	r20, 0xAA	; 170
    1fcc:	50 e4       	ldi	r21, 0x40	; 64
    1fce:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8f ab       	std	Y+55, r24	; 0x37
    1fd8:	98 af       	std	Y+56, r25	; 0x38
    1fda:	a9 af       	std	Y+57, r26	; 0x39
    1fdc:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1fde:	6f a9       	ldd	r22, Y+55	; 0x37
    1fe0:	78 ad       	ldd	r23, Y+56	; 0x38
    1fe2:	89 ad       	ldd	r24, Y+57	; 0x39
    1fe4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	1c f4       	brge	.+6      	; 0x1ffc <LCD_send_data_4bit+0x304>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	8e ab       	std	Y+54, r24	; 0x36
    1ffa:	91 c0       	rjmp	.+290    	; 0x211e <LCD_send_data_4bit+0x426>
	else if (__tmp > 255)
    1ffc:	6f a9       	ldd	r22, Y+55	; 0x37
    1ffe:	78 ad       	ldd	r23, Y+56	; 0x38
    2000:	89 ad       	ldd	r24, Y+57	; 0x39
    2002:	9a ad       	ldd	r25, Y+58	; 0x3a
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4f e7       	ldi	r20, 0x7F	; 127
    200a:	53 e4       	ldi	r21, 0x43	; 67
    200c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2010:	18 16       	cp	r1, r24
    2012:	0c f0       	brlt	.+2      	; 0x2016 <LCD_send_data_4bit+0x31e>
    2014:	7b c0       	rjmp	.+246    	; 0x210c <LCD_send_data_4bit+0x414>
	{
		_delay_ms(__us / 1000.0);
    2016:	6b ad       	ldd	r22, Y+59	; 0x3b
    2018:	7c ad       	ldd	r23, Y+60	; 0x3c
    201a:	8d ad       	ldd	r24, Y+61	; 0x3d
    201c:	9e ad       	ldd	r25, Y+62	; 0x3e
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	4a e7       	ldi	r20, 0x7A	; 122
    2024:	54 e4       	ldi	r21, 0x44	; 68
    2026:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	8a ab       	std	Y+50, r24	; 0x32
    2030:	9b ab       	std	Y+51, r25	; 0x33
    2032:	ac ab       	std	Y+52, r26	; 0x34
    2034:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2036:	6a a9       	ldd	r22, Y+50	; 0x32
    2038:	7b a9       	ldd	r23, Y+51	; 0x33
    203a:	8c a9       	ldd	r24, Y+52	; 0x34
    203c:	9d a9       	ldd	r25, Y+53	; 0x35
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a e7       	ldi	r20, 0x7A	; 122
    2044:	55 e4       	ldi	r21, 0x45	; 69
    2046:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	8e a7       	std	Y+46, r24	; 0x2e
    2050:	9f a7       	std	Y+47, r25	; 0x2f
    2052:	a8 ab       	std	Y+48, r26	; 0x30
    2054:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2056:	6e a5       	ldd	r22, Y+46	; 0x2e
    2058:	7f a5       	ldd	r23, Y+47	; 0x2f
    205a:	88 a9       	ldd	r24, Y+48	; 0x30
    205c:	99 a9       	ldd	r25, Y+49	; 0x31
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e8       	ldi	r20, 0x80	; 128
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    206a:	88 23       	and	r24, r24
    206c:	2c f4       	brge	.+10     	; 0x2078 <LCD_send_data_4bit+0x380>
		__ticks = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9d a7       	std	Y+45, r25	; 0x2d
    2074:	8c a7       	std	Y+44, r24	; 0x2c
    2076:	3f c0       	rjmp	.+126    	; 0x20f6 <LCD_send_data_4bit+0x3fe>
	else if (__tmp > 65535)
    2078:	6e a5       	ldd	r22, Y+46	; 0x2e
    207a:	7f a5       	ldd	r23, Y+47	; 0x2f
    207c:	88 a9       	ldd	r24, Y+48	; 0x30
    207e:	99 a9       	ldd	r25, Y+49	; 0x31
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	3f ef       	ldi	r19, 0xFF	; 255
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	57 e4       	ldi	r21, 0x47	; 71
    2088:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	4c f5       	brge	.+82     	; 0x20e2 <LCD_send_data_4bit+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2090:	6a a9       	ldd	r22, Y+50	; 0x32
    2092:	7b a9       	ldd	r23, Y+51	; 0x33
    2094:	8c a9       	ldd	r24, Y+52	; 0x34
    2096:	9d a9       	ldd	r25, Y+53	; 0x35
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e2       	ldi	r20, 0x20	; 32
    209e:	51 e4       	ldi	r21, 0x41	; 65
    20a0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	bc 01       	movw	r22, r24
    20aa:	cd 01       	movw	r24, r26
    20ac:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9d a7       	std	Y+45, r25	; 0x2d
    20b6:	8c a7       	std	Y+44, r24	; 0x2c
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <LCD_send_data_4bit+0x3e0>
    20ba:	80 e9       	ldi	r24, 0x90	; 144
    20bc:	91 e0       	ldi	r25, 0x01	; 1
    20be:	9b a7       	std	Y+43, r25	; 0x2b
    20c0:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20c2:	8a a5       	ldd	r24, Y+42	; 0x2a
    20c4:	9b a5       	ldd	r25, Y+43	; 0x2b
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_send_data_4bit+0x3ce>
    20ca:	9b a7       	std	Y+43, r25	; 0x2b
    20cc:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ce:	8c a5       	ldd	r24, Y+44	; 0x2c
    20d0:	9d a5       	ldd	r25, Y+45	; 0x2d
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	9d a7       	std	Y+45, r25	; 0x2d
    20d6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d8:	8c a5       	ldd	r24, Y+44	; 0x2c
    20da:	9d a5       	ldd	r25, Y+45	; 0x2d
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	69 f7       	brne	.-38     	; 0x20ba <LCD_send_data_4bit+0x3c2>
    20e0:	24 c0       	rjmp	.+72     	; 0x212a <LCD_send_data_4bit+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e2:	6e a5       	ldd	r22, Y+46	; 0x2e
    20e4:	7f a5       	ldd	r23, Y+47	; 0x2f
    20e6:	88 a9       	ldd	r24, Y+48	; 0x30
    20e8:	99 a9       	ldd	r25, Y+49	; 0x31
    20ea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	9d a7       	std	Y+45, r25	; 0x2d
    20f4:	8c a7       	std	Y+44, r24	; 0x2c
    20f6:	8c a5       	ldd	r24, Y+44	; 0x2c
    20f8:	9d a5       	ldd	r25, Y+45	; 0x2d
    20fa:	99 a7       	std	Y+41, r25	; 0x29
    20fc:	88 a7       	std	Y+40, r24	; 0x28
    20fe:	88 a5       	ldd	r24, Y+40	; 0x28
    2100:	99 a5       	ldd	r25, Y+41	; 0x29
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <LCD_send_data_4bit+0x40a>
    2106:	99 a7       	std	Y+41, r25	; 0x29
    2108:	88 a7       	std	Y+40, r24	; 0x28
    210a:	0f c0       	rjmp	.+30     	; 0x212a <LCD_send_data_4bit+0x432>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    210c:	6f a9       	ldd	r22, Y+55	; 0x37
    210e:	78 ad       	ldd	r23, Y+56	; 0x38
    2110:	89 ad       	ldd	r24, Y+57	; 0x39
    2112:	9a ad       	ldd	r25, Y+58	; 0x3a
    2114:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8e ab       	std	Y+54, r24	; 0x36
    211e:	8e a9       	ldd	r24, Y+54	; 0x36
    2120:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2122:	8f a1       	ldd	r24, Y+39	; 0x27
    2124:	8a 95       	dec	r24
    2126:	f1 f7       	brne	.-4      	; 0x2124 <LCD_send_data_4bit+0x42c>
    2128:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);
	LCD_DATA_PORT = (LCD_DATA_PORT &0x0f) |(data<<4);//send low nibble 
    212a:	ab e3       	ldi	r26, 0x3B	; 59
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	eb e3       	ldi	r30, 0x3B	; 59
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	28 2f       	mov	r18, r24
    2136:	2f 70       	andi	r18, 0x0F	; 15
    2138:	fe 01       	movw	r30, r28
    213a:	e9 5a       	subi	r30, 0xA9	; 169
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 81       	ld	r24, Z
    2140:	88 2f       	mov	r24, r24
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	82 95       	swap	r24
    2146:	92 95       	swap	r25
    2148:	90 7f       	andi	r25, 0xF0	; 240
    214a:	98 27       	eor	r25, r24
    214c:	80 7f       	andi	r24, 0xF0	; 240
    214e:	98 27       	eor	r25, r24
    2150:	82 2b       	or	r24, r18
    2152:	8c 93       	st	X, r24
	setbit(LCD_control_PORT,EN);
    2154:	a8 e3       	ldi	r26, 0x38	; 56
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e8 e3       	ldi	r30, 0x38	; 56
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	88 60       	ori	r24, 0x08	; 8
    2160:	8c 93       	st	X, r24
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a0 e8       	ldi	r26, 0x80	; 128
    2168:	bf e3       	ldi	r27, 0x3F	; 63
    216a:	8b a3       	std	Y+35, r24	; 0x23
    216c:	9c a3       	std	Y+36, r25	; 0x24
    216e:	ad a3       	std	Y+37, r26	; 0x25
    2170:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2172:	6b a1       	ldd	r22, Y+35	; 0x23
    2174:	7c a1       	ldd	r23, Y+36	; 0x24
    2176:	8d a1       	ldd	r24, Y+37	; 0x25
    2178:	9e a1       	ldd	r25, Y+38	; 0x26
    217a:	2b ea       	ldi	r18, 0xAB	; 171
    217c:	3a ea       	ldi	r19, 0xAA	; 170
    217e:	4a ea       	ldi	r20, 0xAA	; 170
    2180:	50 e4       	ldi	r21, 0x40	; 64
    2182:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	8f 8f       	std	Y+31, r24	; 0x1f
    218c:	98 a3       	std	Y+32, r25	; 0x20
    218e:	a9 a3       	std	Y+33, r26	; 0x21
    2190:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2192:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2194:	78 a1       	ldd	r23, Y+32	; 0x20
    2196:	89 a1       	ldd	r24, Y+33	; 0x21
    2198:	9a a1       	ldd	r25, Y+34	; 0x22
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e8       	ldi	r20, 0x80	; 128
    21a0:	5f e3       	ldi	r21, 0x3F	; 63
    21a2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    21a6:	88 23       	and	r24, r24
    21a8:	1c f4       	brge	.+6      	; 0x21b0 <LCD_send_data_4bit+0x4b8>
		__ticks = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	8e 8f       	std	Y+30, r24	; 0x1e
    21ae:	91 c0       	rjmp	.+290    	; 0x22d2 <LCD_send_data_4bit+0x5da>
	else if (__tmp > 255)
    21b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21b2:	78 a1       	ldd	r23, Y+32	; 0x20
    21b4:	89 a1       	ldd	r24, Y+33	; 0x21
    21b6:	9a a1       	ldd	r25, Y+34	; 0x22
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	53 e4       	ldi	r21, 0x43	; 67
    21c0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	0c f0       	brlt	.+2      	; 0x21ca <LCD_send_data_4bit+0x4d2>
    21c8:	7b c0       	rjmp	.+246    	; 0x22c0 <LCD_send_data_4bit+0x5c8>
	{
		_delay_ms(__us / 1000.0);
    21ca:	6b a1       	ldd	r22, Y+35	; 0x23
    21cc:	7c a1       	ldd	r23, Y+36	; 0x24
    21ce:	8d a1       	ldd	r24, Y+37	; 0x25
    21d0:	9e a1       	ldd	r25, Y+38	; 0x26
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a e7       	ldi	r20, 0x7A	; 122
    21d8:	54 e4       	ldi	r21, 0x44	; 68
    21da:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	8a 8f       	std	Y+26, r24	; 0x1a
    21e4:	9b 8f       	std	Y+27, r25	; 0x1b
    21e6:	ac 8f       	std	Y+28, r26	; 0x1c
    21e8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21ec:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21f0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a e7       	ldi	r20, 0x7A	; 122
    21f8:	55 e4       	ldi	r21, 0x45	; 69
    21fa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	8e 8b       	std	Y+22, r24	; 0x16
    2204:	9f 8b       	std	Y+23, r25	; 0x17
    2206:	a8 8f       	std	Y+24, r26	; 0x18
    2208:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    220a:	6e 89       	ldd	r22, Y+22	; 0x16
    220c:	7f 89       	ldd	r23, Y+23	; 0x17
    220e:	88 8d       	ldd	r24, Y+24	; 0x18
    2210:	99 8d       	ldd	r25, Y+25	; 0x19
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <LCD_send_data_4bit+0x534>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9d 8b       	std	Y+21, r25	; 0x15
    2228:	8c 8b       	std	Y+20, r24	; 0x14
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <LCD_send_data_4bit+0x5b2>
	else if (__tmp > 65535)
    222c:	6e 89       	ldd	r22, Y+22	; 0x16
    222e:	7f 89       	ldd	r23, Y+23	; 0x17
    2230:	88 8d       	ldd	r24, Y+24	; 0x18
    2232:	99 8d       	ldd	r25, Y+25	; 0x19
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <LCD_send_data_4bit+0x59e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2246:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2248:	8c 8d       	ldd	r24, Y+28	; 0x1c
    224a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9d 8b       	std	Y+21, r25	; 0x15
    226a:	8c 8b       	std	Y+20, r24	; 0x14
    226c:	0f c0       	rjmp	.+30     	; 0x228c <LCD_send_data_4bit+0x594>
    226e:	80 e9       	ldi	r24, 0x90	; 144
    2270:	91 e0       	ldi	r25, 0x01	; 1
    2272:	9b 8b       	std	Y+19, r25	; 0x13
    2274:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2276:	8a 89       	ldd	r24, Y+18	; 0x12
    2278:	9b 89       	ldd	r25, Y+19	; 0x13
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_send_data_4bit+0x582>
    227e:	9b 8b       	std	Y+19, r25	; 0x13
    2280:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	8c 89       	ldd	r24, Y+20	; 0x14
    2284:	9d 89       	ldd	r25, Y+21	; 0x15
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	9d 8b       	std	Y+21, r25	; 0x15
    228a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	8c 89       	ldd	r24, Y+20	; 0x14
    228e:	9d 89       	ldd	r25, Y+21	; 0x15
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <LCD_send_data_4bit+0x576>
    2294:	24 c0       	rjmp	.+72     	; 0x22de <LCD_send_data_4bit+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	6e 89       	ldd	r22, Y+22	; 0x16
    2298:	7f 89       	ldd	r23, Y+23	; 0x17
    229a:	88 8d       	ldd	r24, Y+24	; 0x18
    229c:	99 8d       	ldd	r25, Y+25	; 0x19
    229e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9d 8b       	std	Y+21, r25	; 0x15
    22a8:	8c 8b       	std	Y+20, r24	; 0x14
    22aa:	8c 89       	ldd	r24, Y+20	; 0x14
    22ac:	9d 89       	ldd	r25, Y+21	; 0x15
    22ae:	99 8b       	std	Y+17, r25	; 0x11
    22b0:	88 8b       	std	Y+16, r24	; 0x10
    22b2:	88 89       	ldd	r24, Y+16	; 0x10
    22b4:	99 89       	ldd	r25, Y+17	; 0x11
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_send_data_4bit+0x5be>
    22ba:	99 8b       	std	Y+17, r25	; 0x11
    22bc:	88 8b       	std	Y+16, r24	; 0x10
    22be:	0f c0       	rjmp	.+30     	; 0x22de <LCD_send_data_4bit+0x5e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22c0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22c2:	78 a1       	ldd	r23, Y+32	; 0x20
    22c4:	89 a1       	ldd	r24, Y+33	; 0x21
    22c6:	9a a1       	ldd	r25, Y+34	; 0x22
    22c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	8e 8f       	std	Y+30, r24	; 0x1e
    22d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22d4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d8:	8a 95       	dec	r24
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <LCD_send_data_4bit+0x5e0>
    22dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	clearbit(LCD_control_PORT,EN);
    22de:	a8 e3       	ldi	r26, 0x38	; 56
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e8 e3       	ldi	r30, 0x38	; 56
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	87 7f       	andi	r24, 0xF7	; 247
    22ea:	8c 93       	st	X, r24
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	a0 e8       	ldi	r26, 0x80	; 128
    22f2:	bf e3       	ldi	r27, 0x3F	; 63
    22f4:	8b 87       	std	Y+11, r24	; 0x0b
    22f6:	9c 87       	std	Y+12, r25	; 0x0c
    22f8:	ad 87       	std	Y+13, r26	; 0x0d
    22fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2300:	8d 85       	ldd	r24, Y+13	; 0x0d
    2302:	9e 85       	ldd	r25, Y+14	; 0x0e
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a e7       	ldi	r20, 0x7A	; 122
    230a:	55 e4       	ldi	r21, 0x45	; 69
    230c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8f 83       	std	Y+7, r24	; 0x07
    2316:	98 87       	std	Y+8, r25	; 0x08
    2318:	a9 87       	std	Y+9, r26	; 0x09
    231a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    231c:	6f 81       	ldd	r22, Y+7	; 0x07
    231e:	78 85       	ldd	r23, Y+8	; 0x08
    2320:	89 85       	ldd	r24, Y+9	; 0x09
    2322:	9a 85       	ldd	r25, Y+10	; 0x0a
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e8       	ldi	r20, 0x80	; 128
    232a:	5f e3       	ldi	r21, 0x3F	; 63
    232c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2330:	88 23       	and	r24, r24
    2332:	2c f4       	brge	.+10     	; 0x233e <LCD_send_data_4bit+0x646>
		__ticks = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
    233c:	3f c0       	rjmp	.+126    	; 0x23bc <LCD_send_data_4bit+0x6c4>
	else if (__tmp > 65535)
    233e:	6f 81       	ldd	r22, Y+7	; 0x07
    2340:	78 85       	ldd	r23, Y+8	; 0x08
    2342:	89 85       	ldd	r24, Y+9	; 0x09
    2344:	9a 85       	ldd	r25, Y+10	; 0x0a
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	4c f5       	brge	.+82     	; 0x23a8 <LCD_send_data_4bit+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2356:	6b 85       	ldd	r22, Y+11	; 0x0b
    2358:	7c 85       	ldd	r23, Y+12	; 0x0c
    235a:	8d 85       	ldd	r24, Y+13	; 0x0d
    235c:	9e 85       	ldd	r25, Y+14	; 0x0e
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e2       	ldi	r20, 0x20	; 32
    2364:	51 e4       	ldi	r21, 0x41	; 65
    2366:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
    237e:	0f c0       	rjmp	.+30     	; 0x239e <LCD_send_data_4bit+0x6a6>
    2380:	80 e9       	ldi	r24, 0x90	; 144
    2382:	91 e0       	ldi	r25, 0x01	; 1
    2384:	9c 83       	std	Y+4, r25	; 0x04
    2386:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	9c 81       	ldd	r25, Y+4	; 0x04
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <LCD_send_data_4bit+0x694>
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	9e 81       	ldd	r25, Y+6	; 0x06
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	69 f7       	brne	.-38     	; 0x2380 <LCD_send_data_4bit+0x688>
    23a6:	14 c0       	rjmp	.+40     	; 0x23d0 <LCD_send_data_4bit+0x6d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a8:	6f 81       	ldd	r22, Y+7	; 0x07
    23aa:	78 85       	ldd	r23, Y+8	; 0x08
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	9a 83       	std	Y+2, r25	; 0x02
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	9a 81       	ldd	r25, Y+2	; 0x02
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_send_data_4bit+0x6d0>
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
}
    23d0:	c9 5a       	subi	r28, 0xA9	; 169
    23d2:	df 4f       	sbci	r29, 0xFF	; 255
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	08 95       	ret

000023e8 <LCD_send_command_4bit>:
void LCD_send_command_4bit(unsigned char cmd)
{
    23e8:	0f 93       	push	r16
    23ea:	1f 93       	push	r17
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	c7 55       	subi	r28, 0x57	; 87
    23f6:	d0 40       	sbci	r29, 0x00	; 0
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	fe 01       	movw	r30, r28
    2404:	e9 5a       	subi	r30, 0xA9	; 169
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	80 83       	st	Z, r24
	LCD_DATA_PORT = (LCD_DATA_PORT &0x0f) |(cmd & 0xf0);//send high nibble
    240a:	ab e3       	ldi	r26, 0x3B	; 59
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	eb e3       	ldi	r30, 0x3B	; 59
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	98 2f       	mov	r25, r24
    2416:	9f 70       	andi	r25, 0x0F	; 15
    2418:	fe 01       	movw	r30, r28
    241a:	e9 5a       	subi	r30, 0xA9	; 169
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	80 81       	ld	r24, Z
    2420:	80 7f       	andi	r24, 0xF0	; 240
    2422:	89 2b       	or	r24, r25
    2424:	8c 93       	st	X, r24
	clearbit(LCD_control_PORT,RS);
    2426:	a8 e3       	ldi	r26, 0x38	; 56
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e8 e3       	ldi	r30, 0x38	; 56
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	8d 7f       	andi	r24, 0xFD	; 253
    2432:	8c 93       	st	X, r24
	clearbit(LCD_control_PORT,RW);
    2434:	a8 e3       	ldi	r26, 0x38	; 56
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e8 e3       	ldi	r30, 0x38	; 56
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	8b 7f       	andi	r24, 0xFB	; 251
    2440:	8c 93       	st	X, r24
	setbit(LCD_control_PORT,EN);
    2442:	a8 e3       	ldi	r26, 0x38	; 56
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e8 e3       	ldi	r30, 0x38	; 56
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	88 60       	ori	r24, 0x08	; 8
    244e:	8c 93       	st	X, r24
    2450:	fe 01       	movw	r30, r28
    2452:	ed 5a       	subi	r30, 0xAD	; 173
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	a0 e8       	ldi	r26, 0x80	; 128
    245c:	bf e3       	ldi	r27, 0x3F	; 63
    245e:	80 83       	st	Z, r24
    2460:	91 83       	std	Z+1, r25	; 0x01
    2462:	a2 83       	std	Z+2, r26	; 0x02
    2464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2466:	8e 01       	movw	r16, r28
    2468:	01 5b       	subi	r16, 0xB1	; 177
    246a:	1f 4f       	sbci	r17, 0xFF	; 255
    246c:	fe 01       	movw	r30, r28
    246e:	ed 5a       	subi	r30, 0xAD	; 173
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	60 81       	ld	r22, Z
    2474:	71 81       	ldd	r23, Z+1	; 0x01
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	93 81       	ldd	r25, Z+3	; 0x03
    247a:	2b ea       	ldi	r18, 0xAB	; 171
    247c:	3a ea       	ldi	r19, 0xAA	; 170
    247e:	4a ea       	ldi	r20, 0xAA	; 170
    2480:	50 e4       	ldi	r21, 0x40	; 64
    2482:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	f8 01       	movw	r30, r16
    248c:	80 83       	st	Z, r24
    248e:	91 83       	std	Z+1, r25	; 0x01
    2490:	a2 83       	std	Z+2, r26	; 0x02
    2492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2494:	fe 01       	movw	r30, r28
    2496:	e1 5b       	subi	r30, 0xB1	; 177
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	60 81       	ld	r22, Z
    249c:	71 81       	ldd	r23, Z+1	; 0x01
    249e:	82 81       	ldd	r24, Z+2	; 0x02
    24a0:	93 81       	ldd	r25, Z+3	; 0x03
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e8       	ldi	r20, 0x80	; 128
    24a8:	5f e3       	ldi	r21, 0x3F	; 63
    24aa:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    24ae:	88 23       	and	r24, r24
    24b0:	34 f4       	brge	.+12     	; 0x24be <LCD_send_command_4bit+0xd6>
		__ticks = 1;
    24b2:	fe 01       	movw	r30, r28
    24b4:	e2 5b       	subi	r30, 0xB2	; 178
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	80 83       	st	Z, r24
    24bc:	e0 c0       	rjmp	.+448    	; 0x267e <LCD_send_command_4bit+0x296>
	else if (__tmp > 255)
    24be:	fe 01       	movw	r30, r28
    24c0:	e1 5b       	subi	r30, 0xB1	; 177
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	4f e7       	ldi	r20, 0x7F	; 127
    24d2:	53 e4       	ldi	r21, 0x43	; 67
    24d4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    24d8:	18 16       	cp	r1, r24
    24da:	0c f0       	brlt	.+2      	; 0x24de <LCD_send_command_4bit+0xf6>
    24dc:	c0 c0       	rjmp	.+384    	; 0x265e <LCD_send_command_4bit+0x276>
	{
		_delay_ms(__us / 1000.0);
    24de:	fe 01       	movw	r30, r28
    24e0:	ed 5a       	subi	r30, 0xAD	; 173
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	60 81       	ld	r22, Z
    24e6:	71 81       	ldd	r23, Z+1	; 0x01
    24e8:	82 81       	ldd	r24, Z+2	; 0x02
    24ea:	93 81       	ldd	r25, Z+3	; 0x03
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	4a e7       	ldi	r20, 0x7A	; 122
    24f2:	54 e4       	ldi	r21, 0x44	; 68
    24f4:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	fe 01       	movw	r30, r28
    24fe:	e6 5b       	subi	r30, 0xB6	; 182
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 83       	st	Z, r24
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	a2 83       	std	Z+2, r26	; 0x02
    2508:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250a:	8e 01       	movw	r16, r28
    250c:	0a 5b       	subi	r16, 0xBA	; 186
    250e:	1f 4f       	sbci	r17, 0xFF	; 255
    2510:	fe 01       	movw	r30, r28
    2512:	e6 5b       	subi	r30, 0xB6	; 182
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	4a e7       	ldi	r20, 0x7A	; 122
    2524:	55 e4       	ldi	r21, 0x45	; 69
    2526:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	f8 01       	movw	r30, r16
    2530:	80 83       	st	Z, r24
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	a2 83       	std	Z+2, r26	; 0x02
    2536:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2538:	fe 01       	movw	r30, r28
    253a:	ea 5b       	subi	r30, 0xBA	; 186
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	60 81       	ld	r22, Z
    2540:	71 81       	ldd	r23, Z+1	; 0x01
    2542:	82 81       	ldd	r24, Z+2	; 0x02
    2544:	93 81       	ldd	r25, Z+3	; 0x03
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e8       	ldi	r20, 0x80	; 128
    254c:	5f e3       	ldi	r21, 0x3F	; 63
    254e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2552:	88 23       	and	r24, r24
    2554:	44 f4       	brge	.+16     	; 0x2566 <LCD_send_command_4bit+0x17e>
		__ticks = 1;
    2556:	fe 01       	movw	r30, r28
    2558:	ec 5b       	subi	r30, 0xBC	; 188
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	91 83       	std	Z+1, r25	; 0x01
    2562:	80 83       	st	Z, r24
    2564:	64 c0       	rjmp	.+200    	; 0x262e <LCD_send_command_4bit+0x246>
	else if (__tmp > 65535)
    2566:	fe 01       	movw	r30, r28
    2568:	ea 5b       	subi	r30, 0xBA	; 186
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	60 81       	ld	r22, Z
    256e:	71 81       	ldd	r23, Z+1	; 0x01
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	93 81       	ldd	r25, Z+3	; 0x03
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	3f ef       	ldi	r19, 0xFF	; 255
    2578:	4f e7       	ldi	r20, 0x7F	; 127
    257a:	57 e4       	ldi	r21, 0x47	; 71
    257c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2580:	18 16       	cp	r1, r24
    2582:	0c f0       	brlt	.+2      	; 0x2586 <LCD_send_command_4bit+0x19e>
    2584:	43 c0       	rjmp	.+134    	; 0x260c <LCD_send_command_4bit+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2586:	fe 01       	movw	r30, r28
    2588:	e6 5b       	subi	r30, 0xB6	; 182
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	60 81       	ld	r22, Z
    258e:	71 81       	ldd	r23, Z+1	; 0x01
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e2       	ldi	r20, 0x20	; 32
    259a:	51 e4       	ldi	r21, 0x41	; 65
    259c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	8e 01       	movw	r16, r28
    25a6:	0c 5b       	subi	r16, 0xBC	; 188
    25a8:	1f 4f       	sbci	r17, 0xFF	; 255
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	f8 01       	movw	r30, r16
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	80 83       	st	Z, r24
    25bc:	1f c0       	rjmp	.+62     	; 0x25fc <LCD_send_command_4bit+0x214>
    25be:	fe 01       	movw	r30, r28
    25c0:	ee 5b       	subi	r30, 0xBE	; 190
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 e9       	ldi	r24, 0x90	; 144
    25c6:	91 e0       	ldi	r25, 0x01	; 1
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
    25cc:	fe 01       	movw	r30, r28
    25ce:	ee 5b       	subi	r30, 0xBE	; 190
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 81       	ld	r24, Z
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <LCD_send_command_4bit+0x1ee>
    25da:	fe 01       	movw	r30, r28
    25dc:	ee 5b       	subi	r30, 0xBE	; 190
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e4:	de 01       	movw	r26, r28
    25e6:	ac 5b       	subi	r26, 0xBC	; 188
    25e8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ea:	fe 01       	movw	r30, r28
    25ec:	ec 5b       	subi	r30, 0xBC	; 188
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	80 81       	ld	r24, Z
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	11 96       	adiw	r26, 0x01	; 1
    25f8:	9c 93       	st	X, r25
    25fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fc:	fe 01       	movw	r30, r28
    25fe:	ec 5b       	subi	r30, 0xBC	; 188
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 81       	ld	r24, Z
    2604:	91 81       	ldd	r25, Z+1	; 0x01
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	d1 f6       	brne	.-76     	; 0x25be <LCD_send_command_4bit+0x1d6>
    260a:	42 c0       	rjmp	.+132    	; 0x2690 <LCD_send_command_4bit+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260c:	8e 01       	movw	r16, r28
    260e:	0c 5b       	subi	r16, 0xBC	; 188
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	fe 01       	movw	r30, r28
    2614:	ea 5b       	subi	r30, 0xBA	; 186
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	60 81       	ld	r22, Z
    261a:	71 81       	ldd	r23, Z+1	; 0x01
    261c:	82 81       	ldd	r24, Z+2	; 0x02
    261e:	93 81       	ldd	r25, Z+3	; 0x03
    2620:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	f8 01       	movw	r30, r16
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	80 83       	st	Z, r24
    262e:	de 01       	movw	r26, r28
    2630:	a0 5c       	subi	r26, 0xC0	; 192
    2632:	bf 4f       	sbci	r27, 0xFF	; 255
    2634:	fe 01       	movw	r30, r28
    2636:	ec 5b       	subi	r30, 0xBC	; 188
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	11 96       	adiw	r26, 0x01	; 1
    2640:	9c 93       	st	X, r25
    2642:	8e 93       	st	-X, r24
    2644:	fe 01       	movw	r30, r28
    2646:	e0 5c       	subi	r30, 0xC0	; 192
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	91 81       	ldd	r25, Z+1	; 0x01
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	f1 f7       	brne	.-4      	; 0x264e <LCD_send_command_4bit+0x266>
    2652:	fe 01       	movw	r30, r28
    2654:	e0 5c       	subi	r30, 0xC0	; 192
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	91 83       	std	Z+1, r25	; 0x01
    265a:	80 83       	st	Z, r24
    265c:	19 c0       	rjmp	.+50     	; 0x2690 <LCD_send_command_4bit+0x2a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    265e:	8e 01       	movw	r16, r28
    2660:	02 5b       	subi	r16, 0xB2	; 178
    2662:	1f 4f       	sbci	r17, 0xFF	; 255
    2664:	fe 01       	movw	r30, r28
    2666:	e1 5b       	subi	r30, 0xB1	; 177
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	60 81       	ld	r22, Z
    266c:	71 81       	ldd	r23, Z+1	; 0x01
    266e:	82 81       	ldd	r24, Z+2	; 0x02
    2670:	93 81       	ldd	r25, Z+3	; 0x03
    2672:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	f8 01       	movw	r30, r16
    267c:	80 83       	st	Z, r24
    267e:	fe 01       	movw	r30, r28
    2680:	e2 5b       	subi	r30, 0xB2	; 178
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	80 81       	ld	r24, Z
    2686:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2688:	8f ad       	ldd	r24, Y+63	; 0x3f
    268a:	8a 95       	dec	r24
    268c:	f1 f7       	brne	.-4      	; 0x268a <LCD_send_command_4bit+0x2a2>
    268e:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	clearbit(LCD_control_PORT,EN);
    2690:	a8 e3       	ldi	r26, 0x38	; 56
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e8 e3       	ldi	r30, 0x38	; 56
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	87 7f       	andi	r24, 0xF7	; 247
    269c:	8c 93       	st	X, r24
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	a8 e4       	ldi	r26, 0x48	; 72
    26a4:	b3 e4       	ldi	r27, 0x43	; 67
    26a6:	8b af       	std	Y+59, r24	; 0x3b
    26a8:	9c af       	std	Y+60, r25	; 0x3c
    26aa:	ad af       	std	Y+61, r26	; 0x3d
    26ac:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26ae:	6b ad       	ldd	r22, Y+59	; 0x3b
    26b0:	7c ad       	ldd	r23, Y+60	; 0x3c
    26b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    26b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    26b6:	2b ea       	ldi	r18, 0xAB	; 171
    26b8:	3a ea       	ldi	r19, 0xAA	; 170
    26ba:	4a ea       	ldi	r20, 0xAA	; 170
    26bc:	50 e4       	ldi	r21, 0x40	; 64
    26be:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	8f ab       	std	Y+55, r24	; 0x37
    26c8:	98 af       	std	Y+56, r25	; 0x38
    26ca:	a9 af       	std	Y+57, r26	; 0x39
    26cc:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    26ce:	6f a9       	ldd	r22, Y+55	; 0x37
    26d0:	78 ad       	ldd	r23, Y+56	; 0x38
    26d2:	89 ad       	ldd	r24, Y+57	; 0x39
    26d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e8       	ldi	r20, 0x80	; 128
    26dc:	5f e3       	ldi	r21, 0x3F	; 63
    26de:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    26e2:	88 23       	and	r24, r24
    26e4:	1c f4       	brge	.+6      	; 0x26ec <LCD_send_command_4bit+0x304>
		__ticks = 1;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	8e ab       	std	Y+54, r24	; 0x36
    26ea:	91 c0       	rjmp	.+290    	; 0x280e <LCD_send_command_4bit+0x426>
	else if (__tmp > 255)
    26ec:	6f a9       	ldd	r22, Y+55	; 0x37
    26ee:	78 ad       	ldd	r23, Y+56	; 0x38
    26f0:	89 ad       	ldd	r24, Y+57	; 0x39
    26f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4f e7       	ldi	r20, 0x7F	; 127
    26fa:	53 e4       	ldi	r21, 0x43	; 67
    26fc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2700:	18 16       	cp	r1, r24
    2702:	0c f0       	brlt	.+2      	; 0x2706 <LCD_send_command_4bit+0x31e>
    2704:	7b c0       	rjmp	.+246    	; 0x27fc <LCD_send_command_4bit+0x414>
	{
		_delay_ms(__us / 1000.0);
    2706:	6b ad       	ldd	r22, Y+59	; 0x3b
    2708:	7c ad       	ldd	r23, Y+60	; 0x3c
    270a:	8d ad       	ldd	r24, Y+61	; 0x3d
    270c:	9e ad       	ldd	r25, Y+62	; 0x3e
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a e7       	ldi	r20, 0x7A	; 122
    2714:	54 e4       	ldi	r21, 0x44	; 68
    2716:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	8a ab       	std	Y+50, r24	; 0x32
    2720:	9b ab       	std	Y+51, r25	; 0x33
    2722:	ac ab       	std	Y+52, r26	; 0x34
    2724:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2726:	6a a9       	ldd	r22, Y+50	; 0x32
    2728:	7b a9       	ldd	r23, Y+51	; 0x33
    272a:	8c a9       	ldd	r24, Y+52	; 0x34
    272c:	9d a9       	ldd	r25, Y+53	; 0x35
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4a e7       	ldi	r20, 0x7A	; 122
    2734:	55 e4       	ldi	r21, 0x45	; 69
    2736:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	8e a7       	std	Y+46, r24	; 0x2e
    2740:	9f a7       	std	Y+47, r25	; 0x2f
    2742:	a8 ab       	std	Y+48, r26	; 0x30
    2744:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2746:	6e a5       	ldd	r22, Y+46	; 0x2e
    2748:	7f a5       	ldd	r23, Y+47	; 0x2f
    274a:	88 a9       	ldd	r24, Y+48	; 0x30
    274c:	99 a9       	ldd	r25, Y+49	; 0x31
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e8       	ldi	r20, 0x80	; 128
    2754:	5f e3       	ldi	r21, 0x3F	; 63
    2756:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    275a:	88 23       	and	r24, r24
    275c:	2c f4       	brge	.+10     	; 0x2768 <LCD_send_command_4bit+0x380>
		__ticks = 1;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	9d a7       	std	Y+45, r25	; 0x2d
    2764:	8c a7       	std	Y+44, r24	; 0x2c
    2766:	3f c0       	rjmp	.+126    	; 0x27e6 <LCD_send_command_4bit+0x3fe>
	else if (__tmp > 65535)
    2768:	6e a5       	ldd	r22, Y+46	; 0x2e
    276a:	7f a5       	ldd	r23, Y+47	; 0x2f
    276c:	88 a9       	ldd	r24, Y+48	; 0x30
    276e:	99 a9       	ldd	r25, Y+49	; 0x31
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	3f ef       	ldi	r19, 0xFF	; 255
    2774:	4f e7       	ldi	r20, 0x7F	; 127
    2776:	57 e4       	ldi	r21, 0x47	; 71
    2778:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    277c:	18 16       	cp	r1, r24
    277e:	4c f5       	brge	.+82     	; 0x27d2 <LCD_send_command_4bit+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2780:	6a a9       	ldd	r22, Y+50	; 0x32
    2782:	7b a9       	ldd	r23, Y+51	; 0x33
    2784:	8c a9       	ldd	r24, Y+52	; 0x34
    2786:	9d a9       	ldd	r25, Y+53	; 0x35
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e2       	ldi	r20, 0x20	; 32
    278e:	51 e4       	ldi	r21, 0x41	; 65
    2790:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	9d a7       	std	Y+45, r25	; 0x2d
    27a6:	8c a7       	std	Y+44, r24	; 0x2c
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <LCD_send_command_4bit+0x3e0>
    27aa:	80 e9       	ldi	r24, 0x90	; 144
    27ac:	91 e0       	ldi	r25, 0x01	; 1
    27ae:	9b a7       	std	Y+43, r25	; 0x2b
    27b0:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27b2:	8a a5       	ldd	r24, Y+42	; 0x2a
    27b4:	9b a5       	ldd	r25, Y+43	; 0x2b
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <LCD_send_command_4bit+0x3ce>
    27ba:	9b a7       	std	Y+43, r25	; 0x2b
    27bc:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27be:	8c a5       	ldd	r24, Y+44	; 0x2c
    27c0:	9d a5       	ldd	r25, Y+45	; 0x2d
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	9d a7       	std	Y+45, r25	; 0x2d
    27c6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    27ca:	9d a5       	ldd	r25, Y+45	; 0x2d
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	69 f7       	brne	.-38     	; 0x27aa <LCD_send_command_4bit+0x3c2>
    27d0:	24 c0       	rjmp	.+72     	; 0x281a <LCD_send_command_4bit+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d2:	6e a5       	ldd	r22, Y+46	; 0x2e
    27d4:	7f a5       	ldd	r23, Y+47	; 0x2f
    27d6:	88 a9       	ldd	r24, Y+48	; 0x30
    27d8:	99 a9       	ldd	r25, Y+49	; 0x31
    27da:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9d a7       	std	Y+45, r25	; 0x2d
    27e4:	8c a7       	std	Y+44, r24	; 0x2c
    27e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    27e8:	9d a5       	ldd	r25, Y+45	; 0x2d
    27ea:	99 a7       	std	Y+41, r25	; 0x29
    27ec:	88 a7       	std	Y+40, r24	; 0x28
    27ee:	88 a5       	ldd	r24, Y+40	; 0x28
    27f0:	99 a5       	ldd	r25, Y+41	; 0x29
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <LCD_send_command_4bit+0x40a>
    27f6:	99 a7       	std	Y+41, r25	; 0x29
    27f8:	88 a7       	std	Y+40, r24	; 0x28
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <LCD_send_command_4bit+0x432>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27fc:	6f a9       	ldd	r22, Y+55	; 0x37
    27fe:	78 ad       	ldd	r23, Y+56	; 0x38
    2800:	89 ad       	ldd	r24, Y+57	; 0x39
    2802:	9a ad       	ldd	r25, Y+58	; 0x3a
    2804:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	8e ab       	std	Y+54, r24	; 0x36
    280e:	8e a9       	ldd	r24, Y+54	; 0x36
    2810:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2812:	8f a1       	ldd	r24, Y+39	; 0x27
    2814:	8a 95       	dec	r24
    2816:	f1 f7       	brne	.-4      	; 0x2814 <LCD_send_command_4bit+0x42c>
    2818:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);
	LCD_DATA_PORT = (LCD_DATA_PORT &0x0f) |(cmd<<4);//send low nibble
    281a:	ab e3       	ldi	r26, 0x3B	; 59
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	eb e3       	ldi	r30, 0x3B	; 59
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	28 2f       	mov	r18, r24
    2826:	2f 70       	andi	r18, 0x0F	; 15
    2828:	fe 01       	movw	r30, r28
    282a:	e9 5a       	subi	r30, 0xA9	; 169
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	80 81       	ld	r24, Z
    2830:	88 2f       	mov	r24, r24
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	82 95       	swap	r24
    2836:	92 95       	swap	r25
    2838:	90 7f       	andi	r25, 0xF0	; 240
    283a:	98 27       	eor	r25, r24
    283c:	80 7f       	andi	r24, 0xF0	; 240
    283e:	98 27       	eor	r25, r24
    2840:	82 2b       	or	r24, r18
    2842:	8c 93       	st	X, r24
	setbit(LCD_control_PORT,EN);
    2844:	a8 e3       	ldi	r26, 0x38	; 56
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e8 e3       	ldi	r30, 0x38	; 56
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	88 60       	ori	r24, 0x08	; 8
    2850:	8c 93       	st	X, r24
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a0 e8       	ldi	r26, 0x80	; 128
    2858:	bf e3       	ldi	r27, 0x3F	; 63
    285a:	8b a3       	std	Y+35, r24	; 0x23
    285c:	9c a3       	std	Y+36, r25	; 0x24
    285e:	ad a3       	std	Y+37, r26	; 0x25
    2860:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2862:	6b a1       	ldd	r22, Y+35	; 0x23
    2864:	7c a1       	ldd	r23, Y+36	; 0x24
    2866:	8d a1       	ldd	r24, Y+37	; 0x25
    2868:	9e a1       	ldd	r25, Y+38	; 0x26
    286a:	2b ea       	ldi	r18, 0xAB	; 171
    286c:	3a ea       	ldi	r19, 0xAA	; 170
    286e:	4a ea       	ldi	r20, 0xAA	; 170
    2870:	50 e4       	ldi	r21, 0x40	; 64
    2872:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8f 8f       	std	Y+31, r24	; 0x1f
    287c:	98 a3       	std	Y+32, r25	; 0x20
    287e:	a9 a3       	std	Y+33, r26	; 0x21
    2880:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2882:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2884:	78 a1       	ldd	r23, Y+32	; 0x20
    2886:	89 a1       	ldd	r24, Y+33	; 0x21
    2888:	9a a1       	ldd	r25, Y+34	; 0x22
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	1c f4       	brge	.+6      	; 0x28a0 <LCD_send_command_4bit+0x4b8>
		__ticks = 1;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	8e 8f       	std	Y+30, r24	; 0x1e
    289e:	91 c0       	rjmp	.+290    	; 0x29c2 <LCD_send_command_4bit+0x5da>
	else if (__tmp > 255)
    28a0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    28a2:	78 a1       	ldd	r23, Y+32	; 0x20
    28a4:	89 a1       	ldd	r24, Y+33	; 0x21
    28a6:	9a a1       	ldd	r25, Y+34	; 0x22
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	4f e7       	ldi	r20, 0x7F	; 127
    28ae:	53 e4       	ldi	r21, 0x43	; 67
    28b0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    28b4:	18 16       	cp	r1, r24
    28b6:	0c f0       	brlt	.+2      	; 0x28ba <LCD_send_command_4bit+0x4d2>
    28b8:	7b c0       	rjmp	.+246    	; 0x29b0 <LCD_send_command_4bit+0x5c8>
	{
		_delay_ms(__us / 1000.0);
    28ba:	6b a1       	ldd	r22, Y+35	; 0x23
    28bc:	7c a1       	ldd	r23, Y+36	; 0x24
    28be:	8d a1       	ldd	r24, Y+37	; 0x25
    28c0:	9e a1       	ldd	r25, Y+38	; 0x26
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	4a e7       	ldi	r20, 0x7A	; 122
    28c8:	54 e4       	ldi	r21, 0x44	; 68
    28ca:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	8a 8f       	std	Y+26, r24	; 0x1a
    28d4:	9b 8f       	std	Y+27, r25	; 0x1b
    28d6:	ac 8f       	std	Y+28, r26	; 0x1c
    28d8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28da:	6a 8d       	ldd	r22, Y+26	; 0x1a
    28dc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    28de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    28e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	4a e7       	ldi	r20, 0x7A	; 122
    28e8:	55 e4       	ldi	r21, 0x45	; 69
    28ea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	8e 8b       	std	Y+22, r24	; 0x16
    28f4:	9f 8b       	std	Y+23, r25	; 0x17
    28f6:	a8 8f       	std	Y+24, r26	; 0x18
    28f8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    28fa:	6e 89       	ldd	r22, Y+22	; 0x16
    28fc:	7f 89       	ldd	r23, Y+23	; 0x17
    28fe:	88 8d       	ldd	r24, Y+24	; 0x18
    2900:	99 8d       	ldd	r25, Y+25	; 0x19
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e8       	ldi	r20, 0x80	; 128
    2908:	5f e3       	ldi	r21, 0x3F	; 63
    290a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    290e:	88 23       	and	r24, r24
    2910:	2c f4       	brge	.+10     	; 0x291c <LCD_send_command_4bit+0x534>
		__ticks = 1;
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9d 8b       	std	Y+21, r25	; 0x15
    2918:	8c 8b       	std	Y+20, r24	; 0x14
    291a:	3f c0       	rjmp	.+126    	; 0x299a <LCD_send_command_4bit+0x5b2>
	else if (__tmp > 65535)
    291c:	6e 89       	ldd	r22, Y+22	; 0x16
    291e:	7f 89       	ldd	r23, Y+23	; 0x17
    2920:	88 8d       	ldd	r24, Y+24	; 0x18
    2922:	99 8d       	ldd	r25, Y+25	; 0x19
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	3f ef       	ldi	r19, 0xFF	; 255
    2928:	4f e7       	ldi	r20, 0x7F	; 127
    292a:	57 e4       	ldi	r21, 0x47	; 71
    292c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2930:	18 16       	cp	r1, r24
    2932:	4c f5       	brge	.+82     	; 0x2986 <LCD_send_command_4bit+0x59e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2934:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2936:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2938:	8c 8d       	ldd	r24, Y+28	; 0x1c
    293a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e2       	ldi	r20, 0x20	; 32
    2942:	51 e4       	ldi	r21, 0x41	; 65
    2944:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	bc 01       	movw	r22, r24
    294e:	cd 01       	movw	r24, r26
    2950:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9d 8b       	std	Y+21, r25	; 0x15
    295a:	8c 8b       	std	Y+20, r24	; 0x14
    295c:	0f c0       	rjmp	.+30     	; 0x297c <LCD_send_command_4bit+0x594>
    295e:	80 e9       	ldi	r24, 0x90	; 144
    2960:	91 e0       	ldi	r25, 0x01	; 1
    2962:	9b 8b       	std	Y+19, r25	; 0x13
    2964:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2966:	8a 89       	ldd	r24, Y+18	; 0x12
    2968:	9b 89       	ldd	r25, Y+19	; 0x13
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <LCD_send_command_4bit+0x582>
    296e:	9b 8b       	std	Y+19, r25	; 0x13
    2970:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2972:	8c 89       	ldd	r24, Y+20	; 0x14
    2974:	9d 89       	ldd	r25, Y+21	; 0x15
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	9d 8b       	std	Y+21, r25	; 0x15
    297a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297c:	8c 89       	ldd	r24, Y+20	; 0x14
    297e:	9d 89       	ldd	r25, Y+21	; 0x15
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	69 f7       	brne	.-38     	; 0x295e <LCD_send_command_4bit+0x576>
    2984:	24 c0       	rjmp	.+72     	; 0x29ce <LCD_send_command_4bit+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2986:	6e 89       	ldd	r22, Y+22	; 0x16
    2988:	7f 89       	ldd	r23, Y+23	; 0x17
    298a:	88 8d       	ldd	r24, Y+24	; 0x18
    298c:	99 8d       	ldd	r25, Y+25	; 0x19
    298e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	9d 8b       	std	Y+21, r25	; 0x15
    2998:	8c 8b       	std	Y+20, r24	; 0x14
    299a:	8c 89       	ldd	r24, Y+20	; 0x14
    299c:	9d 89       	ldd	r25, Y+21	; 0x15
    299e:	99 8b       	std	Y+17, r25	; 0x11
    29a0:	88 8b       	std	Y+16, r24	; 0x10
    29a2:	88 89       	ldd	r24, Y+16	; 0x10
    29a4:	99 89       	ldd	r25, Y+17	; 0x11
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	f1 f7       	brne	.-4      	; 0x29a6 <LCD_send_command_4bit+0x5be>
    29aa:	99 8b       	std	Y+17, r25	; 0x11
    29ac:	88 8b       	std	Y+16, r24	; 0x10
    29ae:	0f c0       	rjmp	.+30     	; 0x29ce <LCD_send_command_4bit+0x5e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    29b2:	78 a1       	ldd	r23, Y+32	; 0x20
    29b4:	89 a1       	ldd	r24, Y+33	; 0x21
    29b6:	9a a1       	ldd	r25, Y+34	; 0x22
    29b8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	8e 8f       	std	Y+30, r24	; 0x1e
    29c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29c4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29c8:	8a 95       	dec	r24
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <LCD_send_command_4bit+0x5e0>
    29cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	clearbit(LCD_control_PORT,EN);
    29ce:	a8 e3       	ldi	r26, 0x38	; 56
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e8 e3       	ldi	r30, 0x38	; 56
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	87 7f       	andi	r24, 0xF7	; 247
    29da:	8c 93       	st	X, r24
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	a0 e8       	ldi	r26, 0x80	; 128
    29e2:	bf e3       	ldi	r27, 0x3F	; 63
    29e4:	8b 87       	std	Y+11, r24	; 0x0b
    29e6:	9c 87       	std	Y+12, r25	; 0x0c
    29e8:	ad 87       	std	Y+13, r26	; 0x0d
    29ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	4a e7       	ldi	r20, 0x7A	; 122
    29fa:	55 e4       	ldi	r21, 0x45	; 69
    29fc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	8f 83       	std	Y+7, r24	; 0x07
    2a06:	98 87       	std	Y+8, r25	; 0x08
    2a08:	a9 87       	std	Y+9, r26	; 0x09
    2a0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0e:	78 85       	ldd	r23, Y+8	; 0x08
    2a10:	89 85       	ldd	r24, Y+9	; 0x09
    2a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e8       	ldi	r20, 0x80	; 128
    2a1a:	5f e3       	ldi	r21, 0x3F	; 63
    2a1c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2a20:	88 23       	and	r24, r24
    2a22:	2c f4       	brge	.+10     	; 0x2a2e <LCD_send_command_4bit+0x646>
		__ticks = 1;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9e 83       	std	Y+6, r25	; 0x06
    2a2a:	8d 83       	std	Y+5, r24	; 0x05
    2a2c:	3f c0       	rjmp	.+126    	; 0x2aac <LCD_send_command_4bit+0x6c4>
	else if (__tmp > 65535)
    2a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a30:	78 85       	ldd	r23, Y+8	; 0x08
    2a32:	89 85       	ldd	r24, Y+9	; 0x09
    2a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	3f ef       	ldi	r19, 0xFF	; 255
    2a3a:	4f e7       	ldi	r20, 0x7F	; 127
    2a3c:	57 e4       	ldi	r21, 0x47	; 71
    2a3e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2a42:	18 16       	cp	r1, r24
    2a44:	4c f5       	brge	.+82     	; 0x2a98 <LCD_send_command_4bit+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e2       	ldi	r20, 0x20	; 32
    2a54:	51 e4       	ldi	r21, 0x41	; 65
    2a56:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	bc 01       	movw	r22, r24
    2a60:	cd 01       	movw	r24, r26
    2a62:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	9e 83       	std	Y+6, r25	; 0x06
    2a6c:	8d 83       	std	Y+5, r24	; 0x05
    2a6e:	0f c0       	rjmp	.+30     	; 0x2a8e <LCD_send_command_4bit+0x6a6>
    2a70:	80 e9       	ldi	r24, 0x90	; 144
    2a72:	91 e0       	ldi	r25, 0x01	; 1
    2a74:	9c 83       	std	Y+4, r25	; 0x04
    2a76:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	f1 f7       	brne	.-4      	; 0x2a7c <LCD_send_command_4bit+0x694>
    2a80:	9c 83       	std	Y+4, r25	; 0x04
    2a82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a84:	8d 81       	ldd	r24, Y+5	; 0x05
    2a86:	9e 81       	ldd	r25, Y+6	; 0x06
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	9e 83       	std	Y+6, r25	; 0x06
    2a8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a90:	9e 81       	ldd	r25, Y+6	; 0x06
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	69 f7       	brne	.-38     	; 0x2a70 <LCD_send_command_4bit+0x688>
    2a96:	14 c0       	rjmp	.+40     	; 0x2ac0 <LCD_send_command_4bit+0x6d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a98:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9a:	78 85       	ldd	r23, Y+8	; 0x08
    2a9c:	89 85       	ldd	r24, Y+9	; 0x09
    2a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	9e 83       	std	Y+6, r25	; 0x06
    2aaa:	8d 83       	std	Y+5, r24	; 0x05
    2aac:	8d 81       	ldd	r24, Y+5	; 0x05
    2aae:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab0:	9a 83       	std	Y+2, r25	; 0x02
    2ab2:	89 83       	std	Y+1, r24	; 0x01
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <LCD_send_command_4bit+0x6d0>
    2abc:	9a 83       	std	Y+2, r25	; 0x02
    2abe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2ac0:	c9 5a       	subi	r28, 0xA9	; 169
    2ac2:	df 4f       	sbci	r29, 0xFF	; 255
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	de bf       	out	0x3e, r29	; 62
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	cf 91       	pop	r28
    2ad0:	df 91       	pop	r29
    2ad2:	1f 91       	pop	r17
    2ad4:	0f 91       	pop	r16
    2ad6:	08 95       	ret

00002ad8 <LCD_INIT_4bit>:

void LCD_INIT_4bit(void)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
	LCD_DATA_DIR|= 0xf0;
    2aec:	aa e3       	ldi	r26, 0x3A	; 58
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	ea e3       	ldi	r30, 0x3A	; 58
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	80 6f       	ori	r24, 0xF0	; 240
    2af8:	8c 93       	st	X, r24
	setbit(LCD_control_DIR,EN);
    2afa:	a7 e3       	ldi	r26, 0x37	; 55
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	e7 e3       	ldi	r30, 0x37	; 55
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	88 60       	ori	r24, 0x08	; 8
    2b06:	8c 93       	st	X, r24
	setbit(LCD_control_DIR,RS);
    2b08:	a7 e3       	ldi	r26, 0x37	; 55
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	e7 e3       	ldi	r30, 0x37	; 55
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	82 60       	ori	r24, 0x02	; 2
    2b14:	8c 93       	st	X, r24
	setbit(LCD_control_DIR,RW);
    2b16:	a7 e3       	ldi	r26, 0x37	; 55
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	e7 e3       	ldi	r30, 0x37	; 55
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	84 60       	ori	r24, 0x04	; 4
    2b22:	8c 93       	st	X, r24
	LCD_send_command_4bit(0x02);// return home 
    2b24:	82 e0       	ldi	r24, 0x02	; 2
    2b26:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_send_command_4bit>
	LCD_send_command_4bit(0x28);// 2 line  and 4 bit mode
    2b2a:	88 e2       	ldi	r24, 0x28	; 40
    2b2c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_send_command_4bit>
	LCD_send_command_4bit(0x0c);// display on 
    2b30:	8c e0       	ldi	r24, 0x0C	; 12
    2b32:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_send_command_4bit>
	LCD_send_command_4bit(0x06);// auto increment 
    2b36:	86 e0       	ldi	r24, 0x06	; 6
    2b38:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_send_command_4bit>
	LCD_send_command_4bit(0x01);// clear screen 
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_send_command_4bit>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	a0 ea       	ldi	r26, 0xA0	; 160
    2b48:	b1 e4       	ldi	r27, 0x41	; 65
    2b4a:	8b 87       	std	Y+11, r24	; 0x0b
    2b4c:	9c 87       	std	Y+12, r25	; 0x0c
    2b4e:	ad 87       	std	Y+13, r26	; 0x0d
    2b50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a e7       	ldi	r20, 0x7A	; 122
    2b60:	55 e4       	ldi	r21, 0x45	; 69
    2b62:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	8f 83       	std	Y+7, r24	; 0x07
    2b6c:	98 87       	std	Y+8, r25	; 0x08
    2b6e:	a9 87       	std	Y+9, r26	; 0x09
    2b70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b72:	6f 81       	ldd	r22, Y+7	; 0x07
    2b74:	78 85       	ldd	r23, Y+8	; 0x08
    2b76:	89 85       	ldd	r24, Y+9	; 0x09
    2b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e8       	ldi	r20, 0x80	; 128
    2b80:	5f e3       	ldi	r21, 0x3F	; 63
    2b82:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2b86:	88 23       	and	r24, r24
    2b88:	2c f4       	brge	.+10     	; 0x2b94 <LCD_INIT_4bit+0xbc>
		__ticks = 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9e 83       	std	Y+6, r25	; 0x06
    2b90:	8d 83       	std	Y+5, r24	; 0x05
    2b92:	3f c0       	rjmp	.+126    	; 0x2c12 <LCD_INIT_4bit+0x13a>
	else if (__tmp > 65535)
    2b94:	6f 81       	ldd	r22, Y+7	; 0x07
    2b96:	78 85       	ldd	r23, Y+8	; 0x08
    2b98:	89 85       	ldd	r24, Y+9	; 0x09
    2b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ba0:	4f e7       	ldi	r20, 0x7F	; 127
    2ba2:	57 e4       	ldi	r21, 0x47	; 71
    2ba4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2ba8:	18 16       	cp	r1, r24
    2baa:	4c f5       	brge	.+82     	; 0x2bfe <LCD_INIT_4bit+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e2       	ldi	r20, 0x20	; 32
    2bba:	51 e4       	ldi	r21, 0x41	; 65
    2bbc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	9e 83       	std	Y+6, r25	; 0x06
    2bd2:	8d 83       	std	Y+5, r24	; 0x05
    2bd4:	0f c0       	rjmp	.+30     	; 0x2bf4 <LCD_INIT_4bit+0x11c>
    2bd6:	80 e9       	ldi	r24, 0x90	; 144
    2bd8:	91 e0       	ldi	r25, 0x01	; 1
    2bda:	9c 83       	std	Y+4, r25	; 0x04
    2bdc:	8b 83       	std	Y+3, r24	; 0x03
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	9c 81       	ldd	r25, Y+4	; 0x04
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <LCD_INIT_4bit+0x10a>
    2be6:	9c 83       	std	Y+4, r25	; 0x04
    2be8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bea:	8d 81       	ldd	r24, Y+5	; 0x05
    2bec:	9e 81       	ldd	r25, Y+6	; 0x06
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	9e 83       	std	Y+6, r25	; 0x06
    2bf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	69 f7       	brne	.-38     	; 0x2bd6 <LCD_INIT_4bit+0xfe>
    2bfc:	14 c0       	rjmp	.+40     	; 0x2c26 <LCD_INIT_4bit+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2c00:	78 85       	ldd	r23, Y+8	; 0x08
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9e 83       	std	Y+6, r25	; 0x06
    2c10:	8d 83       	std	Y+5, r24	; 0x05
    2c12:	8d 81       	ldd	r24, Y+5	; 0x05
    2c14:	9e 81       	ldd	r25, Y+6	; 0x06
    2c16:	9a 83       	std	Y+2, r25	; 0x02
    2c18:	89 83       	std	Y+1, r24	; 0x01
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	f1 f7       	brne	.-4      	; 0x2c1e <LCD_INIT_4bit+0x146>
    2c22:	9a 83       	std	Y+2, r25	; 0x02
    2c24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	
	
}
    2c26:	2e 96       	adiw	r28, 0x0e	; 14
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	08 95       	ret

00002c38 <LCD_send_string_4bit>:
void LCD_send_string_4bit( char* str)
{
    2c38:	df 93       	push	r29
    2c3a:	cf 93       	push	r28
    2c3c:	00 d0       	rcall	.+0      	; 0x2c3e <LCD_send_string_4bit+0x6>
    2c3e:	00 d0       	rcall	.+0      	; 0x2c40 <LCD_send_string_4bit+0x8>
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03
	int count =0;
    2c48:	1a 82       	std	Y+2, r1	; 0x02
    2c4a:	19 82       	std	Y+1, r1	; 0x01
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <LCD_send_string_4bit+0x34>
	while(str[count]!=0)
	{
		LCD_send_data_4bit(str[count]);
    2c4e:	29 81       	ldd	r18, Y+1	; 0x01
    2c50:	3a 81       	ldd	r19, Y+2	; 0x02
    2c52:	8b 81       	ldd	r24, Y+3	; 0x03
    2c54:	9c 81       	ldd	r25, Y+4	; 0x04
    2c56:	fc 01       	movw	r30, r24
    2c58:	e2 0f       	add	r30, r18
    2c5a:	f3 1f       	adc	r31, r19
    2c5c:	80 81       	ld	r24, Z
    2c5e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_send_data_4bit>
		count++;
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	9a 81       	ldd	r25, Y+2	; 0x02
    2c66:	01 96       	adiw	r24, 0x01	; 1
    2c68:	9a 83       	std	Y+2, r25	; 0x02
    2c6a:	89 83       	std	Y+1, r24	; 0x01
	
}
void LCD_send_string_4bit( char* str)
{
	int count =0;
	while(str[count]!=0)
    2c6c:	29 81       	ldd	r18, Y+1	; 0x01
    2c6e:	3a 81       	ldd	r19, Y+2	; 0x02
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	9c 81       	ldd	r25, Y+4	; 0x04
    2c74:	fc 01       	movw	r30, r24
    2c76:	e2 0f       	add	r30, r18
    2c78:	f3 1f       	adc	r31, r19
    2c7a:	80 81       	ld	r24, Z
    2c7c:	88 23       	and	r24, r24
    2c7e:	39 f7       	brne	.-50     	; 0x2c4e <LCD_send_string_4bit+0x16>
	{
		LCD_send_data_4bit(str[count]);
		count++;
	}
}
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <init_servo>:
#include <util/delay.h>		/* Include Delay header file */



void init_servo(void)
{
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<PD7);	/* Make OC1A pin as output */
    2c96:	a1 e3       	ldi	r26, 0x31	; 49
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e1 e3       	ldi	r30, 0x31	; 49
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	80 68       	ori	r24, 0x80	; 128
    2ca2:	8c 93       	st	X, r24

	/* Set Fast PWM */
	TCCR2 |= (1<<WGM20)|(1<<WGM21);
    2ca4:	a5 e4       	ldi	r26, 0x45	; 69
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	e5 e4       	ldi	r30, 0x45	; 69
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	88 64       	ori	r24, 0x48	; 72
    2cb0:	8c 93       	st	X, r24

	/*Non-inverting mode*/
	TCCR2 |= (1<<COM21);
    2cb2:	a5 e4       	ldi	r26, 0x45	; 69
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e5 e4       	ldi	r30, 0x45	; 69
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	80 62       	ori	r24, 0x20	; 32
    2cbe:	8c 93       	st	X, r24

	/*Prescaler /128 */
	TCCR2 |= (1<<CS22) | (1<<CS20);
    2cc0:	a5 e4       	ldi	r26, 0x45	; 69
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	e5 e4       	ldi	r30, 0x45	; 69
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
    2cca:	85 60       	ori	r24, 0x05	; 5
    2ccc:	8c 93       	st	X, r24
}
    2cce:	cf 91       	pop	r28
    2cd0:	df 91       	pop	r29
    2cd2:	08 95       	ret

00002cd4 <rotate_servo_right>:

void rotate_servo_right(void)
{
    2cd4:	df 93       	push	r29
    2cd6:	cf 93       	push	r28
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
    2cdc:	2e 97       	sbiw	r28, 0x0e	; 14
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
	OCR2 = right_dir;
    2ce8:	e3 e4       	ldi	r30, 0x43	; 67
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 e3       	ldi	r24, 0x30	; 48
    2cee:	80 83       	st	Z, r24
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	90 e8       	ldi	r25, 0x80	; 128
    2cf4:	ab eb       	ldi	r26, 0xBB	; 187
    2cf6:	b4 e4       	ldi	r27, 0x44	; 68
    2cf8:	8b 87       	std	Y+11, r24	; 0x0b
    2cfa:	9c 87       	std	Y+12, r25	; 0x0c
    2cfc:	ad 87       	std	Y+13, r26	; 0x0d
    2cfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	4a e7       	ldi	r20, 0x7A	; 122
    2d0e:	55 e4       	ldi	r21, 0x45	; 69
    2d10:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	8f 83       	std	Y+7, r24	; 0x07
    2d1a:	98 87       	std	Y+8, r25	; 0x08
    2d1c:	a9 87       	std	Y+9, r26	; 0x09
    2d1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d20:	6f 81       	ldd	r22, Y+7	; 0x07
    2d22:	78 85       	ldd	r23, Y+8	; 0x08
    2d24:	89 85       	ldd	r24, Y+9	; 0x09
    2d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	40 e8       	ldi	r20, 0x80	; 128
    2d2e:	5f e3       	ldi	r21, 0x3F	; 63
    2d30:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2d34:	88 23       	and	r24, r24
    2d36:	2c f4       	brge	.+10     	; 0x2d42 <rotate_servo_right+0x6e>
		__ticks = 1;
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	9e 83       	std	Y+6, r25	; 0x06
    2d3e:	8d 83       	std	Y+5, r24	; 0x05
    2d40:	3f c0       	rjmp	.+126    	; 0x2dc0 <rotate_servo_right+0xec>
	else if (__tmp > 65535)
    2d42:	6f 81       	ldd	r22, Y+7	; 0x07
    2d44:	78 85       	ldd	r23, Y+8	; 0x08
    2d46:	89 85       	ldd	r24, Y+9	; 0x09
    2d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	3f ef       	ldi	r19, 0xFF	; 255
    2d4e:	4f e7       	ldi	r20, 0x7F	; 127
    2d50:	57 e4       	ldi	r21, 0x47	; 71
    2d52:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2d56:	18 16       	cp	r1, r24
    2d58:	4c f5       	brge	.+82     	; 0x2dac <rotate_servo_right+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	40 e2       	ldi	r20, 0x20	; 32
    2d68:	51 e4       	ldi	r21, 0x41	; 65
    2d6a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	bc 01       	movw	r22, r24
    2d74:	cd 01       	movw	r24, r26
    2d76:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	9e 83       	std	Y+6, r25	; 0x06
    2d80:	8d 83       	std	Y+5, r24	; 0x05
    2d82:	0f c0       	rjmp	.+30     	; 0x2da2 <rotate_servo_right+0xce>
    2d84:	80 e9       	ldi	r24, 0x90	; 144
    2d86:	91 e0       	ldi	r25, 0x01	; 1
    2d88:	9c 83       	std	Y+4, r25	; 0x04
    2d8a:	8b 83       	std	Y+3, r24	; 0x03
    2d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <rotate_servo_right+0xbc>
    2d94:	9c 83       	std	Y+4, r25	; 0x04
    2d96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d98:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	9e 83       	std	Y+6, r25	; 0x06
    2da0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da2:	8d 81       	ldd	r24, Y+5	; 0x05
    2da4:	9e 81       	ldd	r25, Y+6	; 0x06
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	69 f7       	brne	.-38     	; 0x2d84 <rotate_servo_right+0xb0>
    2daa:	14 c0       	rjmp	.+40     	; 0x2dd4 <rotate_servo_right+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dac:	6f 81       	ldd	r22, Y+7	; 0x07
    2dae:	78 85       	ldd	r23, Y+8	; 0x08
    2db0:	89 85       	ldd	r24, Y+9	; 0x09
    2db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	9e 83       	std	Y+6, r25	; 0x06
    2dbe:	8d 83       	std	Y+5, r24	; 0x05
    2dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc4:	9a 83       	std	Y+2, r25	; 0x02
    2dc6:	89 83       	std	Y+1, r24	; 0x01
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	9a 81       	ldd	r25, Y+2	; 0x02
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <rotate_servo_right+0xf8>
    2dd0:	9a 83       	std	Y+2, r25	; 0x02
    2dd2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);

	if (measure_distance() < 30)
    2dd4:	0e 94 32 18 	call	0x3064	; 0x3064 <measure_distance>
    2dd8:	8e 31       	cpi	r24, 0x1E	; 30
    2dda:	91 05       	cpc	r25, r1
    2ddc:	18 f4       	brcc	.+6      	; 0x2de4 <rotate_servo_right+0x110>
	{
		rotate_servo_left();
    2dde:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <rotate_servo_left>
    2de2:	04 c0       	rjmp	.+8      	; 0x2dec <rotate_servo_right+0x118>
	}
	else
	{
		rotate_servo_mid();
    2de4:	0e 94 94 17 	call	0x2f28	; 0x2f28 <rotate_servo_mid>
		turn_right();
    2de8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <turn_right>
	}
}
    2dec:	2e 96       	adiw	r28, 0x0e	; 14
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	cf 91       	pop	r28
    2dfa:	df 91       	pop	r29
    2dfc:	08 95       	ret

00002dfe <rotate_servo_left>:

void rotate_servo_left(void)
{
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
    2e06:	2e 97       	sbiw	r28, 0x0e	; 14
    2e08:	0f b6       	in	r0, 0x3f	; 63
    2e0a:	f8 94       	cli
    2e0c:	de bf       	out	0x3e, r29	; 62
    2e0e:	0f be       	out	0x3f, r0	; 63
    2e10:	cd bf       	out	0x3d, r28	; 61
	OCR2 = left_dir;
    2e12:	e3 e4       	ldi	r30, 0x43	; 67
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	8e ef       	ldi	r24, 0xFE	; 254
    2e18:	80 83       	st	Z, r24
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	90 e8       	ldi	r25, 0x80	; 128
    2e1e:	ab eb       	ldi	r26, 0xBB	; 187
    2e20:	b4 e4       	ldi	r27, 0x44	; 68
    2e22:	8b 87       	std	Y+11, r24	; 0x0b
    2e24:	9c 87       	std	Y+12, r25	; 0x0c
    2e26:	ad 87       	std	Y+13, r26	; 0x0d
    2e28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	4a e7       	ldi	r20, 0x7A	; 122
    2e38:	55 e4       	ldi	r21, 0x45	; 69
    2e3a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	8f 83       	std	Y+7, r24	; 0x07
    2e44:	98 87       	std	Y+8, r25	; 0x08
    2e46:	a9 87       	std	Y+9, r26	; 0x09
    2e48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4c:	78 85       	ldd	r23, Y+8	; 0x08
    2e4e:	89 85       	ldd	r24, Y+9	; 0x09
    2e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	40 e8       	ldi	r20, 0x80	; 128
    2e58:	5f e3       	ldi	r21, 0x3F	; 63
    2e5a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2e5e:	88 23       	and	r24, r24
    2e60:	2c f4       	brge	.+10     	; 0x2e6c <rotate_servo_left+0x6e>
		__ticks = 1;
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	9e 83       	std	Y+6, r25	; 0x06
    2e68:	8d 83       	std	Y+5, r24	; 0x05
    2e6a:	3f c0       	rjmp	.+126    	; 0x2eea <rotate_servo_left+0xec>
	else if (__tmp > 65535)
    2e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6e:	78 85       	ldd	r23, Y+8	; 0x08
    2e70:	89 85       	ldd	r24, Y+9	; 0x09
    2e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	3f ef       	ldi	r19, 0xFF	; 255
    2e78:	4f e7       	ldi	r20, 0x7F	; 127
    2e7a:	57 e4       	ldi	r21, 0x47	; 71
    2e7c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2e80:	18 16       	cp	r1, r24
    2e82:	4c f5       	brge	.+82     	; 0x2ed6 <rotate_servo_left+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	40 e2       	ldi	r20, 0x20	; 32
    2e92:	51 e4       	ldi	r21, 0x41	; 65
    2e94:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	bc 01       	movw	r22, r24
    2e9e:	cd 01       	movw	r24, r26
    2ea0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	9e 83       	std	Y+6, r25	; 0x06
    2eaa:	8d 83       	std	Y+5, r24	; 0x05
    2eac:	0f c0       	rjmp	.+30     	; 0x2ecc <rotate_servo_left+0xce>
    2eae:	80 e9       	ldi	r24, 0x90	; 144
    2eb0:	91 e0       	ldi	r25, 0x01	; 1
    2eb2:	9c 83       	std	Y+4, r25	; 0x04
    2eb4:	8b 83       	std	Y+3, r24	; 0x03
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	f1 f7       	brne	.-4      	; 0x2eba <rotate_servo_left+0xbc>
    2ebe:	9c 83       	std	Y+4, r25	; 0x04
    2ec0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	9e 83       	std	Y+6, r25	; 0x06
    2eca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ece:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed0:	00 97       	sbiw	r24, 0x00	; 0
    2ed2:	69 f7       	brne	.-38     	; 0x2eae <rotate_servo_left+0xb0>
    2ed4:	14 c0       	rjmp	.+40     	; 0x2efe <rotate_servo_left+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed8:	78 85       	ldd	r23, Y+8	; 0x08
    2eda:	89 85       	ldd	r24, Y+9	; 0x09
    2edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ede:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	9e 83       	std	Y+6, r25	; 0x06
    2ee8:	8d 83       	std	Y+5, r24	; 0x05
    2eea:	8d 81       	ldd	r24, Y+5	; 0x05
    2eec:	9e 81       	ldd	r25, Y+6	; 0x06
    2eee:	9a 83       	std	Y+2, r25	; 0x02
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	f1 f7       	brne	.-4      	; 0x2ef6 <rotate_servo_left+0xf8>
    2efa:	9a 83       	std	Y+2, r25	; 0x02
    2efc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);

	if (measure_distance() < 30)
    2efe:	0e 94 32 18 	call	0x3064	; 0x3064 <measure_distance>
    2f02:	8e 31       	cpi	r24, 0x1E	; 30
    2f04:	91 05       	cpc	r25, r1
    2f06:	18 f4       	brcc	.+6      	; 0x2f0e <rotate_servo_left+0x110>
	{
		move_backward();
    2f08:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <move_backward>
    2f0c:	02 c0       	rjmp	.+4      	; 0x2f12 <rotate_servo_left+0x114>
	}
	else
	{
		turn_left();
    2f0e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <turn_left>
	}
	rotate_servo_mid();
    2f12:	0e 94 94 17 	call	0x2f28	; 0x2f28 <rotate_servo_mid>
}
    2f16:	2e 96       	adiw	r28, 0x0e	; 14
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <rotate_servo_mid>:

void rotate_servo_mid(void)
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	2e 97       	sbiw	r28, 0x0e	; 14
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
	OCR2 = middle_dir;
    2f3c:	e3 e4       	ldi	r30, 0x43	; 67
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	84 eb       	ldi	r24, 0xB4	; 180
    2f42:	80 83       	st	Z, r24
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	90 e8       	ldi	r25, 0x80	; 128
    2f48:	ab eb       	ldi	r26, 0xBB	; 187
    2f4a:	b4 e4       	ldi	r27, 0x44	; 68
    2f4c:	8b 87       	std	Y+11, r24	; 0x0b
    2f4e:	9c 87       	std	Y+12, r25	; 0x0c
    2f50:	ad 87       	std	Y+13, r26	; 0x0d
    2f52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	4a e7       	ldi	r20, 0x7A	; 122
    2f62:	55 e4       	ldi	r21, 0x45	; 69
    2f64:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	8f 83       	std	Y+7, r24	; 0x07
    2f6e:	98 87       	std	Y+8, r25	; 0x08
    2f70:	a9 87       	std	Y+9, r26	; 0x09
    2f72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f74:	6f 81       	ldd	r22, Y+7	; 0x07
    2f76:	78 85       	ldd	r23, Y+8	; 0x08
    2f78:	89 85       	ldd	r24, Y+9	; 0x09
    2f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e8       	ldi	r20, 0x80	; 128
    2f82:	5f e3       	ldi	r21, 0x3F	; 63
    2f84:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2f88:	88 23       	and	r24, r24
    2f8a:	2c f4       	brge	.+10     	; 0x2f96 <rotate_servo_mid+0x6e>
		__ticks = 1;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	8d 83       	std	Y+5, r24	; 0x05
    2f94:	3f c0       	rjmp	.+126    	; 0x3014 <rotate_servo_mid+0xec>
	else if (__tmp > 65535)
    2f96:	6f 81       	ldd	r22, Y+7	; 0x07
    2f98:	78 85       	ldd	r23, Y+8	; 0x08
    2f9a:	89 85       	ldd	r24, Y+9	; 0x09
    2f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	3f ef       	ldi	r19, 0xFF	; 255
    2fa2:	4f e7       	ldi	r20, 0x7F	; 127
    2fa4:	57 e4       	ldi	r21, 0x47	; 71
    2fa6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2faa:	18 16       	cp	r1, r24
    2fac:	4c f5       	brge	.+82     	; 0x3000 <rotate_servo_mid+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e2       	ldi	r20, 0x20	; 32
    2fbc:	51 e4       	ldi	r21, 0x41	; 65
    2fbe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	9e 83       	std	Y+6, r25	; 0x06
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
    2fd6:	0f c0       	rjmp	.+30     	; 0x2ff6 <rotate_servo_mid+0xce>
    2fd8:	80 e9       	ldi	r24, 0x90	; 144
    2fda:	91 e0       	ldi	r25, 0x01	; 1
    2fdc:	9c 83       	std	Y+4, r25	; 0x04
    2fde:	8b 83       	std	Y+3, r24	; 0x03
    2fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <rotate_servo_mid+0xbc>
    2fe8:	9c 83       	std	Y+4, r25	; 0x04
    2fea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fec:	8d 81       	ldd	r24, Y+5	; 0x05
    2fee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	9e 83       	std	Y+6, r25	; 0x06
    2ff4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	69 f7       	brne	.-38     	; 0x2fd8 <rotate_servo_mid+0xb0>
    2ffe:	14 c0       	rjmp	.+40     	; 0x3028 <rotate_servo_mid+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3000:	6f 81       	ldd	r22, Y+7	; 0x07
    3002:	78 85       	ldd	r23, Y+8	; 0x08
    3004:	89 85       	ldd	r24, Y+9	; 0x09
    3006:	9a 85       	ldd	r25, Y+10	; 0x0a
    3008:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	9e 83       	std	Y+6, r25	; 0x06
    3012:	8d 83       	std	Y+5, r24	; 0x05
    3014:	8d 81       	ldd	r24, Y+5	; 0x05
    3016:	9e 81       	ldd	r25, Y+6	; 0x06
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	89 83       	std	Y+1, r24	; 0x01
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	9a 81       	ldd	r25, Y+2	; 0x02
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <rotate_servo_mid+0xf8>
    3024:	9a 83       	std	Y+2, r25	; 0x02
    3026:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
}
    3028:	2e 96       	adiw	r28, 0x0e	; 14
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	cf 91       	pop	r28
    3036:	df 91       	pop	r29
    3038:	08 95       	ret

0000303a <ultrasonic_init>:
#define ECHO_PIN PD6

char string[10];

void ultrasonic_init(void)
{
    303a:	df 93       	push	r29
    303c:	cf 93       	push	r28
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~(1 << ECHO_PIN);  // set echo pin as input
    3042:	a1 e3       	ldi	r26, 0x31	; 49
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	e1 e3       	ldi	r30, 0x31	; 49
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
    304c:	8f 7b       	andi	r24, 0xBF	; 191
    304e:	8c 93       	st	X, r24
	DDRA |= (1 << TRIGGER_PIN);  // set trigger pin as output
    3050:	aa e3       	ldi	r26, 0x3A	; 58
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	ea e3       	ldi	r30, 0x3A	; 58
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	81 60       	ori	r24, 0x01	; 1
    305c:	8c 93       	st	X, r24
}
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	08 95       	ret

00003064 <measure_distance>:

u16 measure_distance() {
    3064:	df 93       	push	r29
    3066:	cf 93       	push	r28
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	e4 97       	sbiw	r28, 0x34	; 52
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61

	TCCR1B |= (1 << CS11);  // Set the prescaler to 8
    3078:	ae e4       	ldi	r26, 0x4E	; 78
    307a:	b0 e0       	ldi	r27, 0x00	; 0
    307c:	ee e4       	ldi	r30, 0x4E	; 78
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	80 81       	ld	r24, Z
    3082:	82 60       	ori	r24, 0x02	; 2
    3084:	8c 93       	st	X, r24
	TCNT1 = 0;              // Initialize the timer to 0
    3086:	ec e4       	ldi	r30, 0x4C	; 76
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	11 82       	std	Z+1, r1	; 0x01
    308c:	10 82       	st	Z, r1

	// Set trigger pin low for 2 microseconds
	PORTA &= ~(1 << TRIGGER_PIN);
    308e:	ab e3       	ldi	r26, 0x3B	; 59
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	eb e3       	ldi	r30, 0x3B	; 59
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	8e 7f       	andi	r24, 0xFE	; 254
    309a:	8c 93       	st	X, r24
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	a0 e0       	ldi	r26, 0x00	; 0
    30a2:	b0 e4       	ldi	r27, 0x40	; 64
    30a4:	8d a7       	std	Y+45, r24	; 0x2d
    30a6:	9e a7       	std	Y+46, r25	; 0x2e
    30a8:	af a7       	std	Y+47, r26	; 0x2f
    30aa:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30ac:	6d a5       	ldd	r22, Y+45	; 0x2d
    30ae:	7e a5       	ldd	r23, Y+46	; 0x2e
    30b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30b2:	98 a9       	ldd	r25, Y+48	; 0x30
    30b4:	2b ea       	ldi	r18, 0xAB	; 171
    30b6:	3a ea       	ldi	r19, 0xAA	; 170
    30b8:	4a ea       	ldi	r20, 0xAA	; 170
    30ba:	50 e4       	ldi	r21, 0x40	; 64
    30bc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	89 a7       	std	Y+41, r24	; 0x29
    30c6:	9a a7       	std	Y+42, r25	; 0x2a
    30c8:	ab a7       	std	Y+43, r26	; 0x2b
    30ca:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    30cc:	69 a5       	ldd	r22, Y+41	; 0x29
    30ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    30d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    30d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e8       	ldi	r20, 0x80	; 128
    30da:	5f e3       	ldi	r21, 0x3F	; 63
    30dc:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    30e0:	88 23       	and	r24, r24
    30e2:	1c f4       	brge	.+6      	; 0x30ea <measure_distance+0x86>
		__ticks = 1;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	88 a7       	std	Y+40, r24	; 0x28
    30e8:	91 c0       	rjmp	.+290    	; 0x320c <measure_distance+0x1a8>
	else if (__tmp > 255)
    30ea:	69 a5       	ldd	r22, Y+41	; 0x29
    30ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    30ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    30f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	4f e7       	ldi	r20, 0x7F	; 127
    30f8:	53 e4       	ldi	r21, 0x43	; 67
    30fa:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    30fe:	18 16       	cp	r1, r24
    3100:	0c f0       	brlt	.+2      	; 0x3104 <measure_distance+0xa0>
    3102:	7b c0       	rjmp	.+246    	; 0x31fa <measure_distance+0x196>
	{
		_delay_ms(__us / 1000.0);
    3104:	6d a5       	ldd	r22, Y+45	; 0x2d
    3106:	7e a5       	ldd	r23, Y+46	; 0x2e
    3108:	8f a5       	ldd	r24, Y+47	; 0x2f
    310a:	98 a9       	ldd	r25, Y+48	; 0x30
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	4a e7       	ldi	r20, 0x7A	; 122
    3112:	54 e4       	ldi	r21, 0x44	; 68
    3114:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	8c a3       	std	Y+36, r24	; 0x24
    311e:	9d a3       	std	Y+37, r25	; 0x25
    3120:	ae a3       	std	Y+38, r26	; 0x26
    3122:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3124:	6c a1       	ldd	r22, Y+36	; 0x24
    3126:	7d a1       	ldd	r23, Y+37	; 0x25
    3128:	8e a1       	ldd	r24, Y+38	; 0x26
    312a:	9f a1       	ldd	r25, Y+39	; 0x27
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	4a e7       	ldi	r20, 0x7A	; 122
    3132:	55 e4       	ldi	r21, 0x45	; 69
    3134:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	88 a3       	std	Y+32, r24	; 0x20
    313e:	99 a3       	std	Y+33, r25	; 0x21
    3140:	aa a3       	std	Y+34, r26	; 0x22
    3142:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3144:	68 a1       	ldd	r22, Y+32	; 0x20
    3146:	79 a1       	ldd	r23, Y+33	; 0x21
    3148:	8a a1       	ldd	r24, Y+34	; 0x22
    314a:	9b a1       	ldd	r25, Y+35	; 0x23
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	40 e8       	ldi	r20, 0x80	; 128
    3152:	5f e3       	ldi	r21, 0x3F	; 63
    3154:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3158:	88 23       	and	r24, r24
    315a:	2c f4       	brge	.+10     	; 0x3166 <measure_distance+0x102>
		__ticks = 1;
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	9f 8f       	std	Y+31, r25	; 0x1f
    3162:	8e 8f       	std	Y+30, r24	; 0x1e
    3164:	3f c0       	rjmp	.+126    	; 0x31e4 <measure_distance+0x180>
	else if (__tmp > 65535)
    3166:	68 a1       	ldd	r22, Y+32	; 0x20
    3168:	79 a1       	ldd	r23, Y+33	; 0x21
    316a:	8a a1       	ldd	r24, Y+34	; 0x22
    316c:	9b a1       	ldd	r25, Y+35	; 0x23
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	3f ef       	ldi	r19, 0xFF	; 255
    3172:	4f e7       	ldi	r20, 0x7F	; 127
    3174:	57 e4       	ldi	r21, 0x47	; 71
    3176:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    317a:	18 16       	cp	r1, r24
    317c:	4c f5       	brge	.+82     	; 0x31d0 <measure_distance+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317e:	6c a1       	ldd	r22, Y+36	; 0x24
    3180:	7d a1       	ldd	r23, Y+37	; 0x25
    3182:	8e a1       	ldd	r24, Y+38	; 0x26
    3184:	9f a1       	ldd	r25, Y+39	; 0x27
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	40 e2       	ldi	r20, 0x20	; 32
    318c:	51 e4       	ldi	r21, 0x41	; 65
    318e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	bc 01       	movw	r22, r24
    3198:	cd 01       	movw	r24, r26
    319a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	9f 8f       	std	Y+31, r25	; 0x1f
    31a4:	8e 8f       	std	Y+30, r24	; 0x1e
    31a6:	0f c0       	rjmp	.+30     	; 0x31c6 <measure_distance+0x162>
    31a8:	80 e9       	ldi	r24, 0x90	; 144
    31aa:	91 e0       	ldi	r25, 0x01	; 1
    31ac:	9d 8f       	std	Y+29, r25	; 0x1d
    31ae:	8c 8f       	std	Y+28, r24	; 0x1c
    31b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	f1 f7       	brne	.-4      	; 0x31b4 <measure_distance+0x150>
    31b8:	9d 8f       	std	Y+29, r25	; 0x1d
    31ba:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31be:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31c0:	01 97       	sbiw	r24, 0x01	; 1
    31c2:	9f 8f       	std	Y+31, r25	; 0x1f
    31c4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31ca:	00 97       	sbiw	r24, 0x00	; 0
    31cc:	69 f7       	brne	.-38     	; 0x31a8 <measure_distance+0x144>
    31ce:	24 c0       	rjmp	.+72     	; 0x3218 <measure_distance+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d0:	68 a1       	ldd	r22, Y+32	; 0x20
    31d2:	79 a1       	ldd	r23, Y+33	; 0x21
    31d4:	8a a1       	ldd	r24, Y+34	; 0x22
    31d6:	9b a1       	ldd	r25, Y+35	; 0x23
    31d8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	9f 8f       	std	Y+31, r25	; 0x1f
    31e2:	8e 8f       	std	Y+30, r24	; 0x1e
    31e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31e8:	9b 8f       	std	Y+27, r25	; 0x1b
    31ea:	8a 8f       	std	Y+26, r24	; 0x1a
    31ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31f0:	01 97       	sbiw	r24, 0x01	; 1
    31f2:	f1 f7       	brne	.-4      	; 0x31f0 <measure_distance+0x18c>
    31f4:	9b 8f       	std	Y+27, r25	; 0x1b
    31f6:	8a 8f       	std	Y+26, r24	; 0x1a
    31f8:	0f c0       	rjmp	.+30     	; 0x3218 <measure_distance+0x1b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31fa:	69 a5       	ldd	r22, Y+41	; 0x29
    31fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    31fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3200:	9c a5       	ldd	r25, Y+44	; 0x2c
    3202:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	88 a7       	std	Y+40, r24	; 0x28
    320c:	88 a5       	ldd	r24, Y+40	; 0x28
    320e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3210:	89 8d       	ldd	r24, Y+25	; 0x19
    3212:	8a 95       	dec	r24
    3214:	f1 f7       	brne	.-4      	; 0x3212 <measure_distance+0x1ae>
    3216:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);

	// Set trigger pin high for 10 microseconds
	PORTA |= (1 << TRIGGER_PIN);
    3218:	ab e3       	ldi	r26, 0x3B	; 59
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	eb e3       	ldi	r30, 0x3B	; 59
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	81 60       	ori	r24, 0x01	; 1
    3224:	8c 93       	st	X, r24
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	a0 e2       	ldi	r26, 0x20	; 32
    322c:	b1 e4       	ldi	r27, 0x41	; 65
    322e:	8d 8b       	std	Y+21, r24	; 0x15
    3230:	9e 8b       	std	Y+22, r25	; 0x16
    3232:	af 8b       	std	Y+23, r26	; 0x17
    3234:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3236:	6d 89       	ldd	r22, Y+21	; 0x15
    3238:	7e 89       	ldd	r23, Y+22	; 0x16
    323a:	8f 89       	ldd	r24, Y+23	; 0x17
    323c:	98 8d       	ldd	r25, Y+24	; 0x18
    323e:	2b ea       	ldi	r18, 0xAB	; 171
    3240:	3a ea       	ldi	r19, 0xAA	; 170
    3242:	4a ea       	ldi	r20, 0xAA	; 170
    3244:	50 e4       	ldi	r21, 0x40	; 64
    3246:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	89 8b       	std	Y+17, r24	; 0x11
    3250:	9a 8b       	std	Y+18, r25	; 0x12
    3252:	ab 8b       	std	Y+19, r26	; 0x13
    3254:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3256:	69 89       	ldd	r22, Y+17	; 0x11
    3258:	7a 89       	ldd	r23, Y+18	; 0x12
    325a:	8b 89       	ldd	r24, Y+19	; 0x13
    325c:	9c 89       	ldd	r25, Y+20	; 0x14
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	40 e8       	ldi	r20, 0x80	; 128
    3264:	5f e3       	ldi	r21, 0x3F	; 63
    3266:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    326a:	88 23       	and	r24, r24
    326c:	1c f4       	brge	.+6      	; 0x3274 <measure_distance+0x210>
		__ticks = 1;
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	88 8b       	std	Y+16, r24	; 0x10
    3272:	91 c0       	rjmp	.+290    	; 0x3396 <measure_distance+0x332>
	else if (__tmp > 255)
    3274:	69 89       	ldd	r22, Y+17	; 0x11
    3276:	7a 89       	ldd	r23, Y+18	; 0x12
    3278:	8b 89       	ldd	r24, Y+19	; 0x13
    327a:	9c 89       	ldd	r25, Y+20	; 0x14
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	4f e7       	ldi	r20, 0x7F	; 127
    3282:	53 e4       	ldi	r21, 0x43	; 67
    3284:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3288:	18 16       	cp	r1, r24
    328a:	0c f0       	brlt	.+2      	; 0x328e <measure_distance+0x22a>
    328c:	7b c0       	rjmp	.+246    	; 0x3384 <measure_distance+0x320>
	{
		_delay_ms(__us / 1000.0);
    328e:	6d 89       	ldd	r22, Y+21	; 0x15
    3290:	7e 89       	ldd	r23, Y+22	; 0x16
    3292:	8f 89       	ldd	r24, Y+23	; 0x17
    3294:	98 8d       	ldd	r25, Y+24	; 0x18
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	4a e7       	ldi	r20, 0x7A	; 122
    329c:	54 e4       	ldi	r21, 0x44	; 68
    329e:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	8c 87       	std	Y+12, r24	; 0x0c
    32a8:	9d 87       	std	Y+13, r25	; 0x0d
    32aa:	ae 87       	std	Y+14, r26	; 0x0e
    32ac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    32b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    32b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    32b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	4a e7       	ldi	r20, 0x7A	; 122
    32bc:	55 e4       	ldi	r21, 0x45	; 69
    32be:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	88 87       	std	Y+8, r24	; 0x08
    32c8:	99 87       	std	Y+9, r25	; 0x09
    32ca:	aa 87       	std	Y+10, r26	; 0x0a
    32cc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    32ce:	68 85       	ldd	r22, Y+8	; 0x08
    32d0:	79 85       	ldd	r23, Y+9	; 0x09
    32d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    32d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	40 e8       	ldi	r20, 0x80	; 128
    32dc:	5f e3       	ldi	r21, 0x3F	; 63
    32de:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    32e2:	88 23       	and	r24, r24
    32e4:	2c f4       	brge	.+10     	; 0x32f0 <measure_distance+0x28c>
		__ticks = 1;
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	9f 83       	std	Y+7, r25	; 0x07
    32ec:	8e 83       	std	Y+6, r24	; 0x06
    32ee:	3f c0       	rjmp	.+126    	; 0x336e <measure_distance+0x30a>
	else if (__tmp > 65535)
    32f0:	68 85       	ldd	r22, Y+8	; 0x08
    32f2:	79 85       	ldd	r23, Y+9	; 0x09
    32f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    32f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	3f ef       	ldi	r19, 0xFF	; 255
    32fc:	4f e7       	ldi	r20, 0x7F	; 127
    32fe:	57 e4       	ldi	r21, 0x47	; 71
    3300:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3304:	18 16       	cp	r1, r24
    3306:	4c f5       	brge	.+82     	; 0x335a <measure_distance+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3308:	6c 85       	ldd	r22, Y+12	; 0x0c
    330a:	7d 85       	ldd	r23, Y+13	; 0x0d
    330c:	8e 85       	ldd	r24, Y+14	; 0x0e
    330e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	40 e2       	ldi	r20, 0x20	; 32
    3316:	51 e4       	ldi	r21, 0x41	; 65
    3318:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	bc 01       	movw	r22, r24
    3322:	cd 01       	movw	r24, r26
    3324:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	9f 83       	std	Y+7, r25	; 0x07
    332e:	8e 83       	std	Y+6, r24	; 0x06
    3330:	0f c0       	rjmp	.+30     	; 0x3350 <measure_distance+0x2ec>
    3332:	80 e9       	ldi	r24, 0x90	; 144
    3334:	91 e0       	ldi	r25, 0x01	; 1
    3336:	9d 83       	std	Y+5, r25	; 0x05
    3338:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    333a:	8c 81       	ldd	r24, Y+4	; 0x04
    333c:	9d 81       	ldd	r25, Y+5	; 0x05
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	f1 f7       	brne	.-4      	; 0x333e <measure_distance+0x2da>
    3342:	9d 83       	std	Y+5, r25	; 0x05
    3344:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3346:	8e 81       	ldd	r24, Y+6	; 0x06
    3348:	9f 81       	ldd	r25, Y+7	; 0x07
    334a:	01 97       	sbiw	r24, 0x01	; 1
    334c:	9f 83       	std	Y+7, r25	; 0x07
    334e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3350:	8e 81       	ldd	r24, Y+6	; 0x06
    3352:	9f 81       	ldd	r25, Y+7	; 0x07
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	69 f7       	brne	.-38     	; 0x3332 <measure_distance+0x2ce>
    3358:	24 c0       	rjmp	.+72     	; 0x33a2 <measure_distance+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    335a:	68 85       	ldd	r22, Y+8	; 0x08
    335c:	79 85       	ldd	r23, Y+9	; 0x09
    335e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3360:	9b 85       	ldd	r25, Y+11	; 0x0b
    3362:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	9f 83       	std	Y+7, r25	; 0x07
    336c:	8e 83       	std	Y+6, r24	; 0x06
    336e:	8e 81       	ldd	r24, Y+6	; 0x06
    3370:	9f 81       	ldd	r25, Y+7	; 0x07
    3372:	9b 83       	std	Y+3, r25	; 0x03
    3374:	8a 83       	std	Y+2, r24	; 0x02
    3376:	8a 81       	ldd	r24, Y+2	; 0x02
    3378:	9b 81       	ldd	r25, Y+3	; 0x03
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	f1 f7       	brne	.-4      	; 0x337a <measure_distance+0x316>
    337e:	9b 83       	std	Y+3, r25	; 0x03
    3380:	8a 83       	std	Y+2, r24	; 0x02
    3382:	0f c0       	rjmp	.+30     	; 0x33a2 <measure_distance+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3384:	69 89       	ldd	r22, Y+17	; 0x11
    3386:	7a 89       	ldd	r23, Y+18	; 0x12
    3388:	8b 89       	ldd	r24, Y+19	; 0x13
    338a:	9c 89       	ldd	r25, Y+20	; 0x14
    338c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	88 8b       	std	Y+16, r24	; 0x10
    3396:	88 89       	ldd	r24, Y+16	; 0x10
    3398:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	8a 95       	dec	r24
    339e:	f1 f7       	brne	.-4      	; 0x339c <measure_distance+0x338>
    33a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	PORTA &= ~(1 << TRIGGER_PIN);
    33a2:	ab e3       	ldi	r26, 0x3B	; 59
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	eb e3       	ldi	r30, 0x3B	; 59
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	80 81       	ld	r24, Z
    33ac:	8e 7f       	andi	r24, 0xFE	; 254
    33ae:	8c 93       	st	X, r24

	// Wait for echo pin to go high
	while (!(PIND & (1 << ECHO_PIN)))
    33b0:	e0 e3       	ldi	r30, 0x30	; 48
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	88 2f       	mov	r24, r24
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	80 74       	andi	r24, 0x40	; 64
    33bc:	90 70       	andi	r25, 0x00	; 0
    33be:	00 97       	sbiw	r24, 0x00	; 0
    33c0:	b9 f3       	breq	.-18     	; 0x33b0 <measure_distance+0x34c>
		;

	// Start timer
	TCNT1 = 0;
    33c2:	ec e4       	ldi	r30, 0x4C	; 76
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	11 82       	std	Z+1, r1	; 0x01
    33c8:	10 82       	st	Z, r1

	// Wait for echo pin to go low
	while (PIND & (1 << ECHO_PIN))
    33ca:	e0 e3       	ldi	r30, 0x30	; 48
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	80 81       	ld	r24, Z
    33d0:	88 2f       	mov	r24, r24
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	80 74       	andi	r24, 0x40	; 64
    33d6:	90 70       	andi	r25, 0x00	; 0
    33d8:	00 97       	sbiw	r24, 0x00	; 0
    33da:	b9 f7       	brne	.-18     	; 0x33ca <measure_distance+0x366>
		;

	// Stop timer
	u16 pulse_duration = TCNT1;
    33dc:	ec e4       	ldi	r30, 0x4C	; 76
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	91 81       	ldd	r25, Z+1	; 0x01
    33e4:	9c ab       	std	Y+52, r25	; 0x34
    33e6:	8b ab       	std	Y+51, r24	; 0x33

	// Calculate distance
	u16 distance = (pulse_duration * 0.0343) / 2;
    33e8:	8b a9       	ldd	r24, Y+51	; 0x33
    33ea:	9c a9       	ldd	r25, Y+52	; 0x34
    33ec:	cc 01       	movw	r24, r24
    33ee:	a0 e0       	ldi	r26, 0x00	; 0
    33f0:	b0 e0       	ldi	r27, 0x00	; 0
    33f2:	bc 01       	movw	r22, r24
    33f4:	cd 01       	movw	r24, r26
    33f6:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	bc 01       	movw	r22, r24
    3400:	cd 01       	movw	r24, r26
    3402:	28 e2       	ldi	r18, 0x28	; 40
    3404:	3e e7       	ldi	r19, 0x7E	; 126
    3406:	4c e0       	ldi	r20, 0x0C	; 12
    3408:	5d e3       	ldi	r21, 0x3D	; 61
    340a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	bc 01       	movw	r22, r24
    3414:	cd 01       	movw	r24, r26
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e0       	ldi	r20, 0x00	; 0
    341c:	50 e4       	ldi	r21, 0x40	; 64
    341e:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	bc 01       	movw	r22, r24
    3428:	cd 01       	movw	r24, r26
    342a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	9a ab       	std	Y+50, r25	; 0x32
    3434:	89 ab       	std	Y+49, r24	; 0x31

	return distance;
    3436:	89 a9       	ldd	r24, Y+49	; 0x31
    3438:	9a a9       	ldd	r25, Y+50	; 0x32
}
    343a:	e4 96       	adiw	r28, 0x34	; 52
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	de bf       	out	0x3e, r29	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	cd bf       	out	0x3d, r28	; 61
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <print_dist_LCD>:

void print_dist_LCD(u16 distance)
{
    344c:	0f 93       	push	r16
    344e:	1f 93       	push	r17
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	60 97       	sbiw	r28, 0x10	; 16
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	98 8b       	std	Y+16, r25	; 0x10
    3466:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_INIT_4bit();
    3468:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_INIT_4bit>
	dtostrf(distance, 2, 2, string);/* distance to string */
    346c:	8f 85       	ldd	r24, Y+15	; 0x0f
    346e:	98 89       	ldd	r25, Y+16	; 0x10
    3470:	cc 01       	movw	r24, r24
    3472:	a0 e0       	ldi	r26, 0x00	; 0
    3474:	b0 e0       	ldi	r27, 0x00	; 0
    3476:	bc 01       	movw	r22, r24
    3478:	cd 01       	movw	r24, r26
    347a:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	e8 e7       	ldi	r30, 0x78	; 120
    3484:	f1 e0       	ldi	r31, 0x01	; 1
    3486:	bc 01       	movw	r22, r24
    3488:	cd 01       	movw	r24, r26
    348a:	42 e0       	ldi	r20, 0x02	; 2
    348c:	22 e0       	ldi	r18, 0x02	; 2
    348e:	8f 01       	movw	r16, r30
    3490:	0e 94 32 1b 	call	0x3664	; 0x3664 <dtostrf>
	strcat(string, " cm   ");	/* Concat unit i.e.cm */
    3494:	88 e7       	ldi	r24, 0x78	; 120
    3496:	91 e0       	ldi	r25, 0x01	; 1
    3498:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <strlen>
    349c:	88 58       	subi	r24, 0x88	; 136
    349e:	9e 4f       	sbci	r25, 0xFE	; 254
    34a0:	20 e6       	ldi	r18, 0x60	; 96
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	b9 01       	movw	r22, r18
    34a6:	47 e0       	ldi	r20, 0x07	; 7
    34a8:	50 e0       	ldi	r21, 0x00	; 0
    34aa:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <memcpy>
	LCD_send_string_4bit("Dist = ");
    34ae:	87 e6       	ldi	r24, 0x67	; 103
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <LCD_send_string_4bit>
	LCD_send_string_4bit(string);
    34b6:	88 e7       	ldi	r24, 0x78	; 120
    34b8:	91 e0       	ldi	r25, 0x01	; 1
    34ba:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <LCD_send_string_4bit>
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	a6 e9       	ldi	r26, 0x96	; 150
    34c4:	b3 e4       	ldi	r27, 0x43	; 67
    34c6:	8b 87       	std	Y+11, r24	; 0x0b
    34c8:	9c 87       	std	Y+12, r25	; 0x0c
    34ca:	ad 87       	std	Y+13, r26	; 0x0d
    34cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    34d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	4a e7       	ldi	r20, 0x7A	; 122
    34dc:	55 e4       	ldi	r21, 0x45	; 69
    34de:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	8f 83       	std	Y+7, r24	; 0x07
    34e8:	98 87       	std	Y+8, r25	; 0x08
    34ea:	a9 87       	std	Y+9, r26	; 0x09
    34ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34ee:	6f 81       	ldd	r22, Y+7	; 0x07
    34f0:	78 85       	ldd	r23, Y+8	; 0x08
    34f2:	89 85       	ldd	r24, Y+9	; 0x09
    34f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e8       	ldi	r20, 0x80	; 128
    34fc:	5f e3       	ldi	r21, 0x3F	; 63
    34fe:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3502:	88 23       	and	r24, r24
    3504:	2c f4       	brge	.+10     	; 0x3510 <print_dist_LCD+0xc4>
		__ticks = 1;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	9e 83       	std	Y+6, r25	; 0x06
    350c:	8d 83       	std	Y+5, r24	; 0x05
    350e:	3f c0       	rjmp	.+126    	; 0x358e <print_dist_LCD+0x142>
	else if (__tmp > 65535)
    3510:	6f 81       	ldd	r22, Y+7	; 0x07
    3512:	78 85       	ldd	r23, Y+8	; 0x08
    3514:	89 85       	ldd	r24, Y+9	; 0x09
    3516:	9a 85       	ldd	r25, Y+10	; 0x0a
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	3f ef       	ldi	r19, 0xFF	; 255
    351c:	4f e7       	ldi	r20, 0x7F	; 127
    351e:	57 e4       	ldi	r21, 0x47	; 71
    3520:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3524:	18 16       	cp	r1, r24
    3526:	4c f5       	brge	.+82     	; 0x357a <print_dist_LCD+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3528:	6b 85       	ldd	r22, Y+11	; 0x0b
    352a:	7c 85       	ldd	r23, Y+12	; 0x0c
    352c:	8d 85       	ldd	r24, Y+13	; 0x0d
    352e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e2       	ldi	r20, 0x20	; 32
    3536:	51 e4       	ldi	r21, 0x41	; 65
    3538:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	bc 01       	movw	r22, r24
    3542:	cd 01       	movw	r24, r26
    3544:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	9e 83       	std	Y+6, r25	; 0x06
    354e:	8d 83       	std	Y+5, r24	; 0x05
    3550:	0f c0       	rjmp	.+30     	; 0x3570 <print_dist_LCD+0x124>
    3552:	80 e9       	ldi	r24, 0x90	; 144
    3554:	91 e0       	ldi	r25, 0x01	; 1
    3556:	9c 83       	std	Y+4, r25	; 0x04
    3558:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    355a:	8b 81       	ldd	r24, Y+3	; 0x03
    355c:	9c 81       	ldd	r25, Y+4	; 0x04
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	f1 f7       	brne	.-4      	; 0x355e <print_dist_LCD+0x112>
    3562:	9c 83       	std	Y+4, r25	; 0x04
    3564:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3566:	8d 81       	ldd	r24, Y+5	; 0x05
    3568:	9e 81       	ldd	r25, Y+6	; 0x06
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	9e 83       	std	Y+6, r25	; 0x06
    356e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3570:	8d 81       	ldd	r24, Y+5	; 0x05
    3572:	9e 81       	ldd	r25, Y+6	; 0x06
    3574:	00 97       	sbiw	r24, 0x00	; 0
    3576:	69 f7       	brne	.-38     	; 0x3552 <print_dist_LCD+0x106>
    3578:	14 c0       	rjmp	.+40     	; 0x35a2 <print_dist_LCD+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357a:	6f 81       	ldd	r22, Y+7	; 0x07
    357c:	78 85       	ldd	r23, Y+8	; 0x08
    357e:	89 85       	ldd	r24, Y+9	; 0x09
    3580:	9a 85       	ldd	r25, Y+10	; 0x0a
    3582:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	9e 83       	std	Y+6, r25	; 0x06
    358c:	8d 83       	std	Y+5, r24	; 0x05
    358e:	8d 81       	ldd	r24, Y+5	; 0x05
    3590:	9e 81       	ldd	r25, Y+6	; 0x06
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	9a 81       	ldd	r25, Y+2	; 0x02
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f1 f7       	brne	.-4      	; 0x359a <print_dist_LCD+0x14e>
    359e:	9a 83       	std	Y+2, r25	; 0x02
    35a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
}
    35a2:	60 96       	adiw	r28, 0x10	; 16
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	de bf       	out	0x3e, r29	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	cd bf       	out	0x3d, r28	; 61
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	1f 91       	pop	r17
    35b4:	0f 91       	pop	r16
    35b6:	08 95       	ret

000035b8 <main>:
#include <avr/io.h>

u16 distance_left;

int main (void)
{
    35b8:	df 93       	push	r29
    35ba:	cf 93       	push	r28
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
	ultrasonic_init();
    35c0:	0e 94 1d 18 	call	0x303a	; 0x303a <ultrasonic_init>
	init_servo();
    35c4:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <init_servo>
	motors_init();
    35c8:	0e 94 94 07 	call	0xf28	; 0xf28 <motors_init>

	while(1)
	{
		distance_left = measure_distance();			//calculate distance between obstacle
    35cc:	0e 94 32 18 	call	0x3064	; 0x3064 <measure_distance>
    35d0:	90 93 83 01 	sts	0x0183, r25
    35d4:	80 93 82 01 	sts	0x0182, r24

		if (distance_left < 30)
    35d8:	80 91 82 01 	lds	r24, 0x0182
    35dc:	90 91 83 01 	lds	r25, 0x0183
    35e0:	8e 31       	cpi	r24, 0x1E	; 30
    35e2:	91 05       	cpc	r25, r1
    35e4:	28 f4       	brcc	.+10     	; 0x35f0 <main+0x38>
		{
			stop_motors();
    35e6:	0e 94 3b 0a 	call	0x1476	; 0x1476 <stop_motors>
			rotate_servo_right();
    35ea:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <rotate_servo_right>
    35ee:	ee cf       	rjmp	.-36     	; 0x35cc <main+0x14>
		}
		else
		{
			move_forward();
    35f0:	0e 94 9a 09 	call	0x1334	; 0x1334 <move_forward>
    35f4:	eb cf       	rjmp	.-42     	; 0x35cc <main+0x14>

000035f6 <__prologue_saves__>:
    35f6:	2f 92       	push	r2
    35f8:	3f 92       	push	r3
    35fa:	4f 92       	push	r4
    35fc:	5f 92       	push	r5
    35fe:	6f 92       	push	r6
    3600:	7f 92       	push	r7
    3602:	8f 92       	push	r8
    3604:	9f 92       	push	r9
    3606:	af 92       	push	r10
    3608:	bf 92       	push	r11
    360a:	cf 92       	push	r12
    360c:	df 92       	push	r13
    360e:	ef 92       	push	r14
    3610:	ff 92       	push	r15
    3612:	0f 93       	push	r16
    3614:	1f 93       	push	r17
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
    361e:	ca 1b       	sub	r28, r26
    3620:	db 0b       	sbc	r29, r27
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	de bf       	out	0x3e, r29	; 62
    3628:	0f be       	out	0x3f, r0	; 63
    362a:	cd bf       	out	0x3d, r28	; 61
    362c:	09 94       	ijmp

0000362e <__epilogue_restores__>:
    362e:	2a 88       	ldd	r2, Y+18	; 0x12
    3630:	39 88       	ldd	r3, Y+17	; 0x11
    3632:	48 88       	ldd	r4, Y+16	; 0x10
    3634:	5f 84       	ldd	r5, Y+15	; 0x0f
    3636:	6e 84       	ldd	r6, Y+14	; 0x0e
    3638:	7d 84       	ldd	r7, Y+13	; 0x0d
    363a:	8c 84       	ldd	r8, Y+12	; 0x0c
    363c:	9b 84       	ldd	r9, Y+11	; 0x0b
    363e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3640:	b9 84       	ldd	r11, Y+9	; 0x09
    3642:	c8 84       	ldd	r12, Y+8	; 0x08
    3644:	df 80       	ldd	r13, Y+7	; 0x07
    3646:	ee 80       	ldd	r14, Y+6	; 0x06
    3648:	fd 80       	ldd	r15, Y+5	; 0x05
    364a:	0c 81       	ldd	r16, Y+4	; 0x04
    364c:	1b 81       	ldd	r17, Y+3	; 0x03
    364e:	aa 81       	ldd	r26, Y+2	; 0x02
    3650:	b9 81       	ldd	r27, Y+1	; 0x01
    3652:	ce 0f       	add	r28, r30
    3654:	d1 1d       	adc	r29, r1
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	ed 01       	movw	r28, r26
    3662:	08 95       	ret

00003664 <dtostrf>:
    3664:	ef 92       	push	r14
    3666:	ff 92       	push	r15
    3668:	0f 93       	push	r16
    366a:	1f 93       	push	r17
    366c:	f2 2f       	mov	r31, r18
    366e:	f0 2e       	mov	r15, r16
    3670:	47 fd       	sbrc	r20, 7
    3672:	02 c0       	rjmp	.+4      	; 0x3678 <dtostrf+0x14>
    3674:	e4 e0       	ldi	r30, 0x04	; 4
    3676:	01 c0       	rjmp	.+2      	; 0x367a <dtostrf+0x16>
    3678:	e4 e1       	ldi	r30, 0x14	; 20
    367a:	24 2f       	mov	r18, r20
    367c:	33 27       	eor	r19, r19
    367e:	27 fd       	sbrc	r18, 7
    3680:	30 95       	com	r19
    3682:	37 ff       	sbrs	r19, 7
    3684:	03 c0       	rjmp	.+6      	; 0x368c <dtostrf+0x28>
    3686:	30 95       	com	r19
    3688:	21 95       	neg	r18
    368a:	3f 4f       	sbci	r19, 0xFF	; 255
    368c:	4f 2d       	mov	r20, r15
    368e:	51 2f       	mov	r21, r17
    3690:	0f 2f       	mov	r16, r31
    3692:	ee 2e       	mov	r14, r30
    3694:	0e 94 65 1b 	call	0x36ca	; 0x36ca <dtoa_prf>
    3698:	8f 2d       	mov	r24, r15
    369a:	91 2f       	mov	r25, r17
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	ff 90       	pop	r15
    36a2:	ef 90       	pop	r14
    36a4:	08 95       	ret

000036a6 <memcpy>:
    36a6:	fb 01       	movw	r30, r22
    36a8:	dc 01       	movw	r26, r24
    36aa:	02 c0       	rjmp	.+4      	; 0x36b0 <memcpy+0xa>
    36ac:	01 90       	ld	r0, Z+
    36ae:	0d 92       	st	X+, r0
    36b0:	41 50       	subi	r20, 0x01	; 1
    36b2:	50 40       	sbci	r21, 0x00	; 0
    36b4:	d8 f7       	brcc	.-10     	; 0x36ac <memcpy+0x6>
    36b6:	08 95       	ret

000036b8 <strlen>:
    36b8:	fc 01       	movw	r30, r24
    36ba:	01 90       	ld	r0, Z+
    36bc:	00 20       	and	r0, r0
    36be:	e9 f7       	brne	.-6      	; 0x36ba <strlen+0x2>
    36c0:	80 95       	com	r24
    36c2:	90 95       	com	r25
    36c4:	8e 0f       	add	r24, r30
    36c6:	9f 1f       	adc	r25, r31
    36c8:	08 95       	ret

000036ca <dtoa_prf>:
    36ca:	a9 e0       	ldi	r26, 0x09	; 9
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	eb e6       	ldi	r30, 0x6B	; 107
    36d0:	fb e1       	ldi	r31, 0x1B	; 27
    36d2:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__prologue_saves__+0x8>
    36d6:	6a 01       	movw	r12, r20
    36d8:	12 2f       	mov	r17, r18
    36da:	a0 2e       	mov	r10, r16
    36dc:	be 2c       	mov	r11, r14
    36de:	2b e3       	ldi	r18, 0x3B	; 59
    36e0:	20 17       	cp	r18, r16
    36e2:	18 f4       	brcc	.+6      	; 0x36ea <dtoa_prf+0x20>
    36e4:	2c e3       	ldi	r18, 0x3C	; 60
    36e6:	92 2e       	mov	r9, r18
    36e8:	02 c0       	rjmp	.+4      	; 0x36ee <dtoa_prf+0x24>
    36ea:	90 2e       	mov	r9, r16
    36ec:	93 94       	inc	r9
    36ee:	ae 01       	movw	r20, r28
    36f0:	4f 5f       	subi	r20, 0xFF	; 255
    36f2:	5f 4f       	sbci	r21, 0xFF	; 255
    36f4:	27 e0       	ldi	r18, 0x07	; 7
    36f6:	09 2d       	mov	r16, r9
    36f8:	0e 94 c7 1c 	call	0x398e	; 0x398e <__ftoa_engine>
    36fc:	bc 01       	movw	r22, r24
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	e8 2e       	mov	r14, r24
    3702:	ff 24       	eor	r15, r15
    3704:	c7 01       	movw	r24, r14
    3706:	89 70       	andi	r24, 0x09	; 9
    3708:	90 70       	andi	r25, 0x00	; 0
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	11 f4       	brne	.+4      	; 0x3712 <dtoa_prf+0x48>
    370e:	ad e2       	ldi	r26, 0x2D	; 45
    3710:	09 c0       	rjmp	.+18     	; 0x3724 <dtoa_prf+0x5a>
    3712:	b1 fe       	sbrs	r11, 1
    3714:	02 c0       	rjmp	.+4      	; 0x371a <dtoa_prf+0x50>
    3716:	ab e2       	ldi	r26, 0x2B	; 43
    3718:	05 c0       	rjmp	.+10     	; 0x3724 <dtoa_prf+0x5a>
    371a:	b0 fc       	sbrc	r11, 0
    371c:	02 c0       	rjmp	.+4      	; 0x3722 <dtoa_prf+0x58>
    371e:	a0 e0       	ldi	r26, 0x00	; 0
    3720:	01 c0       	rjmp	.+2      	; 0x3724 <dtoa_prf+0x5a>
    3722:	a0 e2       	ldi	r26, 0x20	; 32
    3724:	e3 fe       	sbrs	r14, 3
    3726:	3b c0       	rjmp	.+118    	; 0x379e <dtoa_prf+0xd4>
    3728:	aa 23       	and	r26, r26
    372a:	11 f4       	brne	.+4      	; 0x3730 <dtoa_prf+0x66>
    372c:	23 e0       	ldi	r18, 0x03	; 3
    372e:	01 c0       	rjmp	.+2      	; 0x3732 <dtoa_prf+0x68>
    3730:	24 e0       	ldi	r18, 0x04	; 4
    3732:	21 17       	cp	r18, r17
    3734:	10 f0       	brcs	.+4      	; 0x373a <dtoa_prf+0x70>
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	02 c0       	rjmp	.+4      	; 0x373e <dtoa_prf+0x74>
    373a:	12 1b       	sub	r17, r18
    373c:	21 2f       	mov	r18, r17
    373e:	eb 2c       	mov	r14, r11
    3740:	b4 fe       	sbrs	r11, 4
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <dtoa_prf+0x7e>
    3744:	32 2f       	mov	r19, r18
    3746:	0a c0       	rjmp	.+20     	; 0x375c <dtoa_prf+0x92>
    3748:	f6 01       	movw	r30, r12
    374a:	32 2f       	mov	r19, r18
    374c:	80 e2       	ldi	r24, 0x20	; 32
    374e:	02 c0       	rjmp	.+4      	; 0x3754 <dtoa_prf+0x8a>
    3750:	81 93       	st	Z+, r24
    3752:	31 50       	subi	r19, 0x01	; 1
    3754:	33 23       	and	r19, r19
    3756:	e1 f7       	brne	.-8      	; 0x3750 <dtoa_prf+0x86>
    3758:	c2 0e       	add	r12, r18
    375a:	d1 1c       	adc	r13, r1
    375c:	aa 23       	and	r26, r26
    375e:	19 f0       	breq	.+6      	; 0x3766 <dtoa_prf+0x9c>
    3760:	f6 01       	movw	r30, r12
    3762:	a1 93       	st	Z+, r26
    3764:	6f 01       	movw	r12, r30
    3766:	f6 01       	movw	r30, r12
    3768:	31 96       	adiw	r30, 0x01	; 1
    376a:	e2 fe       	sbrs	r14, 2
    376c:	05 c0       	rjmp	.+10     	; 0x3778 <dtoa_prf+0xae>
    376e:	9e e4       	ldi	r25, 0x4E	; 78
    3770:	d6 01       	movw	r26, r12
    3772:	9c 93       	st	X, r25
    3774:	81 e4       	ldi	r24, 0x41	; 65
    3776:	04 c0       	rjmp	.+8      	; 0x3780 <dtoa_prf+0xb6>
    3778:	9e e6       	ldi	r25, 0x6E	; 110
    377a:	d6 01       	movw	r26, r12
    377c:	9c 93       	st	X, r25
    377e:	81 e6       	ldi	r24, 0x61	; 97
    3780:	11 96       	adiw	r26, 0x01	; 1
    3782:	8c 93       	st	X, r24
    3784:	91 83       	std	Z+1, r25	; 0x01
    3786:	32 96       	adiw	r30, 0x02	; 2
    3788:	df 01       	movw	r26, r30
    378a:	83 2f       	mov	r24, r19
    378c:	90 e2       	ldi	r25, 0x20	; 32
    378e:	02 c0       	rjmp	.+4      	; 0x3794 <dtoa_prf+0xca>
    3790:	9d 93       	st	X+, r25
    3792:	81 50       	subi	r24, 0x01	; 1
    3794:	88 23       	and	r24, r24
    3796:	e1 f7       	brne	.-8      	; 0x3790 <dtoa_prf+0xc6>
    3798:	e3 0f       	add	r30, r19
    379a:	f1 1d       	adc	r31, r1
    379c:	40 c0       	rjmp	.+128    	; 0x381e <dtoa_prf+0x154>
    379e:	e2 fe       	sbrs	r14, 2
    37a0:	42 c0       	rjmp	.+132    	; 0x3826 <dtoa_prf+0x15c>
    37a2:	aa 23       	and	r26, r26
    37a4:	11 f4       	brne	.+4      	; 0x37aa <dtoa_prf+0xe0>
    37a6:	23 e0       	ldi	r18, 0x03	; 3
    37a8:	01 c0       	rjmp	.+2      	; 0x37ac <dtoa_prf+0xe2>
    37aa:	24 e0       	ldi	r18, 0x04	; 4
    37ac:	21 17       	cp	r18, r17
    37ae:	10 f0       	brcs	.+4      	; 0x37b4 <dtoa_prf+0xea>
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	02 c0       	rjmp	.+4      	; 0x37b8 <dtoa_prf+0xee>
    37b4:	12 1b       	sub	r17, r18
    37b6:	21 2f       	mov	r18, r17
    37b8:	eb 2c       	mov	r14, r11
    37ba:	b4 fe       	sbrs	r11, 4
    37bc:	02 c0       	rjmp	.+4      	; 0x37c2 <dtoa_prf+0xf8>
    37be:	92 2f       	mov	r25, r18
    37c0:	0a c0       	rjmp	.+20     	; 0x37d6 <dtoa_prf+0x10c>
    37c2:	f6 01       	movw	r30, r12
    37c4:	92 2f       	mov	r25, r18
    37c6:	80 e2       	ldi	r24, 0x20	; 32
    37c8:	02 c0       	rjmp	.+4      	; 0x37ce <dtoa_prf+0x104>
    37ca:	81 93       	st	Z+, r24
    37cc:	91 50       	subi	r25, 0x01	; 1
    37ce:	99 23       	and	r25, r25
    37d0:	e1 f7       	brne	.-8      	; 0x37ca <dtoa_prf+0x100>
    37d2:	c2 0e       	add	r12, r18
    37d4:	d1 1c       	adc	r13, r1
    37d6:	aa 23       	and	r26, r26
    37d8:	19 f0       	breq	.+6      	; 0x37e0 <dtoa_prf+0x116>
    37da:	f6 01       	movw	r30, r12
    37dc:	a1 93       	st	Z+, r26
    37de:	6f 01       	movw	r12, r30
    37e0:	f6 01       	movw	r30, r12
    37e2:	31 96       	adiw	r30, 0x01	; 1
    37e4:	e2 fe       	sbrs	r14, 2
    37e6:	08 c0       	rjmp	.+16     	; 0x37f8 <dtoa_prf+0x12e>
    37e8:	89 e4       	ldi	r24, 0x49	; 73
    37ea:	d6 01       	movw	r26, r12
    37ec:	8c 93       	st	X, r24
    37ee:	8e e4       	ldi	r24, 0x4E	; 78
    37f0:	11 96       	adiw	r26, 0x01	; 1
    37f2:	8c 93       	st	X, r24
    37f4:	86 e4       	ldi	r24, 0x46	; 70
    37f6:	07 c0       	rjmp	.+14     	; 0x3806 <dtoa_prf+0x13c>
    37f8:	89 e6       	ldi	r24, 0x69	; 105
    37fa:	d6 01       	movw	r26, r12
    37fc:	8c 93       	st	X, r24
    37fe:	8e e6       	ldi	r24, 0x6E	; 110
    3800:	11 96       	adiw	r26, 0x01	; 1
    3802:	8c 93       	st	X, r24
    3804:	86 e6       	ldi	r24, 0x66	; 102
    3806:	81 83       	std	Z+1, r24	; 0x01
    3808:	32 96       	adiw	r30, 0x02	; 2
    380a:	df 01       	movw	r26, r30
    380c:	89 2f       	mov	r24, r25
    380e:	20 e2       	ldi	r18, 0x20	; 32
    3810:	02 c0       	rjmp	.+4      	; 0x3816 <dtoa_prf+0x14c>
    3812:	2d 93       	st	X+, r18
    3814:	81 50       	subi	r24, 0x01	; 1
    3816:	88 23       	and	r24, r24
    3818:	e1 f7       	brne	.-8      	; 0x3812 <dtoa_prf+0x148>
    381a:	e9 0f       	add	r30, r25
    381c:	f1 1d       	adc	r31, r1
    381e:	10 82       	st	Z, r1
    3820:	2e ef       	ldi	r18, 0xFE	; 254
    3822:	3f ef       	ldi	r19, 0xFF	; 255
    3824:	af c0       	rjmp	.+350    	; 0x3984 <dtoa_prf+0x2ba>
    3826:	16 16       	cp	r1, r22
    3828:	17 06       	cpc	r1, r23
    382a:	1c f0       	brlt	.+6      	; 0x3832 <dtoa_prf+0x168>
    382c:	41 e0       	ldi	r20, 0x01	; 1
    382e:	50 e0       	ldi	r21, 0x00	; 0
    3830:	03 c0       	rjmp	.+6      	; 0x3838 <dtoa_prf+0x16e>
    3832:	ab 01       	movw	r20, r22
    3834:	4f 5f       	subi	r20, 0xFF	; 255
    3836:	5f 4f       	sbci	r21, 0xFF	; 255
    3838:	aa 20       	and	r10, r10
    383a:	19 f4       	brne	.+6      	; 0x3842 <dtoa_prf+0x178>
    383c:	80 e0       	ldi	r24, 0x00	; 0
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	03 c0       	rjmp	.+6      	; 0x3848 <dtoa_prf+0x17e>
    3842:	8a 2d       	mov	r24, r10
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	01 96       	adiw	r24, 0x01	; 1
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	aa 23       	and	r26, r26
    384e:	11 f0       	breq	.+4      	; 0x3854 <dtoa_prf+0x18a>
    3850:	21 e0       	ldi	r18, 0x01	; 1
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	24 0f       	add	r18, r20
    3856:	35 1f       	adc	r19, r21
    3858:	28 0f       	add	r18, r24
    385a:	39 1f       	adc	r19, r25
    385c:	81 2f       	mov	r24, r17
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	28 17       	cp	r18, r24
    3862:	39 07       	cpc	r19, r25
    3864:	14 f0       	brlt	.+4      	; 0x386a <dtoa_prf+0x1a0>
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	02 c0       	rjmp	.+4      	; 0x386e <dtoa_prf+0x1a4>
    386a:	12 1b       	sub	r17, r18
    386c:	21 2f       	mov	r18, r17
    386e:	4b 2d       	mov	r20, r11
    3870:	50 e0       	ldi	r21, 0x00	; 0
    3872:	ca 01       	movw	r24, r20
    3874:	80 71       	andi	r24, 0x10	; 16
    3876:	90 70       	andi	r25, 0x00	; 0
    3878:	b4 fc       	sbrc	r11, 4
    387a:	0d c0       	rjmp	.+26     	; 0x3896 <dtoa_prf+0x1cc>
    387c:	b3 fc       	sbrc	r11, 3
    387e:	0b c0       	rjmp	.+22     	; 0x3896 <dtoa_prf+0x1cc>
    3880:	f6 01       	movw	r30, r12
    3882:	32 2f       	mov	r19, r18
    3884:	40 e2       	ldi	r20, 0x20	; 32
    3886:	02 c0       	rjmp	.+4      	; 0x388c <dtoa_prf+0x1c2>
    3888:	41 93       	st	Z+, r20
    388a:	31 50       	subi	r19, 0x01	; 1
    388c:	33 23       	and	r19, r19
    388e:	e1 f7       	brne	.-8      	; 0x3888 <dtoa_prf+0x1be>
    3890:	c2 0e       	add	r12, r18
    3892:	d1 1c       	adc	r13, r1
    3894:	01 c0       	rjmp	.+2      	; 0x3898 <dtoa_prf+0x1ce>
    3896:	32 2f       	mov	r19, r18
    3898:	aa 23       	and	r26, r26
    389a:	19 f0       	breq	.+6      	; 0x38a2 <dtoa_prf+0x1d8>
    389c:	f6 01       	movw	r30, r12
    389e:	a1 93       	st	Z+, r26
    38a0:	6f 01       	movw	r12, r30
    38a2:	89 2b       	or	r24, r25
    38a4:	11 f0       	breq	.+4      	; 0x38aa <dtoa_prf+0x1e0>
    38a6:	13 2f       	mov	r17, r19
    38a8:	0a c0       	rjmp	.+20     	; 0x38be <dtoa_prf+0x1f4>
    38aa:	f6 01       	movw	r30, r12
    38ac:	13 2f       	mov	r17, r19
    38ae:	80 e3       	ldi	r24, 0x30	; 48
    38b0:	02 c0       	rjmp	.+4      	; 0x38b6 <dtoa_prf+0x1ec>
    38b2:	81 93       	st	Z+, r24
    38b4:	11 50       	subi	r17, 0x01	; 1
    38b6:	11 23       	and	r17, r17
    38b8:	e1 f7       	brne	.-8      	; 0x38b2 <dtoa_prf+0x1e8>
    38ba:	c3 0e       	add	r12, r19
    38bc:	d1 1c       	adc	r13, r1
    38be:	09 2d       	mov	r16, r9
    38c0:	06 0f       	add	r16, r22
    38c2:	ba 80       	ldd	r11, Y+2	; 0x02
    38c4:	90 e1       	ldi	r25, 0x10	; 16
    38c6:	89 2e       	mov	r8, r25
    38c8:	91 2c       	mov	r9, r1
    38ca:	8e 20       	and	r8, r14
    38cc:	9f 20       	and	r9, r15
    38ce:	e4 fe       	sbrs	r14, 4
    38d0:	04 c0       	rjmp	.+8      	; 0x38da <dtoa_prf+0x210>
    38d2:	f1 e3       	ldi	r31, 0x31	; 49
    38d4:	bf 16       	cp	r11, r31
    38d6:	09 f4       	brne	.+2      	; 0x38da <dtoa_prf+0x210>
    38d8:	01 50       	subi	r16, 0x01	; 1
    38da:	10 16       	cp	r1, r16
    38dc:	14 f0       	brlt	.+4      	; 0x38e2 <dtoa_prf+0x218>
    38de:	01 e0       	ldi	r16, 0x01	; 1
    38e0:	03 c0       	rjmp	.+6      	; 0x38e8 <dtoa_prf+0x21e>
    38e2:	09 30       	cpi	r16, 0x09	; 9
    38e4:	08 f0       	brcs	.+2      	; 0x38e8 <dtoa_prf+0x21e>
    38e6:	08 e0       	ldi	r16, 0x08	; 8
    38e8:	9b 01       	movw	r18, r22
    38ea:	77 ff       	sbrs	r23, 7
    38ec:	02 c0       	rjmp	.+4      	; 0x38f2 <dtoa_prf+0x228>
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	cb 01       	movw	r24, r22
    38f4:	01 96       	adiw	r24, 0x01	; 1
    38f6:	82 1b       	sub	r24, r18
    38f8:	93 0b       	sbc	r25, r19
    38fa:	fe 01       	movw	r30, r28
    38fc:	31 96       	adiw	r30, 0x01	; 1
    38fe:	e8 0f       	add	r30, r24
    3900:	f9 1f       	adc	r31, r25
    3902:	8e e2       	ldi	r24, 0x2E	; 46
    3904:	f8 2e       	mov	r15, r24
    3906:	3b 01       	movw	r6, r22
    3908:	60 1a       	sub	r6, r16
    390a:	71 08       	sbc	r7, r1
    390c:	8a 2d       	mov	r24, r10
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	44 27       	eor	r20, r20
    3912:	55 27       	eor	r21, r21
    3914:	48 1b       	sub	r20, r24
    3916:	59 0b       	sbc	r21, r25
    3918:	8f ef       	ldi	r24, 0xFF	; 255
    391a:	2f 3f       	cpi	r18, 0xFF	; 255
    391c:	38 07       	cpc	r19, r24
    391e:	19 f4       	brne	.+6      	; 0x3926 <dtoa_prf+0x25c>
    3920:	d6 01       	movw	r26, r12
    3922:	fd 92       	st	X+, r15
    3924:	6d 01       	movw	r12, r26
    3926:	62 17       	cp	r22, r18
    3928:	73 07       	cpc	r23, r19
    392a:	2c f0       	brlt	.+10     	; 0x3936 <dtoa_prf+0x26c>
    392c:	62 16       	cp	r6, r18
    392e:	73 06       	cpc	r7, r19
    3930:	14 f4       	brge	.+4      	; 0x3936 <dtoa_prf+0x26c>
    3932:	80 81       	ld	r24, Z
    3934:	01 c0       	rjmp	.+2      	; 0x3938 <dtoa_prf+0x26e>
    3936:	80 e3       	ldi	r24, 0x30	; 48
    3938:	21 50       	subi	r18, 0x01	; 1
    393a:	30 40       	sbci	r19, 0x00	; 0
    393c:	31 96       	adiw	r30, 0x01	; 1
    393e:	24 17       	cp	r18, r20
    3940:	35 07       	cpc	r19, r21
    3942:	24 f0       	brlt	.+8      	; 0x394c <dtoa_prf+0x282>
    3944:	d6 01       	movw	r26, r12
    3946:	8d 93       	st	X+, r24
    3948:	6d 01       	movw	r12, r26
    394a:	e6 cf       	rjmp	.-52     	; 0x3918 <dtoa_prf+0x24e>
    394c:	26 17       	cp	r18, r22
    394e:	37 07       	cpc	r19, r23
    3950:	49 f4       	brne	.+18     	; 0x3964 <dtoa_prf+0x29a>
    3952:	b5 e3       	ldi	r27, 0x35	; 53
    3954:	bb 15       	cp	r27, r11
    3956:	28 f0       	brcs	.+10     	; 0x3962 <dtoa_prf+0x298>
    3958:	bb 16       	cp	r11, r27
    395a:	21 f4       	brne	.+8      	; 0x3964 <dtoa_prf+0x29a>
    395c:	81 14       	cp	r8, r1
    395e:	91 04       	cpc	r9, r1
    3960:	09 f4       	brne	.+2      	; 0x3964 <dtoa_prf+0x29a>
    3962:	81 e3       	ldi	r24, 0x31	; 49
    3964:	f6 01       	movw	r30, r12
    3966:	81 93       	st	Z+, r24
    3968:	d6 01       	movw	r26, r12
    396a:	81 2f       	mov	r24, r17
    396c:	90 e2       	ldi	r25, 0x20	; 32
    396e:	02 c0       	rjmp	.+4      	; 0x3974 <dtoa_prf+0x2aa>
    3970:	9c 93       	st	X, r25
    3972:	81 50       	subi	r24, 0x01	; 1
    3974:	11 96       	adiw	r26, 0x01	; 1
    3976:	88 23       	and	r24, r24
    3978:	d9 f7       	brne	.-10     	; 0x3970 <dtoa_prf+0x2a6>
    397a:	e1 0f       	add	r30, r17
    397c:	f1 1d       	adc	r31, r1
    397e:	10 82       	st	Z, r1
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	c9 01       	movw	r24, r18
    3986:	29 96       	adiw	r28, 0x09	; 9
    3988:	ee e0       	ldi	r30, 0x0E	; 14
    398a:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <__epilogue_restores__+0x8>

0000398e <__ftoa_engine>:
    398e:	28 30       	cpi	r18, 0x08	; 8
    3990:	08 f0       	brcs	.+2      	; 0x3994 <__ftoa_engine+0x6>
    3992:	27 e0       	ldi	r18, 0x07	; 7
    3994:	33 27       	eor	r19, r19
    3996:	da 01       	movw	r26, r20
    3998:	99 0f       	add	r25, r25
    399a:	31 1d       	adc	r19, r1
    399c:	87 fd       	sbrc	r24, 7
    399e:	91 60       	ori	r25, 0x01	; 1
    39a0:	00 96       	adiw	r24, 0x00	; 0
    39a2:	61 05       	cpc	r22, r1
    39a4:	71 05       	cpc	r23, r1
    39a6:	39 f4       	brne	.+14     	; 0x39b6 <__ftoa_engine+0x28>
    39a8:	32 60       	ori	r19, 0x02	; 2
    39aa:	2e 5f       	subi	r18, 0xFE	; 254
    39ac:	3d 93       	st	X+, r19
    39ae:	30 e3       	ldi	r19, 0x30	; 48
    39b0:	2a 95       	dec	r18
    39b2:	e1 f7       	brne	.-8      	; 0x39ac <__ftoa_engine+0x1e>
    39b4:	08 95       	ret
    39b6:	9f 3f       	cpi	r25, 0xFF	; 255
    39b8:	30 f0       	brcs	.+12     	; 0x39c6 <__ftoa_engine+0x38>
    39ba:	80 38       	cpi	r24, 0x80	; 128
    39bc:	71 05       	cpc	r23, r1
    39be:	61 05       	cpc	r22, r1
    39c0:	09 f0       	breq	.+2      	; 0x39c4 <__ftoa_engine+0x36>
    39c2:	3c 5f       	subi	r19, 0xFC	; 252
    39c4:	3c 5f       	subi	r19, 0xFC	; 252
    39c6:	3d 93       	st	X+, r19
    39c8:	91 30       	cpi	r25, 0x01	; 1
    39ca:	08 f0       	brcs	.+2      	; 0x39ce <__ftoa_engine+0x40>
    39cc:	80 68       	ori	r24, 0x80	; 128
    39ce:	91 1d       	adc	r25, r1
    39d0:	df 93       	push	r29
    39d2:	cf 93       	push	r28
    39d4:	1f 93       	push	r17
    39d6:	0f 93       	push	r16
    39d8:	ff 92       	push	r15
    39da:	ef 92       	push	r14
    39dc:	19 2f       	mov	r17, r25
    39de:	98 7f       	andi	r25, 0xF8	; 248
    39e0:	96 95       	lsr	r25
    39e2:	e9 2f       	mov	r30, r25
    39e4:	96 95       	lsr	r25
    39e6:	96 95       	lsr	r25
    39e8:	e9 0f       	add	r30, r25
    39ea:	ff 27       	eor	r31, r31
    39ec:	e2 55       	subi	r30, 0x52	; 82
    39ee:	ff 4f       	sbci	r31, 0xFF	; 255
    39f0:	99 27       	eor	r25, r25
    39f2:	33 27       	eor	r19, r19
    39f4:	ee 24       	eor	r14, r14
    39f6:	ff 24       	eor	r15, r15
    39f8:	a7 01       	movw	r20, r14
    39fa:	e7 01       	movw	r28, r14
    39fc:	05 90       	lpm	r0, Z+
    39fe:	08 94       	sec
    3a00:	07 94       	ror	r0
    3a02:	28 f4       	brcc	.+10     	; 0x3a0e <__ftoa_engine+0x80>
    3a04:	36 0f       	add	r19, r22
    3a06:	e7 1e       	adc	r14, r23
    3a08:	f8 1e       	adc	r15, r24
    3a0a:	49 1f       	adc	r20, r25
    3a0c:	51 1d       	adc	r21, r1
    3a0e:	66 0f       	add	r22, r22
    3a10:	77 1f       	adc	r23, r23
    3a12:	88 1f       	adc	r24, r24
    3a14:	99 1f       	adc	r25, r25
    3a16:	06 94       	lsr	r0
    3a18:	a1 f7       	brne	.-24     	; 0x3a02 <__ftoa_engine+0x74>
    3a1a:	05 90       	lpm	r0, Z+
    3a1c:	07 94       	ror	r0
    3a1e:	28 f4       	brcc	.+10     	; 0x3a2a <__ftoa_engine+0x9c>
    3a20:	e7 0e       	add	r14, r23
    3a22:	f8 1e       	adc	r15, r24
    3a24:	49 1f       	adc	r20, r25
    3a26:	56 1f       	adc	r21, r22
    3a28:	c1 1d       	adc	r28, r1
    3a2a:	77 0f       	add	r23, r23
    3a2c:	88 1f       	adc	r24, r24
    3a2e:	99 1f       	adc	r25, r25
    3a30:	66 1f       	adc	r22, r22
    3a32:	06 94       	lsr	r0
    3a34:	a1 f7       	brne	.-24     	; 0x3a1e <__ftoa_engine+0x90>
    3a36:	05 90       	lpm	r0, Z+
    3a38:	07 94       	ror	r0
    3a3a:	28 f4       	brcc	.+10     	; 0x3a46 <__ftoa_engine+0xb8>
    3a3c:	f8 0e       	add	r15, r24
    3a3e:	49 1f       	adc	r20, r25
    3a40:	56 1f       	adc	r21, r22
    3a42:	c7 1f       	adc	r28, r23
    3a44:	d1 1d       	adc	r29, r1
    3a46:	88 0f       	add	r24, r24
    3a48:	99 1f       	adc	r25, r25
    3a4a:	66 1f       	adc	r22, r22
    3a4c:	77 1f       	adc	r23, r23
    3a4e:	06 94       	lsr	r0
    3a50:	a1 f7       	brne	.-24     	; 0x3a3a <__ftoa_engine+0xac>
    3a52:	05 90       	lpm	r0, Z+
    3a54:	07 94       	ror	r0
    3a56:	20 f4       	brcc	.+8      	; 0x3a60 <__ftoa_engine+0xd2>
    3a58:	49 0f       	add	r20, r25
    3a5a:	56 1f       	adc	r21, r22
    3a5c:	c7 1f       	adc	r28, r23
    3a5e:	d8 1f       	adc	r29, r24
    3a60:	99 0f       	add	r25, r25
    3a62:	66 1f       	adc	r22, r22
    3a64:	77 1f       	adc	r23, r23
    3a66:	88 1f       	adc	r24, r24
    3a68:	06 94       	lsr	r0
    3a6a:	a9 f7       	brne	.-22     	; 0x3a56 <__ftoa_engine+0xc8>
    3a6c:	84 91       	lpm	r24, Z+
    3a6e:	10 95       	com	r17
    3a70:	17 70       	andi	r17, 0x07	; 7
    3a72:	41 f0       	breq	.+16     	; 0x3a84 <__ftoa_engine+0xf6>
    3a74:	d6 95       	lsr	r29
    3a76:	c7 95       	ror	r28
    3a78:	57 95       	ror	r21
    3a7a:	47 95       	ror	r20
    3a7c:	f7 94       	ror	r15
    3a7e:	e7 94       	ror	r14
    3a80:	1a 95       	dec	r17
    3a82:	c1 f7       	brne	.-16     	; 0x3a74 <__ftoa_engine+0xe6>
    3a84:	e4 e5       	ldi	r30, 0x54	; 84
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	68 94       	set
    3a8a:	15 90       	lpm	r1, Z+
    3a8c:	15 91       	lpm	r17, Z+
    3a8e:	35 91       	lpm	r19, Z+
    3a90:	65 91       	lpm	r22, Z+
    3a92:	95 91       	lpm	r25, Z+
    3a94:	05 90       	lpm	r0, Z+
    3a96:	7f e2       	ldi	r23, 0x2F	; 47
    3a98:	73 95       	inc	r23
    3a9a:	e1 18       	sub	r14, r1
    3a9c:	f1 0a       	sbc	r15, r17
    3a9e:	43 0b       	sbc	r20, r19
    3aa0:	56 0b       	sbc	r21, r22
    3aa2:	c9 0b       	sbc	r28, r25
    3aa4:	d0 09       	sbc	r29, r0
    3aa6:	c0 f7       	brcc	.-16     	; 0x3a98 <__ftoa_engine+0x10a>
    3aa8:	e1 0c       	add	r14, r1
    3aaa:	f1 1e       	adc	r15, r17
    3aac:	43 1f       	adc	r20, r19
    3aae:	56 1f       	adc	r21, r22
    3ab0:	c9 1f       	adc	r28, r25
    3ab2:	d0 1d       	adc	r29, r0
    3ab4:	7e f4       	brtc	.+30     	; 0x3ad4 <__ftoa_engine+0x146>
    3ab6:	70 33       	cpi	r23, 0x30	; 48
    3ab8:	11 f4       	brne	.+4      	; 0x3abe <__ftoa_engine+0x130>
    3aba:	8a 95       	dec	r24
    3abc:	e6 cf       	rjmp	.-52     	; 0x3a8a <__ftoa_engine+0xfc>
    3abe:	e8 94       	clt
    3ac0:	01 50       	subi	r16, 0x01	; 1
    3ac2:	30 f0       	brcs	.+12     	; 0x3ad0 <__ftoa_engine+0x142>
    3ac4:	08 0f       	add	r16, r24
    3ac6:	0a f4       	brpl	.+2      	; 0x3aca <__ftoa_engine+0x13c>
    3ac8:	00 27       	eor	r16, r16
    3aca:	02 17       	cp	r16, r18
    3acc:	08 f4       	brcc	.+2      	; 0x3ad0 <__ftoa_engine+0x142>
    3ace:	20 2f       	mov	r18, r16
    3ad0:	23 95       	inc	r18
    3ad2:	02 2f       	mov	r16, r18
    3ad4:	7a 33       	cpi	r23, 0x3A	; 58
    3ad6:	28 f0       	brcs	.+10     	; 0x3ae2 <__ftoa_engine+0x154>
    3ad8:	79 e3       	ldi	r23, 0x39	; 57
    3ada:	7d 93       	st	X+, r23
    3adc:	2a 95       	dec	r18
    3ade:	e9 f7       	brne	.-6      	; 0x3ada <__ftoa_engine+0x14c>
    3ae0:	10 c0       	rjmp	.+32     	; 0x3b02 <__ftoa_engine+0x174>
    3ae2:	7d 93       	st	X+, r23
    3ae4:	2a 95       	dec	r18
    3ae6:	89 f6       	brne	.-94     	; 0x3a8a <__ftoa_engine+0xfc>
    3ae8:	06 94       	lsr	r0
    3aea:	97 95       	ror	r25
    3aec:	67 95       	ror	r22
    3aee:	37 95       	ror	r19
    3af0:	17 95       	ror	r17
    3af2:	17 94       	ror	r1
    3af4:	e1 18       	sub	r14, r1
    3af6:	f1 0a       	sbc	r15, r17
    3af8:	43 0b       	sbc	r20, r19
    3afa:	56 0b       	sbc	r21, r22
    3afc:	c9 0b       	sbc	r28, r25
    3afe:	d0 09       	sbc	r29, r0
    3b00:	98 f0       	brcs	.+38     	; 0x3b28 <__ftoa_engine+0x19a>
    3b02:	23 95       	inc	r18
    3b04:	7e 91       	ld	r23, -X
    3b06:	73 95       	inc	r23
    3b08:	7a 33       	cpi	r23, 0x3A	; 58
    3b0a:	08 f0       	brcs	.+2      	; 0x3b0e <__ftoa_engine+0x180>
    3b0c:	70 e3       	ldi	r23, 0x30	; 48
    3b0e:	7c 93       	st	X, r23
    3b10:	20 13       	cpse	r18, r16
    3b12:	b8 f7       	brcc	.-18     	; 0x3b02 <__ftoa_engine+0x174>
    3b14:	7e 91       	ld	r23, -X
    3b16:	70 61       	ori	r23, 0x10	; 16
    3b18:	7d 93       	st	X+, r23
    3b1a:	30 f0       	brcs	.+12     	; 0x3b28 <__ftoa_engine+0x19a>
    3b1c:	83 95       	inc	r24
    3b1e:	71 e3       	ldi	r23, 0x31	; 49
    3b20:	7d 93       	st	X+, r23
    3b22:	70 e3       	ldi	r23, 0x30	; 48
    3b24:	2a 95       	dec	r18
    3b26:	e1 f7       	brne	.-8      	; 0x3b20 <__ftoa_engine+0x192>
    3b28:	11 24       	eor	r1, r1
    3b2a:	ef 90       	pop	r14
    3b2c:	ff 90       	pop	r15
    3b2e:	0f 91       	pop	r16
    3b30:	1f 91       	pop	r17
    3b32:	cf 91       	pop	r28
    3b34:	df 91       	pop	r29
    3b36:	99 27       	eor	r25, r25
    3b38:	87 fd       	sbrc	r24, 7
    3b3a:	90 95       	com	r25
    3b3c:	08 95       	ret

00003b3e <_exit>:
    3b3e:	f8 94       	cli

00003b40 <__stop_program>:
    3b40:	ff cf       	rjmp	.-2      	; 0x3b40 <__stop_program>
